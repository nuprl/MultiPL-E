{
  "name": "mbpp_463_max_subarray_product",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long res = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            res = Math.Max(res, max);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95c84daf4d824a708be84237bd832d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95c84daf4d824a708be84237bd832d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long result = long.MinValue;\n        foreach (long a in arr) {\n            if (a > 0) {\n                max = Math.Max(max * a, a);\n                min = Math.Min(min * a, a);\n            } else if (a == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * a, a);\n                min = Math.Min(temp * a, a);\n            }\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long res = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            res = Math.Max(res, max);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] > 0)\n            {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            }\n            else if (arr[i] == 0)\n            {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            }\n            else\n            {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        if (arr.Count == 0) {\n            return 0;\n        }\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long tempMax = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(tempMax * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 0;\n        long min = 0;\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max = Math.Max(max * arr[i], arr[i]);\n                min = Math.Min(min * arr[i], arr[i]);\n            } else if (arr[i] == 0) {\n                max = 0;\n                min = 0;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], arr[i]);\n                min = Math.Min(temp * arr[i], arr[i]);\n            }\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxEndingHere = 1;\n        long minEndingHere = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.Min(minEndingHere * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n            } else {\n                long temp = maxEndingHere;\n                maxEndingHere = Math.Max(minEndingHere * arr[i], 1);\n                minEndingHere = temp * arr[i];\n            }\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long currentProduct = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            currentProduct = Math.Max(currentProduct * arr[i], arr[i]);\n            maxProduct = Math.Max(maxProduct, currentProduct);\n        }\n        return maxProduct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b595285e0fe9477fbb61d6ae39c4368e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b595285e0fe9477fbb61d6ae39c4368e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if (arr[i] < 0)\n            {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max *= arr[i];\n                min = Math.Min(min * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], 1);\n                min = temp * arr[i];\n            }\n            if (max_so_far < max) {\n                max_so_far = max;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Fill in your code here.\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long result = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max *= arr[i];\n                min = Math.Min(min * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], 1);\n                min = temp * arr[i];\n            }\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] > 0)\n            {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            }\n            else if (arr[i] == 0)\n            {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            }\n            else\n            {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max = Math.Max(max * arr[i], arr[i]);\n                min = Math.Min(min * arr[i], arr[i]);\n            } else if (arr[i] == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], arr[i]);\n                min = Math.Min(temp * arr[i], arr[i]);\n            }\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] > 0)\n            {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            }\n            else if (arr[i] == 0)\n            {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            }\n            else\n            {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        if (arr.Count == 0) return 0;\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) result = max;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            maxSoFar = Math.Max(max, maxSoFar);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            }\n            else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            }\n            else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long result = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max = max * arr[i];\n                min = Math.Min(min * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], 1);\n                min = temp * arr[i];\n            }\n            if (result < max) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95c84daf4d824a708be84237bd832d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95c84daf4d824a708be84237bd832d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long res = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > res) {\n                res = max;\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_so_far = arr[0];\n        long min_so_far = arr[0];\n        long max_ending_here = arr[0];\n        long min_ending_here = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            max_ending_here = Math.Max(Math.Max(max_ending_here * arr[i], min_ending_here * arr[i]), arr[i]);\n            min_ending_here = Math.Min(Math.Min(max_ending_here * arr[i], min_ending_here * arr[i]), arr[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n            min_so_far = Math.Min(min_so_far, min_ending_here);\n            result = Math.Max(result, max_so_far);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c680aabdd2d844879f18bff90d9ad7b1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = long.MinValue;\n        long current = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            current *= arr[i];\n            max = Math.Max(max, current);\n            if (current == 0) {\n                current = 1;\n            }\n        }\n        current = 1;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n            current *= arr[i];\n            max = Math.Max(max, current);\n            if (current == 0) {\n                current = 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = long.MinValue;\n        long currentProduct = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            currentProduct *= arr[i];\n            maxProduct = Math.Max(maxProduct, currentProduct);\n            if (currentProduct == 0) {\n                currentProduct = 1;\n            }\n        }\n        currentProduct = 1;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n            currentProduct *= arr[i];\n            maxProduct = Math.Max(maxProduct, currentProduct);\n            if (currentProduct == 0) {\n                currentProduct = 1;\n            }\n        }\n        return maxProduct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c167489169004974ba4620319fc81094>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e193e2ceb521481189794910343e4680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxProduct = maxProduct * arr[i];\n                minProduct = Math.Min(minProduct * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.Max(minProduct * arr[i], 1);\n                minProduct = temp * arr[i];\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 0;\n        long min = 0;\n        long result = 0;\n        foreach (var item in arr) {\n            if (item > 0) {\n                max = Math.Max(max * item, item);\n                min = Math.Min(min * item, item);\n            } else if (item < 0) {\n                long temp = max;\n                max = Math.Max(min * item, item);\n                min = Math.Min(temp * item, item);\n            } else {\n                max = 0;\n                min = 0;\n            }\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxEndingHere = 1;\n        long minEndingHere = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.Min(minEndingHere * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n            } else {\n                long temp = maxEndingHere;\n                maxEndingHere = Math.Max(minEndingHere * arr[i], 1);\n                minEndingHere = temp * arr[i];\n            }\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 1;\n        long min = 1;\n        long result = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max = max * arr[i];\n                min = Math.Min(min * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.Max(min * arr[i], 1);\n                min = temp * arr[i];\n            }\n            if (result < max) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_so_far = arr[0];\n        long min_so_far = arr[0];\n        long max_ending_here = arr[0];\n        long min_ending_here = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            max_ending_here = Math.Max(Math.Max(max_ending_here * arr[i], min_ending_here * arr[i]), arr[i]);\n            min_ending_here = Math.Min(Math.Min(max_ending_here * arr[i], min_ending_here * arr[i]), arr[i]);\n            result = Math.Max(result, max_ending_here);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <57bcd3f406c74962b584279ccaf66e1e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // TODO: Implement this function\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if (arr[i] < 0)\n            {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            product *= arr[i];\n            max = Math.Max(max, product);\n            if (product == 0) {\n                product = 1;\n            }\n        }\n        product = 1;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n            product *= arr[i];\n            max = Math.Max(max, product);\n            if (product == 0) {\n                product = 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxEndingHere = 1;\n        long minEndingHere = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.Min(minEndingHere * arr[i], 1);\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n            } else {\n                long temp = maxEndingHere;\n                maxEndingHere = Math.Max(minEndingHere * arr[i], 1);\n                minEndingHere = temp * arr[i];\n            }\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n            }\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long maxSoFar = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = maxProduct;\n            maxProduct = Math.Max(Math.Max(maxProduct * arr[i], minProduct * arr[i]), arr[i]);\n            minProduct = Math.Min(Math.Min(temp * arr[i], minProduct * arr[i]), arr[i]);\n            maxSoFar = Math.Max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                max_ending_here = max_ending_here * arr[i];\n                min_ending_here = Math.Min(min_ending_here * arr[i], 1);\n            } else if (arr[i] == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.Max(min_ending_here * arr[i], 1);\n                min_ending_here = temp * arr[i];\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = long.MinValue;\n        long min = long.MaxValue;\n        long result = long.MinValue;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            long temp = max;\n            max = Math.Max(Math.Max(max * arr[i], min * arr[i]), arr[i]);\n            min = Math.Min(Math.Min(temp * arr[i], min * arr[i]), arr[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        long max = arr[0];\n        long min = arr[0];\n        long result = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.Max(arr[i], max * arr[i]);\n            min = Math.Min(arr[i], min * arr[i]);\n            result = Math.Max(result, max);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1665510248,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af86fa7b56be481d926d17e6d1e43127>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}