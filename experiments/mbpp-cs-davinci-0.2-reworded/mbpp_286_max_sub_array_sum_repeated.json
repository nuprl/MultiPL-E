{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        long sum_of_all_elements = a.Sum();\n        long sum_of_all_elements_repeated = sum_of_all_elements * k;\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_sum = Math.Max(max_sum, sum_of_all_elements_repeated);\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum > max_wrap) {\n                max_wrap = curr_sum;\n            }\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap + (k - 2) * curr_sum);\n        }\n        return max_sum;",
    "        long maxSum = 0;\n        long maxSumEndingHere = 0;\n        long maxSumSoFar = 0;\n        long maxElement = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            maxElement = Math.Max(maxElement, a[i]);\n        }\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                maxSumEndingHere = maxSumEndingHere + a[i];\n                if (maxSumEndingHere < 0) {\n                    maxSumEndingHere = 0;\n                }\n                if (maxSum < maxSumEndingHere) {\n                    maxSum = maxSumEndingHere;\n                }\n            }\n            return maxSum;\n        }\n        if (sum > 0) {\n            maxSumSoFar = MaxSubArraySumRepeated(a, n, 1);\n            maxSum = maxSumSoFar + (k - 2) * sum;\n            for (int i = 0; i < n; i++) {\n                maxSumEndingHere = maxSumEndingHere + a[i];\n                if (maxSumEndingHere < 0) {\n                    maxSumEndingHere = 0;\n                }\n                if (maxSum < maxSumEndingHere) {\n                    maxSum = maxSumEndingHere;\n                }\n            }\n            return maxSum;\n        }\n        else {\n            return maxElement;\n        }",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long min_wrap = 0;\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n            min_wrap = Math.Min(min_wrap, curr_sum);\n        }\n        long ans = Math.Max(max_sum, max_wrap + min_wrap * (k - 2));\n        return ans;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_sum += a[i];\n        }\n        max_sum *= k;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            curr_sum = Math.Max(curr_sum, 0);\n        }\n        curr_sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            curr_sum = Math.Max(curr_sum, 0);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_k_times = 0;\n        long max_k_times_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            max_k_times_ending_here = max_k_times_ending_here + a[i];\n            if (max_k_times_ending_here < 0) {\n                max_k_times_ending_here = 0;\n            }\n            if (max_k_times < max_k_times_ending_here) {\n                max_k_times = max_k_times_ending_here;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long min_so_far = 0;\n        long min_ending_here = 0;\n        long min_k_times = 0;\n        long min_k_times_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            min_ending_here = min_ending_here + a[i];\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            min_k_times_ending_here = min_k_times_ending_here + a[i];\n            if (min_k_times_ending_here > 0) {\n                min_k_times_ending_here = 0;\n            }\n            if (min_k_times > min_k_times_ending_here) {\n                min_k_times = min_k_times_ending",
    "        // Complete this function\n        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_element < a[i]) {\n                max_element = a[i];\n            }\n        }\n        if (max_so_far == 0) {\n            return max_element;\n        }\n        max_sum = max_so_far;\n        for (int i = 0; i < n; i++) {\n            max_sum = max_sum + a[i];\n        }\n        max_sum = max_sum * (k - 2);\n        max_sum = max_sum + max_so_far;\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = sum * k - max_sum;\n        return Math.Max(max_sum, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        if (sum > 0) {\n            return Math.Max(max_sum, curr_sum + sum * (k - 2));\n        }\n        return Math.Max(max_sum, curr_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum = Math.Min(min_sum, min_ending_here);\n            total += a[i];\n        }\n        if (k == 1)\n            return max_sum;\n        long max_wrap = total - min_sum;\n        if (max_wrap > 0)\n            return Math.Max(max_wrap, max_sum + (k - 2) * total);\n        else\n            return Math.Max(max_wrap, max_sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_element;\n        long max_sum = max_so_far;\n        long curr_val = 0;\n        for (long i = 0; i < n; i++) {\n            curr_val += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long min_sum_ending_here = 0;\n        long min_sum_so_far = long.MaxValue;\n        for (long i = 0; i < n; i++) {\n            min_sum_ending_here += a[(int)i];\n            if (min_sum_so_far > min_sum_ending_here)\n                min_sum_so_far = min_sum_ending_here;\n            if (min_sum_ending_here > 0)\n                min_sum_ending_here = 0;\n        }\n        max_sum = max_sum + ((k - 2) * curr_val);\n        max_sum = max_sum + min_sum_so_far;\n        return max_sum;",
    "        // Write your code here\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n        }\n        if (max_element <= 0) {\n            return max_element * k;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_wrap) {\n                max_wrap = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        return Math.Max(max_so_far, max_wrap + (k - 2) * sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_so_far;\n        long max_wrap = sum * k - (sum - max_so_far);\n        return Math.Max(max_wrap, max_so_far);",
    "        long maxSum = 0;\n        long currentSum = 0;\n        long maxElement = 0;\n        long sumOfAllElements = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += a[i];\n            maxSum = Math.Max(currentSum, maxSum);\n            currentSum = Math.Max(currentSum, 0);\n            maxElement = Math.Max(maxElement, a[i]);\n            sumOfAllElements += a[i];\n        }\n        if (maxSum < 0) {\n            return maxElement;\n        }\n        long maxPrefixSum = 0;\n        long maxSuffixSum = 0;\n        long currentPrefixSum = 0;\n        long currentSuffixSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentPrefixSum += a[i];\n            maxPrefixSum = Math.Max(maxPrefixSum, currentPrefixSum);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            currentSuffixSum += a[i];\n            maxSuffixSum = Math.Max(maxSuffixSum, currentSuffixSum);\n        }\n        long ans = Math.Max(maxSum, maxPrefixSum + maxSuffixSum + (k - 2) * sumOfAllElements);\n        return ans;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        long max_sum = 0;\n        long min_sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_element = Math.Max(max_element, a[(int)i]);\n        }\n        if (k == 1) {\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n            }\n            return max_so_far;\n        }\n        if (k == 2) {\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n            }\n            max_ending_here = 0;\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_ending_here > 0) {\n                    max_ending_here = 0;\n                }\n            }\n            return Math.Max(max_so_far, sum + max_ending_here);\n        }\n        if (sum > 0) {\n            return sum * k;\n        }\n        if (sum == 0) {\n            return max_element;\n        }\n        max_sum = MaxSubArraySumRepeated(a, n, 1);\n        min_sum = MinSubArraySumRepeated",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long mod = 1000000007;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum = (sum + a[i]) % mod;\n        }\n        max_so_far = sum;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = (max_ending_here + a[i]) % mod;\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        max_sum = max_so_far;\n        for (int i = 2; i <= k; i++) {\n            max_so_far = (max_so_far + sum) % mod;\n            if (max_sum < max_so_far) {\n                max_sum = max_so_far;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n        }\n        if (max_so_far > 0) {\n            max_sum = max_so_far * k;\n            max_sum = Math.Max(max_sum, max_sum + (k - 2) * sum);\n        } else {\n            max_sum = max_element;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a[0];\n        long i;\n        for (i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_so_far == 0)\n            return max_element;\n        long sum = 0;\n        for (i = 0; i < n; i++)\n            sum += a[i];\n        long max_sum = max_so_far;\n        long min_sum = 0;\n        for (i = 0; i < n; i++) {\n            max_ending_here += sum;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            max_ending_here -= min_sum;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum += a[i];\n        }\n        return Math.Max(max_sum, max_so_far + (k - 2) * sum);"
  ]
}