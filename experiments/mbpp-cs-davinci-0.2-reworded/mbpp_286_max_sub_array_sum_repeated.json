{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        long sum_of_all_elements = a.Sum();\n        long sum_of_all_elements_repeated = sum_of_all_elements * k;\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_sum = Math.Max(max_sum, sum_of_all_elements_repeated);\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum > max_wrap) {\n                max_wrap = curr_sum;\n            }\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap + (k - 2) * curr_sum);\n        }\n        return max_sum;",
    "        long maxSum = 0;\n        long maxSumEndingHere = 0;\n        long maxSumSoFar = 0;\n        long maxElement = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            maxElement = Math.Max(maxElement, a[i]);\n        }\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                maxSumEndingHere = maxSumEndingHere + a[i];\n                if (maxSumEndingHere < 0) {\n                    maxSumEndingHere = 0;\n                }\n                if (maxSum < maxSumEndingHere) {\n                    maxSum = maxSumEndingHere;\n                }\n            }\n            return maxSum;\n        }\n        if (sum > 0) {\n            maxSumSoFar = MaxSubArraySumRepeated(a, n, 1);\n            maxSum = maxSumSoFar + (k - 2) * sum;\n            for (int i = 0; i < n; i++) {\n                maxSumEndingHere = maxSumEndingHere + a[i];\n                if (maxSumEndingHere < 0) {\n                    maxSumEndingHere = 0;\n                }\n                if (maxSum < maxSumEndingHere) {\n                    maxSum = maxSumEndingHere;\n                }\n            }\n            return maxSum;\n        }\n        else {\n            return maxElement;\n        }",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long min_wrap = 0;\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n            min_wrap = Math.Min(min_wrap, curr_sum);\n        }\n        long ans = Math.Max(max_sum, max_wrap + min_wrap * (k - 2));\n        return ans;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_sum += a[i];\n        }\n        max_sum *= k;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            curr_sum = Math.Max(curr_sum, 0);\n        }\n        curr_sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            curr_sum = Math.Max(curr_sum, 0);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_k_times = 0;\n        long max_k_times_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            max_k_times_ending_here = max_k_times_ending_here + a[i];\n            if (max_k_times_ending_here < 0) {\n                max_k_times_ending_here = 0;\n            }\n            if (max_k_times < max_k_times_ending_here) {\n                max_k_times = max_k_times_ending_here;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long min_so_far = 0;\n        long min_ending_here = 0;\n        long min_k_times = 0;\n        long min_k_times_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            min_ending_here = min_ending_here + a[i];\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            min_k_times_ending_here = min_k_times_ending_here + a[i];\n            if (min_k_times_ending_here > 0) {\n                min_k_times_ending_here = 0;\n            }\n            if (min_k_times > min_k_times_ending_here) {\n                min_k_times = min_k_times_ending",
    "        // Complete this function\n        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_element < a[i]) {\n                max_element = a[i];\n            }\n        }\n        if (max_so_far == 0) {\n            return max_element;\n        }\n        max_sum = max_so_far;\n        for (int i = 0; i < n; i++) {\n            max_sum = max_sum + a[i];\n        }\n        max_sum = max_sum * (k - 2);\n        max_sum = max_sum + max_so_far;\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = sum * k - max_sum;\n        return Math.Max(max_sum, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        if (sum > 0) {\n            return Math.Max(max_sum, curr_sum + sum * (k - 2));\n        }\n        return Math.Max(max_sum, curr_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum = Math.Min(min_sum, min_ending_here);\n            total += a[i];\n        }\n        if (k == 1)\n            return max_sum;\n        long max_wrap = total - min_sum;\n        if (max_wrap > 0)\n            return Math.Max(max_wrap, max_sum + (k - 2) * total);\n        else\n            return Math.Max(max_wrap, max_sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_element;\n        long max_sum = max_so_far;\n        long curr_val = 0;\n        for (long i = 0; i < n; i++) {\n            curr_val += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long min_sum_ending_here = 0;\n        long min_sum_so_far = long.MaxValue;\n        for (long i = 0; i < n; i++) {\n            min_sum_ending_here += a[(int)i];\n            if (min_sum_so_far > min_sum_ending_here)\n                min_sum_so_far = min_sum_ending_here;\n            if (min_sum_ending_here > 0)\n                min_sum_ending_here = 0;\n        }\n        max_sum = max_sum + ((k - 2) * curr_val);\n        max_sum = max_sum + min_sum_so_far;\n        return max_sum;",
    "        // Write your code here\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n        }\n        if (max_element <= 0) {\n            return max_element * k;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_wrap) {\n                max_wrap = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        return Math.Max(max_so_far, max_wrap + (k - 2) * sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_so_far;\n        long max_wrap = sum * k - (sum - max_so_far);\n        return Math.Max(max_wrap, max_so_far);",
    "        long maxSum = 0;\n        long currentSum = 0;\n        long maxElement = 0;\n        long sumOfAllElements = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += a[i];\n            maxSum = Math.Max(currentSum, maxSum);\n            currentSum = Math.Max(currentSum, 0);\n            maxElement = Math.Max(maxElement, a[i]);\n            sumOfAllElements += a[i];\n        }\n        if (maxSum < 0) {\n            return maxElement;\n        }\n        long maxPrefixSum = 0;\n        long maxSuffixSum = 0;\n        long currentPrefixSum = 0;\n        long currentSuffixSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentPrefixSum += a[i];\n            maxPrefixSum = Math.Max(maxPrefixSum, currentPrefixSum);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            currentSuffixSum += a[i];\n            maxSuffixSum = Math.Max(maxSuffixSum, currentSuffixSum);\n        }\n        long ans = Math.Max(maxSum, maxPrefixSum + maxSuffixSum + (k - 2) * sumOfAllElements);\n        return ans;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        long max_sum = 0;\n        long min_sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_element = Math.Max(max_element, a[(int)i]);\n        }\n        if (k == 1) {\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n            }\n            return max_so_far;\n        }\n        if (k == 2) {\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n            }\n            max_ending_here = 0;\n            for (long i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_ending_here > 0) {\n                    max_ending_here = 0;\n                }\n            }\n            return Math.Max(max_so_far, sum + max_ending_here);\n        }\n        if (sum > 0) {\n            return sum * k;\n        }\n        if (sum == 0) {\n            return max_element;\n        }\n        max_sum = MaxSubArraySumRepeated(a, n, 1);\n        min_sum = MinSubArraySumRepeated",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long mod = 1000000007;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum = (sum + a[i]) % mod;\n        }\n        max_so_far = sum;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = (max_ending_here + a[i]) % mod;\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        max_sum = max_so_far;\n        for (int i = 2; i <= k; i++) {\n            max_so_far = (max_so_far + sum) % mod;\n            if (max_sum < max_so_far) {\n                max_sum = max_so_far;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n        }\n        if (max_so_far > 0) {\n            max_sum = max_so_far * k;\n            max_sum = Math.Max(max_sum, max_sum + (k - 2) * sum);\n        } else {\n            max_sum = max_element;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a[0];\n        long i;\n        for (i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_so_far == 0)\n            return max_element;\n        long sum = 0;\n        for (i = 0; i < n; i++)\n            sum += a[i];\n        long max_sum = max_so_far;\n        long min_sum = 0;\n        for (i = 0; i < n; i++) {\n            max_ending_here += sum;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            max_ending_here -= min_sum;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum += a[i];\n        }\n        return Math.Max(max_sum, max_so_far + (k - 2) * sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here += a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum = Math.Min(min_sum, min_ending_here);\n            total += a[i];\n        }\n        if (k == 1)\n            return max_sum;\n        else if (total > 0)\n            return Math.Max(max_sum, total * (k - 2) + max_sum);\n        else if (total == 0)\n            return max_sum;\n        else\n            return Math.Max(max_sum, total * (k - 2) + max_sum - min_sum);",
    "        // Complete this function\n        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_sum);\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_wrap, max_sum + (k - 2) * sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_wrap) {\n                max_wrap = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap + (k - 2) * max_wrap);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        if (max_so_far > 0) {\n            max_sum = max_sum + (k - 2) * max_so_far;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_sum < max_ending_here) {\n                max_sum = max_ending_here;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[i];\n                if (max_ending_here < 0)\n                    max_ending_here = 0;\n                if (max_so_far < max_ending_here)\n                    max_so_far = max_ending_here;\n            }\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = sum * k;\n        }\n        else if (sum == 0) {\n            max_sum = max_element;\n        }\n        else {\n            max_sum = sum;\n            for (int i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[i];\n                if (max_ending_here < 0)\n                    max_ending_here = 0;\n                if (max_so_far < max_ending_here)\n                    max_so_far = max_ending_here;\n            }\n            max_sum = max_so_far;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);\n        }\n        return Math.Max(max_sum, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            curr_sum = (curr_sum + a[i % n]) % n;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        // kadane's algorithm\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            min_ending_here = min_ending_here + a[(int)i];\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            if (min_sum > min_ending_here)\n                min_sum = min_ending_here;\n        }\n        if (k == 1)\n            return max_sum;\n        long max_wrap = sum - min_sum;\n        if (k == 2)\n            return Math.Max(max_wrap, max_sum);\n        return Math.Max(max_wrap, max_sum + (k - 2) * sum);",
    "        long max_so_far = 0;\n        long max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long i = 0;\n        for (i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        for (i = start; i <= end; i++) {\n            max_sum = max_sum + a[i % n];\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = Math.Max(a[(int)(i % n)], curr_sum + a[(int)(i % n)]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (k == 1) {\n            max_so_far = sum;\n        }\n        else {\n            max_so_far = sum * k;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum = (curr_sum + a[(int)i]) % k;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap = max_wrap + a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap = curr_wrap + a[i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n        }\n        max_wrap = max_wrap + max_wrap;\n        if (max_wrap > max_sum) {\n            return max_wrap;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_sum_ending_here = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element * k;\n        }\n        for (long i = 0; i < n * k; i++) {\n            max_sum_ending_here += a[i % n];\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            if (max_sum_so_far < max_sum_ending_here) {\n                max_sum_so_far = max_sum_ending_here;\n            }\n        }\n        return max_sum_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far * k;\n        long curr_prefix_sum = 0;\n        long curr_suffix_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_prefix_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_prefix_sum);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            curr_suffix_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_suffix_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (k == 1) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        if (max_so_far == 0) {\n            return max_element;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long min_sum = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        for (long i = 0; i < n; i++) {\n            min_ending_here = min_ending_here + a[(int)i];\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        max_sum = max_so_far;\n        if (k == 2) {\n            return max_sum + sum + min_so_far;\n        }\n        max_sum = max_sum + sum;\n        max_sum = max_sum + (k - 2) * sum;\n        max_sum = max_sum + min_so_far;\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here += a[i];\n            min_ending_here += a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            max_sum = Math.Max(max_sum, max_ending_here);\n        }\n        if (max_sum > 0)\n            return max_sum * k;\n        min_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            min_ending_here += a[i];\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, min_ending_here);\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n        }\n        long ans = curr_sum * (k - 2);\n        return ans + max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_wrap = Math.Max(max_wrap, curr_sum);\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_element = Math.Max(max_element, a[i]);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            max_ending_here += a[i];\n            if (max_ending_here > max_so_far) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (max_wrap > 0) {\n            max_so_far = Math.Max(max_so_far, max_wrap * (k - 2) + max_ending_here);\n        }\n        return max_so_far;",
    "        long max_sum = 0, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long max_wrap_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap_ending_here = max_wrap_ending_here + a[i];\n            if (max_wrap < max_wrap_ending_here)\n                max_wrap = max_wrap_ending_here;\n            if (max_wrap_ending_here < 0)\n                max_wrap_ending_here = 0;\n        }\n        max_wrap = max_wrap + max_wrap;\n        if (k == 1)\n            return max_sum;\n        if (max_wrap > max_sum)\n            return max_wrap;\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here = min_ending_here + a[i];\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = max_so_far + (k - 2) * sum;\n        } else {\n            max_sum = max_so_far;\n        }\n        long min_sum = min_so_far + (k - 2) * sum;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here = min_ending_here + a[i];\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        max",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        // Write your code here\n        long max_so_far = a[0];\n        long curr_max = a[0];\n\n        for (int i = 1; i < n; i++) {\n            curr_max = Math.Max(a[i], curr_max + a[i]);\n            max_so_far = Math.Max(max_so_far, curr_max);\n        }\n\n        long max_wrap = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_wrap = Math.Max(max_wrap, sum);\n        }\n\n        if (k == 1)\n            return max_so_far;\n\n        long max_non_wrap = max_so_far;\n        long max_wrap_sum = sum * k;\n        long ans = Math.Max(max_wrap_sum, max_wrap + max_non_wrap);\n        return ans;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long i = 0;\n        long j = 0;\n        long sum = 0;\n        for (i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_element < a[(int)i])\n                max_element = a[(int)i];\n            if (min_element > a[(int)i])\n                min_element = a[(int)i];\n            sum += a[(int)i];\n        }\n        if (k == 1)\n            return max_so_far;\n        if (max_so_far < 0)\n            return max_so_far;\n        max_sum = max_so_far;\n        max_sum = max_sum + (k - 2) * sum;\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        for (i = 0; i < n; i++) {\n            max_prefix_sum += a[(int)i];\n            if (max_prefix_sum > max_sum)\n                max_sum = max_prefix_sum;\n        }\n        for (i = 0; i < n; i++) {\n            max_suffix_sum += a[(int)i];\n            if (max_suffix_sum > max_sum)\n                max_sum = max_suffix_sum;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n        }\n        max_sum = curr_sum;\n        for (int i = 0; i < n; i++) {\n            curr_sum = curr_sum - a[i] + a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_sum_all = max_sum;\n        long curr_sum_all = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum_all += a[i];\n            curr_sum = curr_sum - a[i] + a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_sum_all = Math.Max(max_sum_all, curr_sum_all * k);\n        return max_sum_all;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        long max_sum = 0;\n        long min_sum = 0;\n        long min_element = long.MaxValue;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_element = Math.Max(max_element, a[i]);\n            min_element = Math.Min(min_element, a[i]);\n        }\n        max_sum = sum;\n        min_sum = sum;\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                max_ending_here += a[i];\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n            }\n            return max_so_far;\n        }\n        else {\n            if (max_element <= 0) {\n                return max_element;\n            }\n            else if (min_element >= 0) {\n                return sum * k;\n            }\n            else {\n                for (int i = 0; i < n; i++) {\n                    max_ending_here += a[i];\n                    if (max_so_far < max_ending_here) {\n                        max_so_far = max_ending_here;\n                    }\n                    if (max_ending_here < 0) {\n                        max_ending_here = 0;\n                    }\n                }\n                long min_so_far = long.MaxValue;\n                long min_ending_here = 0;\n                for (int i = 0; i < n; i++) {\n                    min_ending_here += a[i];\n                    if (min_so_far > min_ending_here) {\n                        min_so_far = min_ending_here;\n                    }\n                    if (min_ending_here > 0) {\n                        min_ending",
    "        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far * k;\n        long curr_prefix_sum = 0;\n        long curr_suffix_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_prefix_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_prefix_sum);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            curr_suffix_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_suffix_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long min_wrap = 0;\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n            min_wrap = Math.Min(min_wrap, curr_sum);\n        }\n        long ans1 = max_wrap + min_wrap * (k - 2);\n        long ans2 = max_sum;\n        return Math.Max(ans1, ans2);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum = (curr_sum + a[(int)i]) % k;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap = max_wrap + a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        max_wrap = max_wrap + MaxSubArraySum(a, n);\n        if (max_wrap > max_so_far) {\n            max_so_far = max_wrap;\n        }\n        return Math.Max(max_so_far, sum * (k - 2) + max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here += a[i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here += a[i];\n            if (min_ending_here < min_sum) {\n                min_sum = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = sum - min_sum;\n        if (max_wrap > 0) {\n            curr_sum = max_wrap;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (max_so_far < 0) {\n            return max_so_far;\n        }\n        long max_sum = max_so_far;\n        long min_sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_sum += a[i];\n            min_sum += a[i];\n            max_so_far = Math.Max(max_so_far, max_sum);\n            max_so_far = Math.Max(max_so_far, min_sum);\n            max_sum = Math.Max(max_sum, 0);\n            min_sum = Math.Min(min_sum, 0);\n        }\n        return Math.Max(max_so_far, (sum * (k - 2)) + max_so_far);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (sum > 0) {\n            max_sum = sum * k;\n        }\n        else {\n            max_sum = max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        if (max_so_far > 0) {\n            max_sum = Math.Max(max_sum, max_so_far * (k - 2) + sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long i = 0;\n        long j = 0;\n        long max_sum_k = 0;\n        long max_sum_k_index = 0;\n        long max_sum_k_start = 0;\n        long max_sum_k_end = 0;\n        long max_sum_k_s = 0;\n        long max_sum_k_i = 0;\n        long max_sum_k_j = 0;\n        long max_sum_k_curr_sum = 0;\n        long max_sum_k_max_ending_here = 0;\n        long max_sum_k_max_so_far = 0;\n        long max_sum_k_start_index = 0;\n        long max_sum_k_end_index = 0;\n        long max_sum_k_start_index_temp = 0;\n        long max_sum_k_end_index_temp = 0;\n        long max_sum_k_start_index_temp_2 = 0;\n        long max_sum_k_end_index_temp_2 = 0;\n        long max_sum_k_start_index_temp_3 = 0;\n        long max_sum_k_end_index_temp_3 = 0;\n        long max_sum_k_start_index_temp_4 = 0;\n        long max_sum_k_end_index_temp_4 = 0;\n        long max_sum_k_start_index_temp_5 = 0;\n        long max_sum_k_end_index_temp_5 = 0;\n        long max_sum_k_start_index_temp_6 = 0;\n        long max_sum_k_end_index_temp_6 = 0;\n        long max_sum_k_start_index_temp_7 = 0;\n        long max_sum_k_end_index_temp_7 = 0;\n        long max_",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            current_sum = current_sum + a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            min_element = Math.Min(min_element, a[(int)i]);\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            min_ending_here = min_ending_here + a[(int)i];\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long min_sum = min_so_far * k;\n        long max_sum_1 = max_so_far;\n        long max_sum_2 = max_element * k;\n        long max_sum_3 = max_sum_1 + min_sum;\n        return Math.Max(max_sum_1, Math.Max(max_sum_2, max_sum_3));",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_element < 0)\n            return max_element;\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = sum * (k - 2) + max_so_far;\n        return Math.Max(max_wrap, max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_suffix_sum = 0;\n        long max_prefix_sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_suffix_sum += a[i];\n            max_prefix_sum += a[n - i - 1];\n        }\n        long total_sum = max_suffix_sum + max_prefix_sum;\n        if (total_sum > 0) {\n            max_sum = Math.Max(max_sum, total_sum * (k - 2) + max_suffix_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            max_ending_here += a[i];\n            if (max_ending_here > max_so_far)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_wrap > 0)\n            return Math.Max(max_so_far, max_wrap * (k - 2));\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n            min_ending_here = Math.Min(a[i], min_ending_here + a[i]);\n            min_so_far = Math.Min(min_so_far, min_ending_here);\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_prefix_sum = Math.Max(max_prefix_sum, sum - min_so_far);\n            max_suffix_sum = Math.Max(max_suffix_sum, sum - min_so_far);\n        }\n        max_sum = Math.Max(max_prefix_sum + (k - 2) * sum + max_suffix_sum, max_so_far);\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (sum > 0) {\n            max_sum = sum * k;\n        } else {\n            max_sum = max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        if ((max_so_far + (sum * (k - 2))) > max_sum) {\n            max_sum = max_so_far + (sum * (k - 2));\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap += a[i];\n            if (curr_wrap > max_wrap) {\n                max_wrap = curr_wrap;\n            }\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n        }\n        if (max_wrap + max_sum > max_sum) {\n            max_sum = max_wrap + max_sum;\n        }\n        return max_sum * k;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long curr_max = 0;\n        long prev_max = 0;\n        long total_sum = 0;\n        long max_val = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            curr_max = Math.Max(curr_max, curr_sum);\n            max_val = Math.Max(max_val, a[i]);\n            total_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        if (k == 1) {\n            return curr_max;\n        }\n        if (total_sum > 0) {\n            max_sum = curr_max + (k - 2) * total_sum;\n        } else {\n            max_sum = curr_max;\n        }\n        max_sum = Math.Max(max_sum, prev_max + curr_max);\n        return max_sum;",
    "        long max_sum = 0;\n        long max_prefix = 0;\n        long max_suffix = 0;\n        long sum = 0;\n        long total_sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            total_sum += a[(int)i];\n            max_sum = Math.Max(max_sum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            max_prefix += a[(int)i];\n            if (max_prefix < 0) {\n                max_prefix = 0;\n            }\n        }\n        for (long i = n - 1; i >= 0; i--) {\n            max_suffix += a[(int)i];\n            if (max_suffix < 0) {\n                max_suffix = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        if (total_sum > 0) {\n            return Math.Max(max_sum, max_prefix + max_suffix + (k - 2) * total_sum);\n        }\n        return Math.Max(max_sum, max_prefix + max_suffix);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_element < 0)\n            return max_element;\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = sum * (k - 2) + max_so_far;\n        return Math.Max(max_wrap, max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_sum < curr_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n        }\n        if (sum > 0) {\n            max_sum = Math.Max(max_sum, sum * k);\n        }\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            sum -= a[(int)(n - i - 1)];\n            max_sum = Math.Max(max_sum, sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum_of_subarray = long.MinValue;\n        long max_sum_of_subarray_ending_at_i = 0;\n        long sum_of_array = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            max_sum_of_subarray_ending_at_i = max_sum_of_subarray_ending_at_i + a[(int)i];\n            if (max_sum_of_subarray < max_sum_of_subarray_ending_at_i) {\n                max_sum_of_subarray = max_sum_of_subarray_ending_at_i;\n            }\n            if (max_sum_of_subarray_ending_at_i < 0) {\n                max_sum_of_subarray_ending_at_i = 0;\n            }\n            sum_of_array = sum_of_array + a[(int)i];\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum_of_array > 0) {\n            return Math.Max(max_so_far, max_sum_of_subarray + (k - 2) * sum_of_array);\n        }\n        else {\n            return Math.Max(max_so_far, max_sum_of_subarray);\n        }",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = 0;\n        long sum_of_all_elements = 0;\n        for (int i = 0; i < n; i++) {\n            if (a[i] > max_element) {\n                max_element = a[i];\n            }\n            sum_of_all_elements += a[i];\n        }\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySum(a, n);\n        if (max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n        long max_sum_of_all_elements = max_element * k;\n        if (max_sum_of_all_elements > max_sum) {\n            max_sum = max_sum_of_all_elements;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_sum = Math.Max(max_sum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_prefix = 0;\n        long max_suffix = 0;\n        long total_sum = 0;\n        for (int i = 0; i < n; i++) {\n            total_sum += a[i];\n            max_prefix = Math.Max(max_prefix, total_sum);\n        }\n        total_sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            total_sum += a[i];\n            max_suffix = Math.Max(max_suffix, total_sum);\n        }\n        long ans1 = max_prefix + max_suffix;\n        long ans2 = total_sum * (k - 2);\n        long ans3 = max_sum;\n        return Math.Max(ans1, Math.Max(ans2, ans3));",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n        }\n        if (max_so_far < 0)\n            return max_element;\n        long max_sum_in_last_part = max_so_far;\n        long min_sum_in_last_part = 0;\n        long min_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            min_ending_here = Math.Min(a[i], min_ending_here + a[i]);\n            min_sum_in_last_part = Math.Min(min_sum_in_last_part, min_ending_here);\n        }\n        long max_sum_in_middle_part = (k - 2) * sum;\n        long max_sum = Math.Max(max_sum_in_last_part, max_sum_in_middle_part);\n        max_sum = Math.Max(max_sum, max_sum_in_middle_part + max_sum_in_last_part);\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        long i;\n        for (i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_sum)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            min_ending_here += a[(int)i];\n            if (min_ending_here < min_sum)\n                min_sum = min_ending_here;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n        }\n        max_sum = Math.Max(max_sum, sum * k);\n        min_sum = Math.Min(min_sum, 0);\n        curr_sum = 0;\n        for (i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            curr_sum = Math.Max(curr_sum, curr_sum * k + min_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum_so_far = long.MinValue;\n        long max_sum_ending_here = 0;\n        long max_sum_subarray = long.MinValue;\n        long max_sum_subarray_ending_here = 0;\n        long max_sum_subarray_so_far = long.MinValue;\n        long max_sum_subarray_repeated = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            max_sum_ending_here = max_sum_ending_here + a[(int)i];\n            if (max_sum_so_far < max_sum_ending_here) {\n                max_sum_so_far = max_sum_ending_here;\n            }\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            max_sum_subarray_ending_here = max_sum_subarray_ending_here + a[(int)i];\n            if (max_sum_subarray < max_sum_subarray_ending_here) {\n                max_sum_subarray = max_sum_subarray_ending_here;\n            }\n            if (max_sum_subarray_ending_here < 0) {\n                max_sum_subarray_ending_here = 0;\n            }\n        }\n        max_sum_subarray_so_far = max_sum_subarray * k;\n        if (max_sum_subarray_so_far < max_sum_so_far) {\n            max_sum_subarray_so_far = max_sum_so_far;\n        }\n        if (max_sum_subarray",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here += a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        long min_sum = 0;\n        long curr_sum1 = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long start1 = 0;\n        long end1 = 0;\n        long s1 = 0;\n        for (long i = 0; i < n * k; i++) {\n            min_ending_here += a[i % n];\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n                start1 = s1;\n                end1 = i;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n                s1 = i + 1;\n            }\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (sum > 0) {\n            return Math.Max(max_so_far, sum * (k - 2) + max_so_far);\n        } else {\n            return max_so_far;\n        }",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_element < 0)\n            return max_element;\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = sum * (k - 2);\n        max_wrap = max_wrap + max_so_far;\n        return Math.Max(max_wrap, max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);\n        }\n        return Math.Max(max_sum, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long i = 0;\n        for (i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        long max_wrap = 0;\n        long wrap_sum = 0;\n        for (i = 0; i < n; i++) {\n            wrap_sum += a[i];\n            max_wrap = Math.Max(max_wrap, wrap_sum);\n            if (wrap_sum < 0) {\n                wrap_sum = 0;\n            }\n        }\n        max_sum = Math.Max(max_so_far, max_wrap * k);\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n        }\n        if (max_element < 0) {\n            return max_element;\n        }\n        long max_sum_without_wrap = max_so_far;\n        long max_sum_with_wrap = max_so_far + sum * (k - 2);\n        return Math.Max(max_sum_without_wrap, max_sum_with_wrap);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long sum = 0;\n        long i = 0;\n        long j = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long e = 0;\n        long max_element_index = 0;\n        long min_element = 0;\n        long min_element_index = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long max_sum_wrap = 0;\n        long max_ending_here_wrap = 0;\n        long max_so_far_wrap = 0;\n        long min_ending_here_wrap = 0;\n        long min_so_far_wrap = 0;\n        long min_sum_wrap = 0;\n        long max_sum_wrap_final = 0;\n        long min_sum_wrap_final = 0;\n        long max_sum_wrap_final_final = 0;\n        long min_sum_wrap_final_final = 0;\n        long max_sum_wrap_final_final_final = 0;\n        long min_sum_wrap_final_final_final = 0;\n        long max_sum_wrap_final_final_final_final = 0;\n        long min_sum_wrap_final_final_final_final = 0;\n        long max_sum_wrap_final_final_final_final_final = 0;\n        long min_sum_wrap_final_final_final_final_final = 0;\n        long max_sum_wrap_final_final_final_final_final_final = 0;\n        long min_sum_wrap_final_final_final_final_final_final = 0;\n        long max_sum_wrap_final_final_final_final_final_final_final = 0;\n        long min_sum_wrap_final_final_final_final_final_final_final = 0;\n        long max_sum_wrap_final_final_final_final_final_final_final_final = 0;\n        long",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here += a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_single = long.MinValue;\n        long min_single = long.MaxValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_single < a[i]) {\n                max_single = a[i];\n            }\n            if (min_single > a[i]) {\n                min_single = a[i];\n            }\n            sum += a[i];\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long max_copy_sum = max_so_far;\n        long min_copy_sum = sum - min_single;\n        long max_copy_sum_all = max_copy_sum + (k - 2) * sum;\n        long min_copy_sum_all = min_copy_sum + (k - 2) * sum;\n        return Math.Max(max_copy_sum_all, min_copy_sum_all);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n        }\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_sum = max_so_far;\n        long min_sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < min_sum) {\n                min_sum = max_ending_here;\n            }\n        }\n        max_sum = Math.Max(max_sum, sum * k);\n        max_sum = Math.Max(max_sum, (sum * (k - 2)) + max_so_far);\n        return max_sum;",
    "        // Complete this function\n        long max_sum = 0;\n        long sum = 0;\n        long max_sum_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        if (max_element < 0)\n            return max_element * k;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_sum_so_far < max_ending_here)\n                max_sum_so_far = max_ending_here;\n        }\n        max_sum = max_sum_so_far;\n        for (int i = 0; i < n; i++) {\n            sum = sum + a[i];\n        }\n        max_sum = max_sum + (k - 2) * sum;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n        }\n        if (sum <= 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far * k;\n        long curr_val = 0;\n        for (long i = 0; i < n; i++) {\n            curr_val += a[(int)i];\n            max_sum = Math.Max(max_sum, curr_val);\n            curr_val = Math.Max(curr_val, 0);\n        }\n        curr_val = 0;\n        for (long i = n - 1; i >= 0; i--) {\n            curr_val += a[(int)i];\n            max_sum = Math.Max(max_sum, curr_val);\n            curr_val = Math.Max(curr_val, 0);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_subarray_sum = 0;\n        long max_subarray_sum_repeated = 0;\n        long max_subarray_sum_repeated_temp = 0;\n        long max_subarray_sum_temp = 0;\n        long max_subarray_sum_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long max_subarray_sum_temp_temp_temp_temp_temp_",
    "        // Complete this function\n        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_sum_ending_here = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long max_element_so_far = 0;\n        long min_element_so_far = 0;\n        long total_sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_sum_ending_here += a[i];\n            max_element_so_far = Math.Max(max_element_so_far, a[i]);\n            min_element_so_far = Math.Min(min_element_so_far, a[i]);\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            if (max_sum_so_far < max_sum_ending_here) {\n                max_sum_so_far = max_sum_ending_here;\n            }\n            total_sum += a[i];\n        }\n        if (k == 1) {\n            return max_sum_so_far;\n        }\n        max_element = max_element_so_far;\n        min_element = min_element_so_far;\n        curr_sum = total_sum;\n        for (int i = 2; i <= k; i++) {\n            if (curr_sum > 0) {\n                curr_sum = curr_sum * 2;\n                max_sum = Math.Max(max_sum, curr_sum);\n            } else {\n                curr_sum = total_sum * 2;\n                max_sum = Math.Max(max_sum, curr_sum);\n            }\n            if (max_element < 0) {\n                max_sum = Math.Max(max_sum, max_element * i);\n            }\n            if (min_element > 0) {\n                max_sum = Math.Max(max_sum, min_element * i);\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long sum_of_all_elements = 0;\n        for (long i = 0; i < n; i++) {\n            max_sum_so_far += a[(int)i];\n            sum_of_all_elements += a[(int)i];\n            if (max_sum_so_far < 0) {\n                max_sum_so_far = 0;\n            }\n            if (max_sum < max_sum_so_far) {\n                max_sum = max_sum_so_far;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = sum_of_all_elements * (k - 2);\n        max_wrap += max_sum;\n        return Math.Max(max_wrap, max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = (curr_sum + a[i % n]) % 1000000007;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_element;\n        long max_wrap = sum * k - max_so_far;\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long sum = 0;\n        long max_sum_so_far = 0;\n        long sum_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (max_sum < sum) {\n                max_sum = sum;\n            }\n        }\n        for (long i = 0; i < n; i++) {\n            sum_so_far += a[(int)i];\n            if (sum_so_far < 0) {\n                sum_so_far = 0;\n            }\n            if (max_sum_so_far < sum_so_far) {\n                max_sum_so_far = sum_so_far;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        if (max_sum_so_far == 0) {\n            return max_sum_so_far;\n        }\n        long sum_of_all_elements = 0;\n        for (long i = 0; i < n; i++) {\n            sum_of_all_elements += a[(int)i];\n        }\n        long max_sum_of_middle_part = sum_of_all_elements * (k - 2);\n        max_sum_of_middle_part += max_sum_so_far;\n        return Math.Max(max_sum, max_sum_of_middle_part);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far * k;\n        long curr_prefix_sum = 0;\n        long curr_suffix_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_prefix_sum = curr_prefix_sum + a[(int)i];\n            max_sum = Math.Max(max_sum, curr_prefix_sum);\n        }\n        for (long i = n - 1; i >= 0; i--) {\n            curr_suffix_sum = curr_suffix_sum + a[(int)i];\n            max_sum = Math.Max(max_sum, curr_suffix_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        max_sum = max_so_far * k;\n        long curr_val = 0;\n        for (long i = 0; i < n; i++) {\n            curr_val += a[(int)i];\n        }\n        long min_val = curr_val;\n        for (long i = 0; i < n; i++) {\n            curr_val = curr_val - a[(int)i] + a[(int)((i + 1) % n)];\n            min_val = Math.Min(min_val, curr_val);\n        }\n        max_sum = Math.Max(max_sum, (curr_val * (k - 1)) + max_so_far);\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_elem = a.Max();\n        if (max_elem < 0)\n            return max_elem;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum += a[i % n];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_sum += a[(int)i];\n        }\n        max_sum *= k;\n        for (long i = 0; i < n * 2; i++) {\n            max_ending_here = max_ending_here + a[(int)i % (int)n];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return Math.Max(max_so_far, max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_element < 0)\n            return max_element;\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = sum * (k - 2);\n        max_wrap = max_wrap + max_so_far;\n        return Math.Max(max_wrap, max_so_far);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (a[(int)i] > max_element) {\n                max_element = a[(int)i];\n            }\n            if (a[(int)i] < min_element) {\n                min_element = a[(int)i];\n            }\n            sum += a[(int)i];\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = max_so_far + sum * (k - 2);\n        }\n        else {\n            max_sum = max_so_far;\n        }\n        if (max_element < 0) {\n            max_sum = max_element;\n        }\n        if (min_element > 0) {\n            max_sum = max_element * k;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = (curr_sum + a[i]) % k;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long min_sum = 0;\n        long min_so_far = long.MaxValue;\n        long min_ending_here = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            min_ending_here += a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        max_sum = max_so_far;\n        min_sum = min_so_far;\n        if (k == 1) {\n            return max_sum;\n        }\n        long total_sum = 0;\n        for (long i = 0; i < n; i++) {\n            total_sum += a[(int)i];\n        }\n        if (total_sum > 0) {\n            return Math.Max(max_sum, (total_sum * (k - 2)) + max_sum);\n        } else if (total_sum == 0) {\n            return Math.Max(max_sum, max_sum);\n        } else {\n            return Math.Max(max_sum, (total_sum * (k - 2)) + max_sum);\n        }",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_sum = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here += a[i];\n            min_ending_here += a[i];\n            if (max_ending_here > max_so_far) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_ending_here < min_so_far) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            sum += a[i];\n        }\n        max_element = max_so_far;\n        min_element = min_so_far;\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = max_so_far + (k - 2) * sum;\n        } else {\n            max_sum = max_so_far;\n        }\n        if (sum < 0) {\n            min_sum = min_so_far + (k - 2) * sum;\n        } else {\n            min_sum = min_so_far;\n        }\n        max_sum = Math.Max(max_sum, sum + min_sum);\n        return max_sum;",
    "        long max_sum = 0;\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        long total_sum = 0;\n        long curr_prefix_sum = 0;\n        long curr_suffix_sum = 0;\n        for (int i = 0; i < n; i++) {\n            total_sum += a[i];\n            curr_prefix_sum += a[i];\n            max_prefix_sum = Math.Max(max_prefix_sum, curr_prefix_sum);\n            curr_prefix_sum = Math.Max(curr_prefix_sum, 0);\n            curr_suffix_sum += a[n - i - 1];\n            max_suffix_sum = Math.Max(max_suffix_sum, curr_suffix_sum);\n            curr_suffix_sum = Math.Max(curr_suffix_sum, 0);\n        }\n        max_sum = Math.Max(max_prefix_sum + max_suffix_sum, max_sum);\n        max_sum = Math.Max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            curr_sum = Math.Max(a[i % n], curr_sum + a[i % n]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            min_ending_here += a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (min_sum > min_ending_here)\n                min_sum = min_ending_here;\n            sum += a[(int)i];\n        }\n        if (k == 1)\n            return max_sum;\n        long ans1 = max_sum;\n        long ans2 = sum * k - min_sum;\n        long ans3 = max_sum + (sum * (k - 2)) + min_sum;\n        return Math.Max(ans1, Math.Max(ans2, ans3));",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (k == 1) {\n            return a.Sum();\n        }\n        if (max_element <= 0) {\n            return max_element * k;\n        }\n        for (long i = 0; i < n * k; i++) {\n            curr_sum += a[(int)(i % n)];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        long curr_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_wrap += a[(int)i];\n            if (curr_wrap > 0) {\n                max_wrap += curr_wrap;\n            }\n            else {\n                max_wrap = 0;\n            }\n        }\n        if (max_wrap == 0) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + curr_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        for (int i = 0; i < n * k; i++) {\n            curr_sum += a[i % n];\n            max_sum_so_far = Math.Max(max_sum_so_far, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        max_sum = max_sum_so_far;\n        long total_sum = 0;\n        for (int i = 0; i < n; i++) {\n            total_sum += a[i];\n        }\n        if (total_sum > 0) {\n            max_sum += (k - 2) * total_sum;\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        curr_sum = 0;\n        for (int i = (int)(n * k - 1); i >= (n * (k - 1)); i--) {\n            curr_sum += a[i % n];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_sum_ending_here = 0;\n        long max_element = a.Max();\n        long min_element = a.Min();\n        if (max_element < 0) {\n            return max_element * k;\n        }\n        if (min_element > 0) {\n            return min_element * k;\n        }\n        for (long i = 0; i < n * 2; i++) {\n            max_sum_ending_here += a[i % n];\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            if (max_sum_so_far < max_sum_ending_here) {\n                max_sum_so_far = max_sum_ending_here;\n            }\n        }\n        max_sum = max_sum_so_far;\n        curr_sum = max_sum_so_far;\n        for (long i = 1; i < k; i++) {\n            curr_sum = (curr_sum - (a[(n - 1) * i])) + a[((n - 1) * (i + 1)) % n];\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap += a[i];\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n        }\n        max_wrap = Math.Max(max_wrap, 0);\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long i;\n        for (i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_sum < curr_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        long max_wrap = 0;\n        for (i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_wrap < curr_sum) {\n                max_wrap = curr_sum;\n            }\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_sum, max_wrap * k);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_element < 0)\n            return max_element;\n        long max_wrap = sum * k - max_so_far;\n        return Math.Max(max_so_far, max_wrap);",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        if (max_wrap > max_so_far)\n            max_so_far = max_wrap;\n        return max_so_far;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long total = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            min_ending_here += a[(int)i];\n            total += a[(int)i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_ending_here < min_sum) {\n                min_sum = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = total - min_sum;\n        if (k == 2) {\n            return Math.Max(max_wrap, max_sum);\n        }\n        return Math.Max(max_wrap, max_sum + (k - 2) * total);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = 0;\n        long sum_of_all_elements = 0;\n        for (long i = 0; i < n; i++) {\n            sum_of_all_elements += a[(int)i];\n            if (a[(int)i] > max_element)\n                max_element = a[(int)i];\n        }\n        if (k == 1)\n            return MaxSubArraySum(a, n);\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            if (max_sum < curr_sum)\n                max_sum = curr_sum;\n        }\n        if (max_sum == 0)\n            return max_element;\n        long max_sum_of_middle_part = max_sum;\n        max_sum = 0;\n        curr_sum = 0;\n        for (long i = n - 1; i >= 0; i--) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            if (max_sum < curr_sum)\n                max_sum = curr_sum;\n        }\n        long max_sum_of_last_part = max_sum;\n        long ans = max_sum_of_middle_part + (k - 2) * sum_of_all_elements + max_sum_of_last_part;\n        return ans;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_sum = 0;\n        long curr_sum_so_far = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            min_element = Math.Min(min_element, a[i]);\n            curr_sum_so_far += a[i];\n            max_sum_so_far = Math.Max(max_sum_so_far, curr_sum_so_far);\n            if (curr_sum_so_far < 0) {\n                curr_sum_so_far = 0;\n            }\n        }\n        if (max_element < 0) {\n            return max_element * k;\n        }\n        if (k == 1) {\n            return max_sum_so_far;\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            min_sum = Math.Min(min_sum, curr_sum);\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n        }\n        long ans1 = max_sum + min_sum * (k - 2);\n        long ans2 = max_sum_so_far;\n        long ans3 = max_sum * k;\n        return Math.Max(ans1, Math.Max(ans2, ans3));",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long sum = 0;\n        long i = 0;\n        long j = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long e = 0;\n        long max_start = 0;\n        long max_end = 0;\n        long max_start_here = 0;\n        long max_end_here = 0;\n        // Find the maximum element in the array\n        max_element = a.Max();\n        // Find the sum of the array\n        sum = a.Sum();\n        // If the maximum element is negative, return the maximum element\n        if (max_element < 0) {\n            return max_element;\n        }\n        // If the sum is negative, return the maximum element\n        if (sum < 0) {\n            return max_element;\n        }\n        // If the sum is positive, find the maximum subarray sum\n        if (sum > 0) {\n            // Find the maximum subarray sum in the first array\n            for (i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[(int)i];\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                    max_start_here = i + 1;\n                }\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                    start = max_start_here;\n                    end = i;\n                }\n            }\n            // Find the maximum subarray sum in the repeated array\n            for (j = 1; j < k; j++) {\n                max_ending_here = 0;\n                max_start_here = 0;\n                for (i = 0; i < n; i++) {\n                    max_ending_here = max_ending_here + a[(int)i];\n                    if (max_ending_here < 0) {\n                        max_ending_here = 0;\n                        max_start_here =",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n\n        for (int i = 0; i < n * 2; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        for (int i = start; i <= end; i++) {\n            max_sum = max_sum + a[i % n];\n        }\n        return max_sum;",
    "        // Write your code here\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_element < 0)\n            return max_element;\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = sum * k - max_so_far;\n        return Math.Max(max_wrap, max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_elem = a.Max();\n        long min_elem = a.Min();\n        if (max_elem < 0) {\n            return max_elem * k;\n        }\n        if (min_elem > 0) {\n            return min_elem * k;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_sum < curr_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap = max_wrap + a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long curr_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_wrap = curr_wrap + a[(int)i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            if (max_wrap < curr_wrap) {\n                max_wrap = curr_wrap;\n            }\n        }\n        max_wrap = max_wrap + max_wrap;\n        if (max_wrap > max_sum) {\n            max_sum = max_wrap;\n        }\n        return max_sum * k;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap = max_wrap + a[i];\n            a[i] = -a[i];\n        }\n        long max_ending_here_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here_wrap = max_ending_here_wrap + a[i];\n            if (max_wrap < max_ending_here_wrap)\n                max_wrap = max_ending_here_wrap;\n            if (max_ending_here_wrap < 0)\n                max_ending_here_wrap = 0;\n        }\n        max_wrap = max_wrap + max_wrap;\n        if (k == 1)\n            return max_sum;\n        else if (k == 2)\n            return Math.Max(max_sum, max_wrap);\n        else\n            return Math.Max(max_sum, max_wrap + (k - 2) * max_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[(int)(i % n)];\n            if (max_sum < max_ending_here)\n                max_sum = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        if (max_wrap > max_so_far) {\n            max_so_far = max_wrap;\n        }\n        return Math.Max(max_so_far, sum * (k - 2) + max_so_far);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here += a[i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here += a[i];\n            if (min_ending_here < min_sum) {\n                min_sum = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = sum - min_sum;\n        if (max_wrap > 0) {\n            return Math.Max(max_wrap, max_sum + (k - 2) * sum + max_wrap);\n        } else {\n            return Math.Max(max_wrap, max_sum);\n        }",
    "        // Complete this function\n        long max_so_far = a[0];\n        long curr_max = a[0];\n        long max_ending_here = 0;\n        long max_ending_here_repeated = 0;\n        long max_so_far_repeated = 0;\n        long max_so_far_repeated_temp = 0;\n        long max_ending_here_repeated_temp = 0;\n        long curr_max_repeated = 0;\n        long curr_max_repeated_temp = 0;\n        long max_so_far_temp = 0;\n        long curr_max_temp = 0;\n        long max_ending_here_temp = 0;\n        long max_so_far_temp_temp = 0;\n        long curr_max_temp_temp = 0;\n        long max_ending_here_temp_temp = 0;\n        for (long i = 1; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        for (long i = 1; i < n; i++) {\n            max_ending_here_repeated = max_ending_here_repeated + a[i];\n            if (max_ending_here_repeated < 0)\n                max_ending_here_repeated = 0;\n            if (max_so_far_repeated < max_ending_here_repeated)\n                max_so_far_repeated = max_ending_here_repeated;\n        }\n        for (long i = 1; i < n; i++) {\n            max_ending_here_temp = max_ending_here_temp + a[i];\n            if (max_ending_here_temp < 0)\n                max_ending_here_temp = 0;\n            if (max_so_far_temp < max_ending_here_temp)\n                max_so_far_temp = max_ending_",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_element < 0)\n            return max_element;\n        long max_wrap = sum * k - max_so_far;\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = Math.Max(a[i], curr_sum + a[i]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = Math.Max(a[i], curr_sum + a[i]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        for (long i = start; i <= end; i++) {\n            max_sum = max_sum + a[i % n];\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_sum += a[(int)i] * k;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            max_sum = Math.Max(max_sum, curr_sum + sum * (k - 1));\n            curr_sum = Math.Max(curr_sum, 0);\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_ending_here_prev = 0;\n        long max_ending_here_prev_prev = 0;\n        long max_ending_here_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n        long max_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        long i;\n        for (i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here += a[(int)i];\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        max_sum = max_so_far;\n        if (k == 1) {\n            return max_sum;\n        }\n        long min_sum = min_so_far;\n        long circular_sum = sum;\n        max_sum = Math.Max(max_sum, circular_sum);\n        max_sum = Math.Max(max_sum, circular_sum + max_sum * (k - 2));\n        max_sum = Math.Max(max_sum, circular_sum + min_sum * (k - 2));\n        return max_sum;",
    "        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_element;\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        if (k == 2)\n            return Math.Max(max_so_far, max_wrap);\n        long ans1 = MaxSubArraySumRepeated(a, n, k - 1);\n        long ans2 = MaxSubArraySumRepeated(a, n, k - 2);\n        return Math.Max(Math.Max(ans1, ans2), max_wrap);",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long max_wrap = sum * (k - 2);\n        max_wrap = max_wrap + max_so_far;\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n * k; i++) {\n            curr_sum = (curr_sum + a[i % n]) % 1000000007;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_so_far == 0)\n            return max_element;\n        max_sum = max_so_far;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            a[i] = -a[i];\n        }\n        max_so_far = 0;\n        max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        max_sum = max_sum + sum + max_so_far;\n        if (k == 2)\n            return max_sum;\n        max_so_far = 0;\n        max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        max_sum = max_sum + max_so_far;\n        return max_sum;",
    "        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_subarray_sum = 0;\n        long max_subarray_sum_repeated = 0;\n        long i = 0;\n        long j = 0;\n        long sum = 0;\n        long sum_so_far = 0;\n        long sum_ending_here = 0;\n        long sum_subarray_sum = 0;\n        long sum_subarray_sum_repeated = 0;\n        long sum_subarray_sum_repeated_max = 0;\n        long sum_subarray_sum_repeated_min = 0;\n        long sum_subarray_sum_repeated_max_index = 0;\n        long sum_subarray_sum_repeated_min_index = 0;\n        long sum_subarray_sum_repeated_max_index_start = 0;\n        long sum_subarray_sum_repeated_min_index_start = 0;\n        long sum_subarray_sum_repeated_max_index_end = 0;\n        long sum_subarray_sum_repeated_min_index_end = 0;\n        long sum_subarray_sum_repeated_max_index_start_end = 0;\n        long sum_subarray_sum_repeated_min_index_start_end = 0;\n        long sum_subarray_sum_repeated_max_index_start_end_start = 0;\n        long sum_subarray_sum_repeated_min_index_start_end_start = 0;\n        long sum_subarray_sum_repeated_max_index_start_end_end = 0;\n        long sum_subarray_sum_repeated_min_index_start_end_end = 0;\n        long sum_subarray_sum_repeated_max_index_start_end_start_end = 0;\n        long sum_subarray_sum_repeated_min_index_start_end_start_end = 0;\n        long sum_subarray_sum_repeated_max_index_start_end_start_end_start = 0;\n       ",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = long.MinValue;\n        long min_sum = long.MaxValue;\n        long sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            sum += a[i % n];\n            if (i < n) {\n                max_sum = Math.Max(max_sum, a[i]);\n                min_sum = Math.Min(min_sum, a[i]);\n            }\n        }\n        if (sum > 0) {\n            return Math.Max(max_so_far, sum * k);\n        }\n        return Math.Max(max_so_far, max_sum + (sum * (k - 2)) + min_sum);",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        if (sum > 0) {\n            return sum * k;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_wrap) {\n                max_wrap = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        return Math.Max(max_so_far, max_wrap + (k - 2) * max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_so_far = 0;\n        long curr_max = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            curr_max = Math.Max(curr_max, a[(int)i]);\n        }\n        if (k == 1) {\n            max_sum = MaxSubArraySum(a, n);\n        } else if (curr_max <= 0) {\n            max_sum = curr_max;\n        } else {\n            max_so_far = MaxSubArraySum(a, n);\n            max_sum = Math.Max(max_so_far, sum * (k - 2) + max_so_far);\n            for (long i = 0; i < n; i++) {\n                curr_sum += a[(int)i];\n                max_sum = Math.Max(max_sum, curr_sum);\n                curr_sum = Math.Max(curr_sum, 0);\n            }\n            curr_sum = 0;\n            for (long i = n - 1; i >= 0; i--) {\n                curr_sum += a[(int)i];\n                max_sum = Math.Max(max_sum, curr_sum);\n                curr_sum = Math.Max(curr_sum, 0);\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_sum_ending_here = 0;\n        long max_element = long.MinValue;\n        long min_element = long.MaxValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            min_element = Math.Min(min_element, a[(int)i]);\n            sum += a[(int)i];\n        }\n        if (k == 1) {\n            return MaxSubArraySum(a, n);\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        if (min_element >= 0) {\n            return sum * k;\n        }\n        for (long i = 0; i < n; i++) {\n            max_sum_ending_here += a[(int)i];\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            if (max_sum < max_sum_ending_here) {\n                max_sum = max_sum_ending_here;\n            }\n        }\n        max_sum_so_far = max_sum;\n        for (long i = 1; i < k; i++) {\n            for (long j = 0; j < n; j++) {\n                curr_sum += a[(int)j];\n                if (curr_sum < 0) {\n                    curr_sum = 0;\n                }\n                if (max_sum_so_far < curr_sum) {\n                    max_sum_so_far = curr_sum;\n                }\n            }\n            max_sum = max_sum_so_far;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long max_val = 0;\n        long max_index = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            if (a[(int)i] > max_val) {\n                max_val = a[(int)i];\n                max_index = i;\n            }\n        }\n        if (k == 1) {\n            return sum;\n        }\n        if (max_val <= 0) {\n            return max_val;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n        }\n        if (start == 0 && end == n - 1) {\n            max_sum = max_so_far * k;\n        } else {\n            long min_sum = 0;\n            for (long i = end + 1; i < n; i++) {\n                min_sum += a[(int)i];\n            }\n            long max_prefix = 0;\n            long max_suffix = 0;\n            long temp = 0;\n            for (long i = 0; i < start; i++) {\n                temp += a[(int)i];\n                if (temp > max_prefix) {\n                    max_prefix = temp;\n                }\n            }\n            temp = 0;\n            for (long i = n - 1; i > end; i--) {\n                temp += a[(int)i];\n                if (temp > max_suffix) {\n                    max_suffix = temp;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here += a[i % n];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        for (long i = start; i <= end; i++) {\n            max_sum += a[i % n];\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[(int)(i % n)];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_sum < curr_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            if (max_sum < curr_sum) {\n                max_sum = curr_sum;\n            }\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        if (max_wrap > max_sum) {\n            return max_wrap * (k - 1) + max_sum;\n        }\n        return max_sum;",
    "        long max_so_far = 0, max_ending_here = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (k == 1)\n            return max_so_far;\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_sum);\n        }\n        if (sum > 0) {\n            return Math.Max(max_wrap, max_sum + (k - 2) * sum);\n        }\n        return Math.Max(max_wrap, max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long min_wrap = 0;\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n            min_wrap = Math.Min(min_wrap, curr_sum);\n        }\n        long ans1 = max_wrap + min_wrap;\n        long ans2 = max_sum;\n        if (k == 2) {\n            return Math.Max(ans1, ans2);\n        }\n        return Math.Max(ans1 + (k - 2) * max_wrap, ans2);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_ending_here += a[(int)i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here += a[(int)i];\n            if (min_ending_here < min_sum) {\n                min_sum = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        curr_sum = sum * (k - 2);\n        curr_sum += max_sum;\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        curr_sum = sum * (k - 2);\n        curr_sum += min_sum;\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long min_element = long.MaxValue;\n        long min_ending_here = 0;\n        long min_so_far = long.MaxValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (min_so_far > min_ending_here)\n                min_so_far = min_ending_here;\n            if (min_ending_here > 0)\n                min_ending_here = 0;\n            if (max_element < a[i])\n                max_element = a[i];\n            if (min_element > a[i])\n                min_element = a[i];\n            sum += a[i];\n        }\n        if (k == 1)\n            return max_so_far;\n        if (max_element <= 0)\n            return max_element;\n        if (min_element >= 0)\n            return sum * k;\n        long max_suffix_sum = 0;\n        long min_suffix_sum = 0;\n        for (int i = (int)n - 1; i >= 0; i--) {\n            max_suffix_sum += a[i];\n            min_suffix_sum += a[i];\n            if (max_so_far < max_suffix_sum)\n                max_so_far = max_suffix_sum;\n            if (max_suffix_sum < 0)\n                max_suffix_sum = 0;\n            if (min_so_far > min_suffix_sum)\n                min_so_far = min_suffix_sum;\n            if (min_suffix_",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long i;\n        for (i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1)\n            return max_sum;\n        long max_wrap = 0;\n        for (i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            max_wrap += a[(int)i];\n            if (curr_sum < 0)\n                curr_sum = 0;\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (max_wrap < 0)\n            return max_sum;\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_sum_so_far = 0;\n        long max_sum_ending_here = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_sum_ending_here = 0;\n        long min_sum_so_far = 0;\n        for (int i = 0; i < n; i++) {\n            max_sum_ending_here += a[i];\n            min_sum_ending_here += a[i];\n            if (max_sum_ending_here > max_sum_so_far) {\n                max_sum_so_far = max_sum_ending_here;\n            }\n            if (max_sum_ending_here < 0) {\n                max_sum_ending_here = 0;\n            }\n            if (min_sum_ending_here < min_sum_so_far) {\n                min_sum_so_far = min_sum_ending_here;\n            }\n            if (min_sum_ending_here > 0) {\n                min_sum_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum_so_far;\n        }\n        max_sum = max_sum_so_far;\n        long total_sum = 0;\n        for (int i = 0; i < n; i++) {\n            total_sum += a[i];\n            max_element = Math.Max(max_element, a[i]);\n            min_element = Math.Min(min_element, a[i]);\n        }\n        if (total_sum > 0) {\n            max_sum = max_sum_so_far + (k - 2) * total_sum;\n        } else {\n            max_sum = max_sum_so_far;\n        }\n        if (max_element < 0) {\n            return max_element;\n        }\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1)\n            return MaxSubArraySum(a, n);\n        if (max_element <= 0)\n            return max_element * k;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        max_wrap = max_wrap + MaxSubArraySum(a, n);\n        return Math.Max(max_wrap, max_so_far + (k - 2) * sum);",
    "        // Complete this function\n        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[i];\n                if (max_ending_here < 0)\n                    max_ending_here = 0;\n                if (max_so_far < max_ending_here)\n                    max_so_far = max_ending_here;\n            }\n        }\n        else if (k == 2) {\n            long max_ending_here_1 = 0;\n            long max_so_far_1 = 0;\n            long max_ending_here_2 = 0;\n            long max_so_far_2 = 0;\n            for (int i = 0; i < n; i++) {\n                max_ending_here_1 = max_ending_here_1 + a[i];\n                if (max_ending_here_1 < 0)\n                    max_ending_here_1 = 0;\n                if (max_so_far_1 < max_ending_here_1)\n                    max_so_far_1 = max_ending_here_1;\n            }\n            for (int i = 0; i < n; i++) {\n                max_ending_here_2 = max_ending_here_2 + a[i];\n                if (max_ending_here_2 < 0)\n                    max_ending_here_2 = 0;\n                if (max_so_far_2 < max_ending_here_2)\n                    max_so_far_2 = max_ending_here_2;\n            }\n            max_so_far = max_so_far_1 + max_so_far_2;\n        }\n        else if (k > 2) {\n            if (sum > 0) {\n                max_so_far = sum * (k - 2) + max_element * 2;\n            }\n            else {\n                for (int i = 0; i < n; i++) {",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        max_wrap = max_wrap + curr_sum;\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long min_wrap = 0;\n        curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > 0) {\n                curr_sum = 0;\n            }\n            min_wrap = Math.Min(min_wrap, curr_sum);\n        }\n        long ans1 = max_wrap + min_wrap;\n        long ans2 = max_sum;\n        long ans3 = max_wrap + min_wrap + max_sum;\n        return Math.Max(ans1, Math.Max(ans2, ans3));",
    "        long max_so_far = 0;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long max_sum_without_wrap = max_so_far;\n        long max_sum_with_wrap = max_so_far + sum * (k - 2);\n        return Math.Max(max_sum_without_wrap, max_sum_with_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = Math.Max(a[(int)(i % n)], curr_sum + a[(int)(i % n)]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            max_sum = Math.Max(max_sum, max_ending_here);\n            min_sum = Math.Min(min_sum, min_ending_here);\n            total += a[i];\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = total - min_sum;\n        if (max_wrap > 0) {\n            return Math.Max(max_wrap, max_sum + (k - 2) * total + max_wrap);\n        } else {\n            return Math.Max(max_wrap, max_sum);\n        }",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long min_element = long.MaxValue;\n        long min_ending_here = 0;\n        long min_so_far = long.MaxValue;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            min_ending_here += a[(int)i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (a[(int)i] > max_element) {\n                max_element = a[(int)i];\n            }\n            if (a[(int)i] < min_element) {\n                min_element = a[(int)i];\n            }\n            sum += a[(int)i];\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (max_element <= 0) {\n            return max_element;\n        }\n        if (min_element >= 0) {\n            return sum * k;\n        }\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        long temp = 0;\n        for (long i = 0; i < n; i++) {\n            temp += a[(int)i];\n            if (temp > max_prefix_sum) {\n                max_prefix_sum = temp;\n            }\n        }\n        temp = 0;\n        for (long i = n - 1; i >= 0; i--) {\n            temp += a[(int)i];",
    "        long max_sum = long.MinValue;\n        long curr_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            a.Add(a[i]);\n        }\n        for (int i = 0; i < n * 2; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return Math.Max(max_sum, sum * k);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            min_ending_here = min_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            sum += a[i];\n            max_element = Math.Max(max_element, a[i]);\n            min_element = Math.Min(min_element, a[i]);\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = max_so_far + (k - 2) * sum;\n        } else {\n            max_sum = max_so_far;\n        }\n        max_sum = Math.Max(max_sum, sum * k);\n        max_sum = Math.Max(max_sum, max_element + min_element);\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long sum = 0;\n        long i = 0;\n        long j = 0;\n        long start = 0;\n        long end = 0;\n        long s = 0;\n        long e = 0;\n        long max_start = 0;\n        long max_end = 0;\n        for (i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            sum += a[(int)i];\n        }\n        if (max_element < 0) {\n            return max_element * k;\n        }\n        for (i = 0; i < n; i++) {\n            max_ending_here += a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n        }\n        max_sum = max_so_far;\n        max_start = start;\n        max_end = end;\n        for (j = 1; j < k; j++) {\n            for (i = 0; i < n; i++) {\n                max_ending_here += a[(int)i];\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                    s = i + 1;\n                }\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                    start = s;\n                    end = i;\n                }\n            }\n            if (max_sum < max_so_far) {\n                max_sum = max_so_far;\n                max_start = start;\n                max_end = end;\n            }\n            max_so_far = 0;\n            max_ending_here",
    "        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum = curr_sum + a[i % n];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long curr_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_wrap += a[(int)i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n        }\n        max_wrap = Math.Max(max_wrap, 0);\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap + (k - 2) * max_wrap);",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n        }\n        max_sum = max_so_far;\n        max_sum = Math.Max(max_sum, max_sum * k);\n        max_sum = Math.Max(max_sum, sum * k);\n        return max_sum;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_sum = 0;\n        long min_sum = 0;\n        long min_ending_here = 0;\n        long min_so_far = long.MaxValue;\n        long sum = 0;\n\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here += a[i];\n            min_ending_here += a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        max_sum = max_so_far;\n        min_sum = min_so_far;\n        if (k == 1) {\n            return max_sum;\n        }\n        if (sum > 0) {\n            max_sum = max_sum + sum * (k - 2);\n        }\n        else {\n            max_sum = max_sum + sum * (k - 1);\n        }\n        if (sum < 0) {\n            min_sum = min_sum + sum * (k - 2);\n        }\n        else {\n            min_sum = min_sum + sum * (k - 1);\n        }\n        return Math.Max(max_sum, max_so_far + min_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_ending_here = 0;\n        long min_ending_here = 0;\n        long min_sum = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here += a[i];\n            if (max_ending_here > max_sum) {\n                max_sum = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            min_ending_here += a[i];\n            if (min_ending_here < min_sum) {\n                min_sum = min_ending_here;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        curr_sum = sum * (k - 2);\n        curr_sum += max_sum;\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        curr_sum = sum * (k - 2);\n        curr_sum += sum + min_sum;\n        if (curr_sum > max_sum) {\n            max_sum = curr_sum;\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum = curr_sum + a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_sum);\n        }\n        if (max_wrap > 0) {\n            return Math.Max(max_wrap, max_sum + (k - 2) * max_wrap);\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_element = a.Max();\n        long sum_of_all_elements = a.Sum();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        if (k == 2) {\n            return max_wrap;\n        }\n        return Math.Max(max_wrap, max_sum + (k - 2) * sum_of_all_elements);",
    "        long maxSum = 0;\n        long maxSumSoFar = 0;\n        long maxElement = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            maxSumSoFar += a[(int)i];\n            if (maxSumSoFar < 0) {\n                maxSumSoFar = 0;\n            }\n            maxSum = Math.Max(maxSum, maxSumSoFar);\n            maxElement = Math.Max(maxElement, a[(int)i]);\n        }\n        if (maxSum == 0) {\n            return maxElement;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n        }\n        long maxPrefixSum = 0;\n        long maxSuffixSum = 0;\n        long currPrefixSum = 0;\n        long currSuffixSum = 0;\n        for (long i = 0; i < n; i++) {\n            currPrefixSum += a[(int)i];\n            maxPrefixSum = Math.Max(maxPrefixSum, currPrefixSum);\n            currSuffixSum += a[(int)(n - i - 1)];\n            maxSuffixSum = Math.Max(maxSuffixSum, currSuffixSum);\n        }\n        long ans = Math.Max(maxSum, maxPrefixSum + maxSuffixSum + (k - 2) * sum);\n        return ans;",
    "        // Complete this function\n        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = a.Max();\n        long sum = a.Sum();\n        if (max_element < 0) {\n            return max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        long max_sum_without_wrap = max_so_far;\n        long max_sum_with_wrap = max_so_far + sum * (k - 2);\n        return Math.Max(max_sum_without_wrap, max_sum_with_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        max_so_far = max_sum;\n        if (k > 1) {\n            max_so_far = Math.Max(max_so_far, max_sum + sum * (k - 2));\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        max_so_far = Math.Max(max_so_far, max_sum);\n        return max_so_far;"
  ]
}