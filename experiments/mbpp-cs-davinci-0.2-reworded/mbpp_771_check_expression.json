{
  "name": "mbpp_771_check_expression",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static bool CheckExpression(string exp) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckExpression((\"{()}[{}]\")) == (true));\n    Debug.Assert(CheckExpression((\"{()}[{]\")) == (false));\n    Debug.Assert(CheckExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                var top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n                if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if ((c == '(' && exp[i] != ')') || (c == '[' && exp[i] != ']') || (c == '{' && exp[i] != '}')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if ((c == '(' && exp[i] != ')') || (c == '{' && exp[i] != '}') || (c == '[' && exp[i] != ']')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            }\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                if (c == ')' && stack.Peek() != '(') {\n                    return false;\n                }\n                if (c == '}' && stack.Peek() != '{') {\n                    return false;\n                }\n                if (c == ']' && stack.Peek() != '[') {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> st = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                st.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (st.Count == 0) {\n                    return false;\n                }\n                char c = st.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (st.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> st = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                st.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (st.Count == 0) {\n                    return false;\n                }\n                char p = st.Pop();\n                if (c == ')' && p != '(') {\n                    return false;\n                }\n                if (c == '}' && p != '{') {\n                    return false;\n                }\n                if (c == ']' && p != '[') {\n                    return false;\n                }\n            }\n        }\n        return st.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            }\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count > 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                } else if (exp[i] == '}' && top != '{') {\n                    return false;\n                } else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count > 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            }\n            else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                if (exp[i] == ')' && stack.Peek() == '(') {\n                    stack.Pop();\n                }\n                else if (exp[i] == '}' && stack.Peek() == '{') {\n                    stack.Pop();\n                }\n                else if (exp[i] == ']' && stack.Peek() == '[') {\n                    stack.Pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count == 0) {\n            return true;\n        }\n        return false;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{')\n                stack.Push(c);\n            else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0)\n                    return false;\n                char top = stack.Pop();\n                if (c == ')' && top != '(')\n                    return false;\n                if (c == ']' && top != '[')\n                    return false;\n                if (c == '}' && top != '{')\n                    return false;\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                } else if (top == '{' && c != '}') {\n                    return false;\n                } else if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            }\n            else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((exp[i] == ')' && top != '(') || (exp[i] == '}' && top != '{') || (exp[i] == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n\n        if (stack.Count == 0) {\n            return true;\n        } else {\n            return false;\n        }",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> st = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                st.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (st.Count == 0) {\n                    return false;\n                }\n                char top = st.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (st.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count > 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> s = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                s.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (s.Count == 0) {\n                    return false;\n                }\n                char c = s.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (s.Count == 0) {\n            return true;\n        }\n        return false;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((exp[i] == ')' && top != '(') || (exp[i] == '}' && top != '{') || (exp[i] == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                } else if (exp[i] == ']' && c != '[') {\n                    return false;\n                } else if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                } else {\n                    char c = stack.Pop();\n                    if (c == '(' && exp[i] != ')') {\n                        return false;\n                    } else if (c == '[' && exp[i] != ']') {\n                        return false;\n                    } else if (c == '{' && exp[i] != '}') {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char opening = stack.Pop();\n                if (opening == '(' && exp[i] != ')') {\n                    return false;\n                } else if (opening == '[' && exp[i] != ']') {\n                    return false;\n                } else if (opening == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count == 0) {\n            return true;\n        }\n        return false;",
    "        Stack<char> st = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                st.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (st.Count == 0) {\n                    return false;\n                }\n                char ch = st.Pop();\n                if ((ch == '(' && exp[i] != ')') || (ch == '[' && exp[i] != ']') || (ch == '{' && exp[i] != '}')) {\n                    return false;\n                }\n            }\n        }\n        return st.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count == 0) {\n            return true;\n        }\n        return false;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                } else if (exp[i] == ']' && top != '[') {\n                    return false;\n                } else if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                stack.Pop();\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            }\n            else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                }\n                if (top == '{' && c != '}') {\n                    return false;\n                }\n                if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                }\n                if (top == '{' && c != '}') {\n                    return false;\n                }\n                if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n                stack.Push(exp[i]);\n            else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0)\n                    return false;\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(')\n                    return false;\n                if (exp[i] == '}' && c != '{')\n                    return false;\n                if (exp[i] == ']' && c != '[')\n                    return false;\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                } else if (top == '[' && c != ']') {\n                    return false;\n                } else if (top == '{' && c != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> st = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                st.Push(exp[i]);\n            }\n            else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (st.Count == 0) {\n                    return false;\n                }\n                char c = st.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        if (st.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> st = new Stack<char>();\n        for(int i = 0; i < exp.Length; i++) {\n            if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                st.Push(exp[i]);\n            } else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if(st.Count == 0) {\n                    return false;\n                }\n                char c = st.Pop();\n                if(c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if(c == '[' && exp[i] != ']') {\n                    return false;\n                }\n                if(c == '{' && exp[i] != '}') {\n                    return false;\n                }\n            }\n        }\n        return st.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count == 0) {\n            return true;\n        }\n        return false;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(' || c == ']' && top != '[' || c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            }\n            else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                }\n                if (top == '{' && c != '}') {\n                    return false;\n                }\n                if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count > 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                }\n                if (top == '{' && c != '}') {\n                    return false;\n                }\n                if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                var top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            char c = exp[i];\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        var stack = new Stack<char>();\n        foreach (var c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                var top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (exp[i] == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (exp[i] == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            }\n            else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                } else if (exp[i] == '}' && top != '{') {\n                    return false;\n                } else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.Push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char top = stack.Pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        foreach (char c in exp) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.Push(c);\n            } else if (c == ')') {\n                if (stack.Count == 0 || stack.Pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.Count == 0 || stack.Pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.Count == 0 || stack.Pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.Count == 0;",
    "        Stack<char> stack = new Stack<char>();\n        for (int i = 0; i < exp.Length; i++) {\n            if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n                stack.Push(exp[i]);\n            } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n                char c = stack.Pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n        if (stack.Count != 0) {\n            return false;\n        }\n        return true;"
  ]
}