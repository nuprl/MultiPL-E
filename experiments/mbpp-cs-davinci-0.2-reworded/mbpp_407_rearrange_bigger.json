{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));\n    Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));\n    Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] c = s.ToCharArray();\n        // Sort the array\n        Array.Sort(c);\n        // Convert back to string\n        string sorted = new string(c);\n        // Convert back to long\n        long sortedLong = long.Parse(sorted);\n        // Check if the number is already the biggest\n        if (sortedLong == n) {\n            return -1;\n        }\n        // Find the next biggest number\n        long nextBiggest = sortedLong;\n        while (nextBiggest <= n) {\n            nextBiggest++;\n        }\n        // Return the next biggest number\n        return nextBiggest;",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to string\n        string s = n.ToString();\n        // Convert to char array\n        char[] c = s.ToCharArray();\n        // Sort in descending order\n        Array.Sort(c);\n        Array.Reverse(c);\n        // Convert to string\n        string r = new string(c);\n        // Convert to long\n        long l = long.Parse(r);\n        // Return\n        return l;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the pivot\n        int pivot = -1;\n        for (int i = digits.Length - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // If no pivot found, return -1\n        if (pivot == -1) {\n            return -1;\n        }\n        // Find the rightmost successor to the pivot\n        int successor = 0;\n        for (int i = digits.Length - 1; i > pivot; i--) {\n            if (digits[i] > digits[pivot]) {\n                successor = i;\n                break;\n            }\n        }\n        // Swap the pivot with its successor\n        char temp = digits[pivot];\n        digits[pivot] = digits[successor];\n        digits[successor] = temp;\n        // Sort the suffix in ascending order\n        Array.Sort(digits, pivot + 1, digits.Length - pivot - 1);\n        // Convert to long\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        // convert to string\n        string s = n.ToString();\n        // convert to list of chars\n        List<char> l = s.ToList();\n        // find the first decreasing digit\n        int i = l.Count - 1;\n        while (i > 0 && l[i - 1] >= l[i]) {\n            i--;\n        }\n        // if i is 0, then there is no bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of i that is greater than l[i - 1]\n        int j = l.Count - 1;\n        while (l[j] <= l[i - 1]) {\n            j--;\n        }\n        // swap l[i - 1] and l[j]\n        char temp = l[i - 1];\n        l[i - 1] = l[j];\n        l[j] = temp;\n        // reverse the digits from i to the end\n        j = l.Count - 1;\n        while (i < j) {\n            temp = l[i];\n            l[i] = l[j];\n            l[j] = temp;\n            i++;\n            j--;\n        }\n        // convert back to string and return\n        return long.Parse(new string(l.ToArray()));",
    "        // Convert to string\n        string s = n.ToString();\n        // Find the first digit that is smaller than the digit to its right\n        int i = s.Length - 1;\n        while (i > 0 && s[i - 1] >= s[i]) i--;\n        if (i == 0) return -1;\n        // Find the smallest digit to the right of i that is larger than s[i - 1]\n        int j = s.Length - 1;\n        while (s[j] <= s[i - 1]) j--;\n        // Swap s[i - 1] and s[j]\n        char temp = s[i - 1];\n        s = s.Remove(i - 1, 1);\n        s = s.Insert(i - 1, s[j].ToString());\n        s = s.Remove(j, 1);\n        s = s.Insert(j, temp.ToString());\n        // Reverse the digits to the right of i\n        string right = s.Substring(i);\n        char[] charArray = right.ToCharArray();\n        Array.Reverse(charArray);\n        right = new string(charArray);\n        s = s.Remove(i);\n        s = s.Insert(i, right);\n        return long.Parse(s);",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1])\n            j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        if (n < 10) return -1;\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i == 0) return -1;\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        Array.Reverse(digits, i, digits.Length - i);\n        return long.Parse(new string(digits.Select(d => (char)(d + '0')).ToArray()));",
    "        // find the first digit that is smaller than the next digit\n        var digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        // find the smallest digit that is larger than the digit at i - 1\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        // swap the digits at i - 1 and j\n        char tmp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = tmp;\n        // reverse the digits from i to the end\n        Array.Reverse(digits, i, digits.Length - i);\n        return new string(digits);",
    "        var digits = n.ToString().ToCharArray();\n        var index = -1;\n        for (var i = digits.Length - 1; i > 0; i--) {\n            if (digits[i - 1] < digits[i]) {\n                index = i - 1;\n                break;\n            }\n        }\n        if (index == -1) {\n            return -1;\n        }\n        var smallest = index + 1;\n        for (var i = index + 2; i < digits.Length; i++) {\n            if (digits[i] > digits[index] && digits[i] <= digits[smallest]) {\n                smallest = i;\n            }\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        Array.Sort(digits, index + 1, digits.Length - index - 1);\n        return long.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        var len = digits.Length;\n        var i = len - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) i--;\n        if (i <= 0) return -1;\n        var j = len - 1;\n        while (digits[j] <= digits[i - 1]) j--;\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = len - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return long.Parse(new string(digits));",
    "        if (n < 10) return -1;\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var index = digits.Count - 2;\n        while (index >= 0 && digits[index] >= digits[index + 1]) index--;\n        if (index < 0) return -1;\n        var smallest = index + 1;\n        for (int i = index + 2; i < digits.Count; i++) {\n            if (digits[i] < digits[smallest] && digits[i] > digits[index]) smallest = i;\n        }\n        var temp = digits[index];\n        digits[index] = digits[smallest];\n        digits[smallest] = temp;\n        digits.Sort(index + 1, digits.Count - index - 1, Comparer<int>.Create((x, y) => y.CompareTo(x)));\n        var result = 0L;\n        foreach (var d in digits) result = result * 10 + d;\n        return result;",
    "        var digits = n.ToString().ToCharArray();\n        var i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        var j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return BigInteger.Parse(new string(digits));",
    "        var digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        var temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.Length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(digits);",
    "        // Convert to char array\n        char[] digits = n.ToString().ToCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.Length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.Length - 1;\n        while (digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap digits[i] and digits[j]\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of i\n        Array.Reverse(digits, i + 1, digits.Length - i - 1);\n        // Convert back to long\n        return long.Parse(new string(digits));"
  ]
}