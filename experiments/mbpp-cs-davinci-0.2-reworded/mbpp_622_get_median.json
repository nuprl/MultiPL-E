{
  "name": "mbpp_622_get_median",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        // If the median is present in one of the arrays, then return it.\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n\n        // If m1 < m2, then median must exist in arr1[m1....] and arr2[....m2]\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        // If m1 > m2, then median must exist in arr1[....m1] and arr2[m2...]\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((n / 2) - 1, n / 2 + 1), arr1.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange(n / 2, n / 2 + 1), arr1.GetRange(0, n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);"
  ]
}