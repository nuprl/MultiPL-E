{
  "name": "mbpp_247_lps",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    public static long Lps(string str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Lps((\"TENS FOR TENS\")) == (5L));\n    Debug.Assert(Lps((\"CARDIO FOR CARDS\")) == (7L));\n    Debug.Assert(Lps((\"PART OF THE JOURNEY IS PART\")) == (9L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var i = n - 2; i >= 0; i--) {\n            for (var j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        // Create a table to store results of subproblems\n        int n = str.Length;\n        int[,] lps = new int[n,n];\n\n        // Strings of length 1 are palindrome of length 1\n        for (int i = 0; i < n; i++) {\n            lps[i,i] = 1;\n        }\n\n        // Build the table. Note that the lower diagonal values of table are\n        // useless and not filled in the process. The values are filled in a\n        // manner similar to Matrix Chain Multiplication DP solution (See\n        // http://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n        // cl is length of substring\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str[i] == str[j] && cl == 2) {\n                    lps[i,j] = 2;\n                } else if (str[i] == str[j]) {\n                    lps[i,j] = lps[i + 1,j - 1] + 2;\n                } else {\n                    lps[i,j] = Math.Max(lps[i,j - 1], lps[i + 1,j]);\n                }\n            }\n        }\n\n        return lps[0,n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var len = 2; len <= n; len++) {\n            for (var i = 0; i <= n - len; i++) {\n                var j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var i = n - 2; i >= 0; i--) {\n            for (var j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++)\n            dp[i, i] = 1;\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (str[i] == str[j] && len == 2)\n                    dp[i, j] = 2;\n                else if (str[i] == str[j])\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                else\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] L = new int[n, n];\n        for (int i = 0; i < n; i++)\n            L[i, i] = 1;\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str[i] == str[j] && cl == 2)\n                    L[i, j] = 2;\n                else if (str[i] == str[j])\n                    L[i, j] = L[i + 1, j - 1] + 2;\n                else\n                    L[i, j] = Math.Max(L[i, j - 1], L[i + 1, j]);\n            }\n        }\n        return L[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n,n];\n        for (int i = 0; i < n; i++) {\n            dp[i,i] = 1;\n        }\n        for (int l = 2; l <= n; l++) {\n            for (int i = 0; i < n-l+1; i++) {\n                int j = i+l-1;\n                if (str[i] == str[j] && l == 2) {\n                    dp[i,j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i,j] = dp[i+1,j-1] + 2;\n                } else {\n                    dp[i,j] = Math.Max(dp[i+1,j], dp[i,j-1]);\n                }\n            }\n        }\n        return dp[0,n-1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                var j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n,n];\n        for (int i = 0; i < n; i++) {\n            dp[i,i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n-len; i++) {\n                int j = i+len-1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i,j] = 2;\n                }\n                else if (str[i] == str[j]) {\n                    dp[i,j] = dp[i+1,j-1] + 2;\n                }\n                else {\n                    dp[i,j] = Math.Max(dp[i+1,j], dp[i,j-1]);\n                }\n            }\n        }\n        return dp[0,n-1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var i = n - 2; i >= 0; i--) {\n            for (var j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n,n];\n        for (int i = 0; i < n; i++) {\n            dp[i,i] = 1;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (str[i] == str[j] && len == 2) {\n                    dp[i,j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i,j] = dp[i + 1,j - 1] + 2;\n                } else {\n                    dp[i,j] = Math.Max(dp[i + 1,j], dp[i,j - 1]);\n                }\n            }\n        }\n        return dp[0,n - 1];",
    "        // dp[i,j] = length of longest palindromic subsequence in str[i..j]\n        var dp = new long[str.Length, str.Length];\n        for (int i = 0; i < str.Length; i++) {\n            dp[i, i] = 1;\n        }\n        for (int len = 2; len <= str.Length; len++) {\n            for (int i = 0; i + len <= str.Length; i++) {\n                var j = i + len - 1;\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, str.Length - 1];",
    "        int n = str.Length;\n        int[,] L = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            L[i, i] = 1;\n        }\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str[i] == str[j] && cl == 2) {\n                    L[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    L[i, j] = L[i + 1, j - 1] + 2;\n                } else {\n                    L[i, j] = Math.Max(L[i, j - 1], L[i + 1, j]);\n                }\n            }\n        }\n        return L[0, n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var i = n - 2; i >= 0; i--) {\n            for (var j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        var n = str.Length;\n        var dp = new long[n, n];\n        for (var i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (var i = n - 2; i >= 0; i--) {\n            for (var j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];",
    "        int n = str.Length;\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (str[i] == str[j]) {\n                    dp[i, j] = 2 + dp[i + 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];"
  ]
}