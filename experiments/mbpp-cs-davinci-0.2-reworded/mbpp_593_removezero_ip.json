{
  "name": "mbpp_593_removezero_ip",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    public static string RemovezeroIp(string ip) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemovezeroIp((\"216.08.094.196\")).Equals((\"216.8.94.196\")));\n    Debug.Assert(RemovezeroIp((\"12.01.024\")).Equals((\"12.1.24\")));\n    Debug.Assert(RemovezeroIp((\"216.08.094.0196\")).Equals((\"216.8.94.196\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        string[] ip_parts = ip.Split('.');\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ip_parts.Length; i++) {\n            if (ip_parts[i][0] == '0') {\n                sb.Append(ip_parts[i].Substring(1));\n            } else {\n                sb.Append(ip_parts[i]);\n            }\n            if (i != ip_parts.Length - 1) {\n                sb.Append(\".\");\n            }\n        }\n        return sb.ToString();",
    "        string[] parts = ip.Split('.');\n        string result = \"\";\n        foreach (string part in parts) {\n            int p = int.Parse(part);\n            if (p == 0) {\n                result += \"0.\";\n            } else {\n                result += p.ToString() + \".\";\n            }\n        }\n        return result.TrimEnd('.');",
    "        string[] parts = ip.Split('.');\n        for (int i = 0; i < parts.Length; i++) {\n            parts[i] = parts[i].TrimStart('0');\n            if (parts[i] == \"\") parts[i] = \"0\";\n        }\n        return string.Join(\".\", parts);",
    "        var result = new StringBuilder();\n        var isZero = true;\n        foreach (var c in ip) {\n            if (c == '.') {\n                result.Append(c);\n                isZero = true;\n            } else if (c == '0' && isZero) {\n                continue;\n            } else {\n                result.Append(c);\n                isZero = false;\n            }\n        }\n        return result.ToString();",
    "        string[] parts = ip.Split('.');\n        StringBuilder sb = new StringBuilder();\n        foreach (string part in parts) {\n            sb.Append(int.Parse(part));\n            sb.Append('.');\n        }\n        sb.Remove(sb.Length - 1, 1);\n        return sb.ToString();",
    "        string[] ip_arr = ip.Split('.');\n        string result = \"\";\n        for (int i = 0; i < ip_arr.Length; i++) {\n            result += ip_arr[i].TrimStart('0');\n            if (i != ip_arr.Length - 1) {\n                result += \".\";\n            }\n        }\n        return result;",
    "        string[] ip_arr = ip.Split('.');\n        string result = \"\";\n        foreach (string s in ip_arr) {\n            int i = int.Parse(s);\n            result += i.ToString() + \".\";\n        }\n        return result.Substring(0, result.Length - 1);",
    "        string[] ip_arr = ip.Split('.');\n        string[] ip_arr_new = new string[ip_arr.Length];\n        for (int i = 0; i < ip_arr.Length; i++) {\n            ip_arr_new[i] = ip_arr[i].TrimStart('0');\n            if (ip_arr_new[i].Length == 0) {\n                ip_arr_new[i] = \"0\";\n            }\n        }\n        return string.Join(\".\", ip_arr_new);",
    "        string[] parts = ip.Split('.');\n        string result = \"\";\n        foreach (string part in parts) {\n            result += int.Parse(part) + \".\";\n        }\n        return result.Substring(0, result.Length - 1);",
    "        string[] ip_arr = ip.Split('.');\n        string result = \"\";\n        for (int i = 0; i < ip_arr.Length; i++) {\n            int num = int.Parse(ip_arr[i]);\n            if (num == 0) {\n                result += \"0.\";\n            } else {\n                result += num.ToString() + \".\";\n            }\n        }\n        return result.Substring(0, result.Length - 1);",
    "        var parts = ip.Split('.');\n        var result = new StringBuilder();\n        for (int i = 0; i < parts.Length; i++) {\n            var part = parts[i];\n            if (part.Length > 1 && part[0] == '0') {\n                part = part.Substring(1);\n            }\n            result.Append(part);\n            if (i != parts.Length - 1) {\n                result.Append('.');\n            }\n        }\n        return result.ToString();",
    "        var ip_arr = ip.Split('.');\n        var ip_arr_new = new string[4];\n        for (int i = 0; i < 4; i++) {\n            ip_arr_new[i] = ip_arr[i].TrimStart('0');\n            if (ip_arr_new[i] == \"\") {\n                ip_arr_new[i] = \"0\";\n            }\n        }\n        return string.Join(\".\", ip_arr_new);",
    "        var ipArr = ip.Split('.');\n        var result = \"\";\n        foreach (var item in ipArr) {\n            var temp = item;\n            while (temp.Length > 0 && temp[0] == '0') {\n                temp = temp.Substring(1);\n            }\n            result += temp + \".\";\n        }\n        return result.Substring(0, result.Length - 1);",
    "        string[] parts = ip.Split('.');\n        string result = \"\";\n        for(int i = 0; i < parts.Length; i++) {\n            if(parts[i].Length > 1 && parts[i][0] == '0') {\n                result += parts[i].Substring(1) + \".\";\n            } else {\n                result += parts[i] + \".\";\n            }\n        }\n        return result.Substring(0, result.Length - 1);",
    "        string[] ip_parts = ip.Split('.');\n        string result = \"\";\n        for (int i = 0; i < ip_parts.Length; i++) {\n            if (ip_parts[i].Length > 1 && ip_parts[i][0] == '0') {\n                result += ip_parts[i].Substring(1);\n            } else {\n                result += ip_parts[i];\n            }\n            if (i != ip_parts.Length - 1) {\n                result += \".\";\n            }\n        }\n        return result;",
    "        var ipArray = ip.Split('.');\n        var result = new StringBuilder();\n        for (int i = 0; i < ipArray.Length; i++) {\n            var num = int.Parse(ipArray[i]);\n            if (num == 0) {\n                result.Append(\"0\");\n            } else {\n                result.Append(num);\n            }\n            if (i != ipArray.Length - 1) {\n                result.Append(\".\");\n            }\n        }\n        return result.ToString();",
    "        var parts = ip.Split('.');\n        var result = new List<string>();\n        foreach (var part in parts) {\n            result.Add(part.TrimStart('0'));\n        }\n        return string.Join(\".\", result);",
    "        string[] parts = ip.Split('.');\n        for (int i = 0; i < parts.Length; i++) {\n            parts[i] = parts[i].TrimStart('0');\n            if (parts[i] == \"\") parts[i] = \"0\";\n        }\n        return string.Join(\".\", parts);",
    "        var parts = ip.Split('.');\n        var sb = new StringBuilder();\n        for (int i = 0; i < parts.Length; i++) {\n            var part = parts[i];\n            if (part.Length > 1 && part[0] == '0') {\n                part = part.Substring(1);\n            }\n            sb.Append(part);\n            if (i != parts.Length - 1) {\n                sb.Append('.');\n            }\n        }\n        return sb.ToString();",
    "        string[] ip_split = ip.Split('.');\n        string[] ip_split_new = new string[4];\n        for (int i = 0; i < ip_split.Length; i++) {\n            ip_split_new[i] = ip_split[i].TrimStart('0');\n        }\n        return string.Join(\".\", ip_split_new);"
  ]
}