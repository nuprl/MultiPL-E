{
  "name": "mbpp_572_two_unique_nums",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (uniqueNums.Contains(num)) {\n                uniqueNums.Remove(num);\n            } else {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (counts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n            } else {\n                set.Remove(num);\n            }\n        }\n        foreach (var num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numsDict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (long num in numsDict.Keys) {\n            if (numsDict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var uniqueNumsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (uniqueNumsDict.ContainsKey(num)) {\n                uniqueNumsDict[num] += 1;\n            } else {\n                uniqueNumsDict[num] = 1;\n            }\n        }\n        foreach (var num in uniqueNumsDict.Keys) {\n            if (uniqueNumsDict[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;"
  ]
}