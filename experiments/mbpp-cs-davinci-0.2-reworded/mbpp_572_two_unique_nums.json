{
  "name": "mbpp_572_two_unique_nums",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (uniqueNums.Contains(num)) {\n                uniqueNums.Remove(num);\n            } else {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (counts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n            } else {\n                set.Remove(num);\n            }\n        }\n        foreach (var num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numsDict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (long num in numsDict.Keys) {\n            if (numsDict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var uniqueNumsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (uniqueNumsDict.ContainsKey(num)) {\n                uniqueNumsDict[num] += 1;\n            } else {\n                uniqueNumsDict[num] = 1;\n            }\n        }\n        foreach (var num in uniqueNumsDict.Keys) {\n            if (uniqueNumsDict[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numsCount = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numsCount.ContainsKey(num)) {\n                numsCount[num]++;\n            } else {\n                numsCount.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in numsCount) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        long xor = 0;\n        foreach (long num in nums) {\n            xor ^= num;\n        }\n        long rightMostBit = xor & ~(xor - 1);\n        long first = 0;\n        long second = 0;\n        foreach (long num in nums) {\n            if ((num & rightMostBit) != 0) {\n                first ^= num;\n            } else {\n                second ^= num;\n            }\n        }\n        result.Add(first);\n        result.Add(second);\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Create a new list to store the unique numbers\n        List<long> uniqueNums = new List<long>();\n        // Create a dictionary to store the number of times a number appears in the list\n        Dictionary<long, int> numCount = new Dictionary<long, int>();\n        // Iterate through the list of numbers\n        foreach (long num in nums) {\n            // If the number is not in the dictionary, add it\n            if (!numCount.ContainsKey(num)) {\n                numCount.Add(num, 1);\n            }\n            // If the number is in the dictionary, increment the count\n            else {\n                numCount[num]++;\n            }\n        }\n        // Iterate through the dictionary\n        foreach (KeyValuePair<long, int> num in numCount) {\n            // If the count is 1, add the number to the unique list\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        // Return the unique list\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (uniqueNums.Contains(num)) {\n                uniqueNums.Remove(num);\n            } else {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (var kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> res = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                res.Add(num);\n            }\n        }\n        return res;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                result.Add(num);\n                seen.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (set.Contains(num)) {\n                set.Remove(num);\n            } else {\n                set.Add(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numCount = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numCount.ContainsKey(num)) {\n                numCount[num]++;\n            } else {\n                numCount.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in numCount) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Create a list to hold the unique numbers\n        List<long> uniqueNums = new List<long>();\n        // Create a dictionary to hold the number of times each number appears\n        Dictionary<long, int> numCounts = new Dictionary<long, int>();\n        // Iterate through the list of numbers\n        foreach (long num in nums) {\n            // If the number is not in the dictionary, add it and set its count to 1\n            if (!numCounts.ContainsKey(num)) {\n                numCounts.Add(num, 1);\n            }\n            // Otherwise, increment the count of the number\n            else {\n                numCounts[num]++;\n            }\n        }\n        // Iterate through the dictionary\n        foreach (KeyValuePair<long, int> numCount in numCounts) {\n            // If the number appears only once, add it to the unique numbers list\n            if (numCount.Value == 1) {\n                uniqueNums.Add(numCount.Key);\n            }\n        }\n        // Return the list of unique numbers\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                uniqueNums.Add(num);\n                seen.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        foreach (var num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                unique.Add(num);\n                set.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        HashSet<long> numSet = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!numSet.Contains(num)) {\n                uniqueNums.Add(num);\n                numSet.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> entry in dict) {\n            if (entry.Value == 1) {\n                result.Add(entry.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Create a new list to store the unique numbers\n        List<long> uniqueNums = new List<long>();\n        // Create a dictionary to store the number of times a number appears in the list\n        Dictionary<long, int> numCounts = new Dictionary<long, int>();\n        // Iterate through the list of numbers\n        foreach (long num in nums) {\n            // If the number is already in the dictionary, increment the count\n            if (numCounts.ContainsKey(num)) {\n                numCounts[num]++;\n            }\n            // Otherwise, add the number to the dictionary with a count of 1\n            else {\n                numCounts.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary\n        foreach (KeyValuePair<long, int> pair in numCounts) {\n            // If the count is 1, add the number to the unique numbers list\n            if (pair.Value == 1) {\n                uniqueNums.Add(pair.Key);\n            }\n        }\n        // Return the unique numbers list\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numsCount = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numsCount.ContainsKey(num)) {\n                numsCount[num]++;\n            } else {\n                numsCount.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in numsCount) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numCounts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numCounts.ContainsKey(num)) {\n                numCounts[num]++;\n            } else {\n                numCounts[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (numCounts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        long xor = 0;\n        foreach (var num in nums) {\n            xor ^= num;\n        }\n        int rightmostBit = xor & ~(xor - 1);\n        long a = 0;\n        long b = 0;\n        foreach (var num in nums) {\n            if ((num & rightmostBit) != 0) {\n                a ^= num;\n            } else {\n                b ^= num;\n            }\n        }\n        return new List<long> { a, b };",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        foreach (long num in unique) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        long xor = 0;\n        foreach (long num in nums) {\n            xor ^= num;\n        }\n        long mask = xor & -xor;\n        foreach (long num in nums) {\n            if ((num & mask) == 0) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!unique.Contains(nums[i])) {\n                unique.Add(nums[i]);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (uniqueNums.Contains(num)) {\n                uniqueNums.Remove(num);\n            } else {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var num in dict) {\n            if (num.Value == 1) {\n                result.Add(num.Key);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (var kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n            } else {\n                set.Remove(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (set.Contains(num)) {\n                set.Remove(num);\n            } else {\n                set.Add(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        List<long> result = new List<long>();\n        foreach (long num in nums) {\n            if (result.Contains(num)) {\n                result.Remove(num);\n            } else {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (var kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        long xor = 0;\n        foreach (long num in nums) {\n            xor ^= num;\n        }\n        long mask = xor & (-xor);\n        long num1 = 0;\n        long num2 = 0;\n        foreach (long num in nums) {\n            if ((num & mask) == 0) {\n                num1 ^= num;\n            } else {\n                num2 ^= num;\n            }\n        }\n        uniqueNums.Add(num1);\n        uniqueNums.Add(num2);\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        var uniques = new List<long>();\n        foreach (var num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (long num in dict.Keys) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> uniqueNums = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var numCounts = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numCounts.ContainsKey(num)) {\n                numCounts[num]++;\n            } else {\n                numCounts[num] = 1;\n            }\n        }\n        foreach (var num in nums) {\n            if (numCounts[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!hs.Contains(num)) {\n                hs.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                uniques.Add(num);\n                seen.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach(long num in nums) {\n            if(dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach(KeyValuePair<long, int> pair in dict) {\n            if(pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (uniqueNums.Contains(nums[i])) {\n                uniqueNums.Remove(nums[i]);\n            } else {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> numsDict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in numsDict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        HashSet<long> uniqueSet = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!uniqueSet.Contains(num)) {\n                uniqueSet.Add(num);\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict.Keys) {\n            if (numsDict[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (counts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach(long num in nums) {\n            if(!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> entry in dict) {\n            if (entry.Value == 1) {\n                result.Add(entry.Key);\n            }\n        }\n        return result;",
    "        // Write your code here.\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach(long num in nums) {\n            if(dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach(KeyValuePair<long, int> kvp in dict) {\n            if(kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n            } else {\n                set.Remove(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in nums) {\n            if (hs.Contains(num)) {\n                hs.Remove(num);\n            } else {\n                hs.Add(num);\n            }\n        }\n        foreach (long num in hs) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (uniqueNums.Contains(nums[i])) {\n                uniqueNums.Remove(nums[i]);\n            } else {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in nums) {\n            if(!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach(long num in nums) {\n            if(!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in counts) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        long xor = 0;\n        foreach (long num in nums) {\n            xor ^= num;\n        }\n        long mask = xor & (-xor);\n        foreach (long num in nums) {\n            if ((num & mask) == 0) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var result = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                result.Add(num.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        // We can use a hashset to keep track of the unique numbers\n        HashSet<long> uniqueNums = new HashSet<long>();\n        // We can use a list to keep track of the duplicate numbers\n        List<long> duplicateNums = new List<long>();\n        // We can iterate through the list of numbers\n        foreach (long num in nums) {\n            // If the number is not in the hashset, we can add it\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n            // Otherwise, we can add it to the list of duplicate numbers\n            else {\n                duplicateNums.Add(num);\n            }\n        }\n        // We can return the list of duplicate numbers\n        return duplicateNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        var uniqueNums = new List<long>();\n        var uniqueNumsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (uniqueNumsDict.ContainsKey(num)) {\n                uniqueNumsDict[num]++;\n            } else {\n                uniqueNumsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in uniqueNumsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> twoUniqueNums = new List<long>();\n        long xor = 0;\n        foreach (long num in nums) {\n            xor ^= num;\n        }\n        long mask = xor & -xor;\n        long first = 0;\n        foreach (long num in nums) {\n            if ((num & mask) == 0) {\n                first ^= num;\n            }\n        }\n        twoUniqueNums.Add(first);\n        twoUniqueNums.Add(xor ^ first);\n        return twoUniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;"
  ]
}