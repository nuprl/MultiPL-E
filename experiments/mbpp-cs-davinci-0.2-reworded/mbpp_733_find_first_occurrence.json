{
  "name": "mbpp_733_find_first_occurrence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    public static long FindFirstOccurrence(List<long> A, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)5L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (1L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (2L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (6L)) == (4L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function.\n        return -1;",
    "        // TODO - you fill in here.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] == x) {\n                if (mid == 0 || A[(int)mid - 1] != x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            } else if (A[(int)mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        if (A[(int)lo] == x) {\n            return lo;\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0, hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (A[(int)mid] < x) {\n                lo = mid + 1;\n            } else if (A[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                if (mid == 0 || A[(int)mid - 1] != x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] < x) {\n                lo = mid + 1;\n            } else if (A[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                if (mid == 0 || A[(int)mid - 1] != x) {\n                    return mid;\n                }\n                hi = mid - 1;\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long l = 0;\n        long r = A.Count - 1;\n        long result = -1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A[(int)m] >= x) {\n                result = m;\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[(int)mid] == x) {\n                if (mid == 0 || A[(int)mid - 1] != x) {\n                    return mid;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;",
    "        // Find the first occurrence of x in A.\n        // If x does not occur in A, return -1.\n        //\n        // Time complexity: O(log n)\n        // Space complexity: O(1)\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 3\n        // return 3\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 5\n        // return -1\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 0\n        // return -1\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 1\n        // return 0\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 4\n        // return 6\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 2\n        // return 1\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 3\n        // return 3\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 3\n        // return 3\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 3\n        // return 3\n        //\n        // Example:\n        // A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n        // x = 3\n        // return 3\n        //\n        // Example:\n",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] < x) {\n                lo = mid + 1;\n            } else if (A[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                if (mid == 0 || A[(int)mid - 1] < x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        return FindFirstOccurrence(A, x, 0, A.Count - 1);",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0, right = A.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[mid] == x) {\n                if (mid == 0 || A[mid - 1] != x) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else if (A[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (A[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        if (A[left] == x) {\n            return left;\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return A[lo] == x ? lo : -1;",
    "        // TODO - you fill in here.\n        return -1;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO - you fill in here.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        int low = 0;\n        int high = A.Count - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A[mid] == x) {\n                if (mid == 0 || A[mid - 1] != x) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else if (A[mid] < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            }\n            else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO - you fill in here.\n        return -1;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long l = 0;\n        long r = A.Count - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (A[m] == x) {\n                if (m == 0 || A[m - 1] != x) {\n                    return m;\n                }\n                r = m - 1;\n            } else if (A[m] > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return -1;",
    "        long l = 0;\n        long r = A.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (A[m] < x) {\n                l = m + 1;\n            }\n            else {\n                r = m;\n            }\n        }\n        if (A[l] == x) {\n            return l;\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        int left = 0;\n        int right = A.Count - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[mid] < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return A[lo] == x ? lo : -1;",
    "        // TODO: Implement this function.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long start = 0;\n        long end = A.Count - 1;\n        long result = -1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                end = mid - 1;\n            } else if (A[(int)mid] < x) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO - you fill in here.\n        return 0;",
    "        // TODO - you fill in here.\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0, high = A.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                if (mid == 0 || A[(int)mid - 1] != x)\n                    return mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // TODO - you fill in here.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (x < A[(int)mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (x < A[(int)mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function.\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long start = 0;\n        long end = A.Count - 1;\n        long result = -1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                end = mid - 1;\n            } else if (A[mid] > x) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0, hi = A.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[mid] < x)\n                lo = mid + 1;\n            else\n                hi = mid;\n        }\n        if (A[lo] == x)\n            return lo;\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO - you fill in here.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0, hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] < x) {\n                lo = mid + 1;\n            } else if (A[(int)mid] > x) {\n                hi = mid - 1;\n            } else {\n                if (mid == 0 || A[(int)mid - 1] < x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function.\n        return 0;",
    "        return FindFirstOccurrence(A, 0, A.Count - 1, x);",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        int left = 0;\n        int right = A.Count - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (A[mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO - you fill in here.\n        return 0;",
    "        // TODO - you fill in here.\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A[(int)mid] > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0, hi = A.Count - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] < x) lo = mid + 1;\n            else hi = mid - 1;\n        }\n        return lo < A.Count && A[(int)lo] == x ? lo : -1;",
    "        int lo = 0;\n        int hi = A.Count - 1;\n        int result = -1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (A[mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // TODO: Implement this function\n        return 0;",
    "        long low = 0;\n        long high = A.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A[(int)mid] == x) {\n                if (mid == 0 || A[(int)mid - 1] != x) {\n                    return mid;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if (A[(int)mid] < x) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long lo = 0;\n        long hi = A.Count - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A[(int)mid] >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.Count - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (A[(int)mid] == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A[(int)mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;",
    "        // Implement this placeholder.\n        return 0;"
  ]
}