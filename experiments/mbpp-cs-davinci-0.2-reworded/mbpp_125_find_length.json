{
  "name": "mbpp_125_find_length",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0;\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                z++;\n            } else {\n                o++;\n            }\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zc = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int oc = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(zc - oc));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                count++;\n            }\n            left[i] = count;\n        }\n        count = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr[i] == 1) {\n                count++;\n            }\n            right[i] = count;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, Math.Abs(left[i] - right[i]));\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        var max = 0L;\n        var count = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            zeros.Add(count);\n        }\n        count = 0;\n        for (var i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            ones.Add(count);\n        }\n        ones.Reverse();\n        for (var i = 0; i < str.Length; i++) {\n            max = Math.Max(max, Math.Abs(zeros[i] - ones[i]));\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        var zero = 0;\n        var one = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, i + 1);\n            }\n        }\n        for (var i = 0; i < str.Length - 1; i++) {\n            if (str[i] == '0') {\n                zero--;\n            } else {\n                one--;\n            }\n            if (str[i + 1] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, str.Length - i - 1);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1] + 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            max = Math.Max(max, count[i]);\n        }\n        int min = count[0];\n        for (int i = 1; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min + 1;",
    "        var zeros = new long[str.Length + 1];\n        var ones = new long[str.Length + 1];\n        for (int i = 0; i < str.Length; i++) {\n            zeros[i + 1] = zeros[i] + (str[i] == '0' ? 1 : 0);\n            ones[i + 1] = ones[i] + (str[i] == '1' ? 1 : 0);\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i + 1; j <= str.Length; j++) {\n                max = Math.Max(max, Math.Abs(zeros[j] - zeros[i]) + Math.Abs(ones[j] - ones[i]));\n            }\n        }\n        return max;",
    "        int maxLength = 0;\n        int count0 = 0;\n        int count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n        }\n        long count1 = 0;\n        long count2 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count1++;\n            } else {\n                count2++;\n            }\n            if (count1 == count2) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n        }\n        return maxLength;",
    "        // Write your code here\n        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = zeros[i - 1];\n            ones[i] = ones[i - 1];\n            if (str[i] == '0') {\n                zeros[i]++;\n            } else {\n                ones[i]++;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long z = zeros[j];\n                long o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int n = str.Length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        // To store counts of zeroes in\n        // left[] and right[]\n        int zeroCount = 0;\n\n        // To store counts of ones in\n        // left[] and right[]\n        int oneCount = 0;\n\n        // Traverse str from left to right\n        for (int i = 0; i < n; i++) {\n            // If current character is '0'\n            if (str[i] == '0') {\n                zeroCount++;\n            }\n\n            // If current character is '1'\n            else {\n                oneCount++;\n            }\n\n            // Store counts of zeroes and ones\n            // in left[]\n            left[i] = zeroCount;\n            right[i] = oneCount;\n        }\n\n        // Traverse str from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            // If current character is '0'\n            if (str[i] == '0') {\n                zeroCount--;\n            }\n\n            // If current character is '1'\n            else {\n                oneCount--;\n            }\n\n            // If both left[] and right[] have\n            // equal number of zeroes and ones\n            if (left[i] == right[i]) {\n                result = Math.Max(result, i + 1);\n            }\n        }\n\n        return result;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, count[0] - count[1]);\n            if (count[0] == count[1]) {\n                max_diff = Math.Max(max_diff, count[0] - count[1]);\n                count[0] = 0;\n                count[1] = 0;\n            }\n        }\n        return max_diff;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n                if (i > 0) {\n                    zeros[i] += zeros[i - 1];\n                }\n            }\n            if (str[i] == '1') {\n                ones[i] = 1;\n                if (i > 0) {\n                    ones[i] += ones[i - 1];\n                }\n            }\n        }\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                var z = zeros[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                }\n                var o = ones[j];\n                if (i > 0) {\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                arr[i] = -1;\n            } else {\n                arr[i] = 1;\n            }\n        }\n        long max = 0;\n        long sum = 0;\n        Dictionary<long, int> map = new Dictionary<long, int>();\n        map.Add(0, -1);\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n            if (map.ContainsKey(sum)) {\n                max = Math.Max(max, i - map[sum]);\n            } else {\n                map.Add(sum, i);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int[] brr = new int[n];\n        int[] crr = new int[n];\n        int[] drr = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                arr[i] = 1;\n            }\n            if (str[i] == '1') {\n                brr[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            arr[i] += arr[i - 1];\n            brr[i] += brr[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            crr[i] = arr[i] - brr[i];\n            drr[i] = brr[i] - arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                max = Math.Max(max, Math.Abs(crr[j] - crr[i]));\n                max = Math.Max(max, Math.Abs(drr[j] - drr[i]));\n            }\n        }\n        return max;",
    "        // Initialize result \n        long result = 0;\n\n        // Initialize left and right \n        int left = 0, right = 0;\n\n        // Traverse through the string \n        // Keep incrementing right and update result \n        // If 0 is found, increment left \n        for (int i = 0; i < str.Length; i++) {\n            // If 0 is found, increment left \n            if (str[i] == '0') {\n                left++;\n            }\n            else {\n                right++;\n            }\n\n            // Update result if required \n            if (left == right) {\n                result = Math.Max(result, right * 2);\n            }\n            else if (right > left) {\n                left = right = 0;\n            }\n        }\n\n        // If there exists no such string \n        // where number of 0's is equal to \n        // number of 1's \n        if (result == 0) {\n            return -1;\n        }\n\n        // Return result \n        return result;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        map.Add(0, -1);\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - map[sum[i]]);\n            } else {\n                map.Add(sum[i], i);\n            }\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        right[n - 1] = arr[n - 1];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int l = left[i - 1];\n                int r = right[j + 1];\n                int m = Math.Abs(l - r);\n                ans = Math.Max(ans, m);\n            }\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int count0 = 0;\n        int count1 = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            count[i] = count0 - count1;\n            max = Math.Max(max, count[i]);\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                one[i] = one[i - 1] + 1;\n                zero[i] = zero[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = zero[j] - zero[i] + (str[i] == '0' ? 1 : 0);\n                int ones = one[j] - one[i] + (str[i] == '1' ? 1 : 0);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                zero[i] = zero[i - 1];\n                one[i] = one[i - 1] + 1;\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = zero[j] - (i == 0 ? 0 : zero[i - 1]);\n                int ones = one[j] - (i == 0 ? 0 : one[i - 1]);\n                ans = Math.Max(ans, Math.Abs(zeros - ones));\n            }\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> d = new Dictionary<int, int>();\n        d[0] = -1;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (d.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - d[sum[i]]);\n            } else {\n                d[sum[i]] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var max = 0;\n        var count = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n            max = Math.Max(max, count);\n        }\n        if (max == 0) {\n            return n;\n        }\n        int[] arr2 = new int[n];\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr[i] - min;\n            min = Math.Min(min, arr[i]);\n        }\n        int[] arr3 = new int[n];\n        min = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            arr3[i] = arr[i] - min;\n            min = Math.Min(min, arr[i]);\n        }\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr4[i] = Math.Max(arr2[i], arr3[i]);\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans += arr4[i];\n        }\n        return ans;",
    "        // We can use a sliding window approach to solve this problem.\n        // We will keep track of the number of 0s and 1s in the current window.\n        // We will also keep track of the maximum difference between the number of 0s and 1s.\n        // We will also keep track of the maximum length of the window.\n        // We will start with a window of length 1 and keep increasing the window size.\n        // We will keep moving the window until we reach the end of the string.\n        // We will keep track of the number of 0s and 1s in the current window.\n        // We will also keep track of the maximum difference between the number of 0s and 1s.\n        // We will also keep track of the maximum length of the window.\n        // We will start with a window of length 1 and keep increasing the window size.\n        // We will keep moving the window until we reach the end of the string.\n        int zeroCount = 0;\n        int oneCount = 0;\n        int maxDiff = 0;\n        int maxLength = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                if (str[j] == '0') {\n                    zeroCount++;\n                } else {\n                    oneCount++;\n                }\n                int diff = Math.Abs(zeroCount - oneCount);\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                    maxLength = j - i + 1;\n                }\n            }\n            zeroCount = 0;\n            oneCount = 0;\n        }\n        return maxLength;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count0 = new int[n];\n        int[] count1 = new int[n];\n        if (str[0] == '0') {\n            count0[0] = 1;\n        } else {\n            count1[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                count0[i] = count0[i - 1] + 1;\n                count1[i] = count1[i - 1];\n            } else {\n                count0[i] = count0[i - 1];\n                count1[i] = count1[i - 1] + 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = count0[j] - (i == 0 ? 0 : count0[i - 1]);\n                int ones = count1[j] - (i == 0 ? 0 : count1[i - 1]);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxCount = Math.Max(maxCount, count[str[i] - '0']);\n            currLen++;\n            if (i + 1 < n) {\n                int diff = Math.Abs(count[0] - count[1]);\n                if (diff == 0) {\n                    maxLen = Math.Max(maxLen, currLen);\n                    currLen = 0;\n                    count[0] = 0;\n                    count[1] = 0;\n                    count[str[i + 1] - '0']++;\n                    maxCount = Math.Max(maxCount, count[str[i + 1] - '0']);\n                    currLen++;\n                    prevDiff = 0;\n                } else if (prevDiff == diff) {\n                    maxLen = Math.Max(maxLen, currLen - 1);\n                    currLen = 1;\n                    count[0] = 0;\n                    count[1] = 0;\n                    count[str[i] - '0']++;\n                    maxCount = Math.Max(maxCount, count[str[i] - '0']);\n                    prevDiff = diff;\n                } else {\n                    prevDiff = diff;\n                }\n            }\n        }\n        maxLen = Math.Max(maxLen, currLen);\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        // Write your code here\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Write your code here\n        int max = 0;\n        int count = 0;\n        for(int i = 0; i < str.Length; i++) {\n            if(str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if(count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                ones[i] = ones[i - 1] + 1;\n                zeros[i] = zeros[i - 1];\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        // Initialize result\n        long result = 0;\n        int n = str.Length;\n        // Create a count array to store count of 0s and 1s.\n        int[] count = new int[2];\n        // Initialize count array with 0\n        count[0] = 0;\n        count[1] = 0;\n        // Traverse through the string\n        for (int i = 0; i < n; i++) {\n            // If current character is '0'\n            if (str[i] == '0')\n                count[0]++;\n            // If current character is '1'\n            else\n                count[1]++;\n            // If there are more 0s than 1s or vice versa\n            if (count[0] == count[1])\n                result = Math.Max(result, i + 1);\n        }\n        // Traverse through the string again\n        for (int i = 0; i < n - 1; i++) {\n            // If current character is '0'\n            if (str[i] == '0')\n                count[0]--;\n            // If current character is '1'\n            else\n                count[1]--;\n            // If there are more 0s than 1s or vice versa\n            if (count[0] == count[1])\n                result = Math.Max(result, n - i - 1);\n        }\n        return result;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Initialize result\n        long result = 0;\n        // Initialize left and right indexes\n        int n = str.Length;\n        int i = 0, j = 0;\n        // Initialize left and right counts\n        int count0 = 0, count1 = 0;\n        // Traverse through the string\n        while (j < n) {\n            // If current character is '0', increment count0\n            if (str[j] == '0')\n                count0++;\n            // If current character is '1', increment count1\n            else if (str[j] == '1')\n                count1++;\n            // If there are more 0s than 1s, update result\n            if (count0 - count1 > 0) {\n                result = Math.Max(result, j - i);\n                // If there are more 1s than 0s, update result\n            } else if (count1 - count0 > 0) {\n                result = Math.Max(result, j - i);\n                // If there are same number of 0s and 1s, update result\n            } else {\n                result = Math.Max(result, j - i + 1);\n            }\n            // Increment j\n            j++;\n        }\n        return result;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        right[n - 1] = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int l = i == 0 ? 0 : left[i - 1];\n                int r = j == n - 1 ? 0 : right[j + 1];\n                int zeros = l + r;\n                int ones = (j - i + 1) - zeros;\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n            else if (prevDiff == maxDiff - 1) {\n                maxLen = Math.Max(maxLen, currLen - 1);\n            }\n            if (count[0] == count[1]) {\n                currLen = 0;\n            }\n            prevDiff = maxDiff;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long maxLen = 0;\n        long count0 = 0;\n        long count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLen = Math.Max(maxLen, count0 + count1);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLen = Math.Max(maxLen, count0 + count1);\n            }\n        }\n        return maxLen;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] pre = new int[n];\n        pre[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            pre[i] = pre[i - 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int ones = pre[j];\n                if (i > 0) {\n                    ones -= pre[i - 1];\n                }\n                int zeros = j - i + 1 - ones;\n                max = Math.Max(max, Math.Abs(ones - zeros));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = Math.Max(maxLength, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        // Write your code here\n        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n            } else {\n                ones[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            zeros[i] += zeros[i - 1];\n            ones[i] += ones[i - 1];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j];\n                int o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int max = 0;\n        int count = 0;\n        int n = str.Length;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        left[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            left[i] = left[i - 1] + arr[i];\n        }\n        right[n - 1] = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int l = left[i - 1];\n                int r = right[j + 1];\n                int c = 0;\n                if (i == 0) {\n                    c = r;\n                } else if (j == n - 1) {\n                    c = l;\n                } else {\n                    c = l + r;\n                }\n                max = Math.Max(max, c);\n            }\n        }\n        return max;",
    "        int[] arr = new int[str.Length];\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n        }\n        Dictionary<int, int> dict = new Dictionary<int, int>();\n        int max = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            if (dict.ContainsKey(arr[i])) {\n                max = Math.Max(max, i - dict[arr[i]]);\n            } else {\n                dict.Add(arr[i], i);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0;\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                z++;\n            } else {\n                o++;\n            }\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zc = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                int oc = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                max = Math.Max(max, Math.Abs(zc - oc));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int prevDiff = 0;\n        int currDiff;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currDiff = count[0] - count[1];\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (prevDiff == currDiff) {\n                maxLen = Math.Max(maxLen, i - 1);\n            }\n            prevDiff = currDiff;\n        }\n        return maxLen;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] prefix = new int[n];\n        prefix[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix[i] = prefix[i - 1] + arr[i];\n        }\n        int[] suffix = new int[n];\n        suffix[n - 1] = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            suffix[i] = suffix[i + 1] + arr[i];\n        }\n        int[] prefix1 = new int[n];\n        prefix1[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix1[i] = prefix1[i - 1] + (1 - arr[i]);\n        }\n        int[] suffix1 = new int[n];\n        suffix1[n - 1] = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            suffix1[i] = suffix1[i + 1] + (1 - arr[i]);\n        }\n        int[] prefix2 = new int[n];\n        prefix2[0] = 1 - arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix2[i] = prefix2[i - 1] + arr[i];\n        }\n        int[] suffix2 = new int[n];\n        suffix2[n - 1] = 1 - arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            suffix2[i] = suffix2[i + 1] + arr[i];\n        }\n        int[] prefix3 = new int[n];\n        prefix3[0] = 1 - arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix3[i] =",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                ones[i] = ones[i - 1] + 1;\n                zeros[i] = zeros[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j] - zeros[i] + (str[i] == '0' ? 1 : 0);\n                int o = ones[j] - ones[i] + (str[i] == '1' ? 1 : 0);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = Math.Max(maxLength, str.Length - i);\n            }\n        }\n        return maxLength;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int n = str.Length;\n        int left = 0, right = 0;\n\n        // Initialize left and right frequency\n        int[] freq = new int[2];\n        freq[str[0] - '0']++;\n\n        // Start from second element\n        for (right = 1; right < n; right++) {\n            // Increment frequency of current element\n            freq[str[right] - '0']++;\n\n            // If 0s and 1s are becoming same, then update result\n            if (freq[0] == freq[1])\n                result = Math.Max(result, right - left + 1);\n\n            // If the frequency of 0s and 1s becomes unequal, then\n            // remove elements from left side\n            else if (freq[0] > freq[1]) {\n                while (freq[0] > freq[1]) {\n                    freq[str[left] - '0']--;\n                    left++;\n                }\n            }\n        }\n\n        // Return result\n        return result;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '1' ? 1 : -1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        int[] min = new int[n];\n        min[0] = sum[0];\n        for (int i = 1; i < n; i++) {\n            min[i] = Math.Min(min[i - 1], sum[i]);\n        }\n        int[] max = new int[n];\n        max[0] = sum[0];\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.Max(max[i - 1], sum[i]);\n        }\n        int[] minIndex = new int[n];\n        minIndex[0] = 0;\n        for (int i = 1; i < n; i++) {\n            if (min[i] < min[minIndex[i - 1]]) {\n                minIndex[i] = i;\n            } else {\n                minIndex[i] = minIndex[i - 1];\n            }\n        }\n        int[] maxIndex = new int[n];\n        maxIndex[0] = 0;\n        for (int i = 1; i < n; i++) {\n            if (max[i] > max[maxIndex[i - 1]]) {\n                maxIndex[i] = i;\n            } else {\n                maxIndex[i] = maxIndex[i - 1];\n            }\n        }\n        int[] minIndex2 = new int[n];\n        minIndex2[n - 1] = n - 1;\n        for (int i = n - 2; i >= 0; i--) {\n            if (min[i] < min[minIndex2[i + 1]]) {\n                minIndex2[",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            maxDiff = Math.Max(maxDiff, count[0] - count[1]);\n            if (maxDiff == 0) {\n                maxLen = i + 1;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                ones[i] = ones[i - 1] + 1;\n                zeros[i] = zeros[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Create a count array to store count of 0s and 1s\n        int[] count = new int[2];\n\n        // Initialize result\n        long result = 0;\n\n        // Initialize count of 0s and 1s\n        count[0] = 0;\n        count[1] = 0;\n\n        // Traverse through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If current character is '0'\n            if (str[i] == '0')\n                count[0]++;\n            else // Else if current character is '1'\n                count[1]++;\n\n            // Update result if count of 0s is more than count of 1s\n            if (count[0] > count[1])\n                result = Math.Max(result, i + 1);\n\n            // Else update result if count of 1s is more than count of 0s\n            else if (count[1] > count[0])\n                result = Math.Max(result, i + 1);\n        }\n\n        return result;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, Math.Abs(curr_diff));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0;\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                z++;\n            } else {\n                o++;\n            }\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long zc = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long oc = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                long diff = Math.Abs(zc - oc);\n                if (diff > max) {\n                    max = diff;\n                }\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1] + 1;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        var sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        var map = new Dictionary<int, int>();\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - map[sum[i]]);\n            } else {\n                map[sum[i]] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n            arr[i] = count;\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        // Initialize result \n        long result = 0;\n\n        // Initialize left and right \n        int left = 0, right = 0;\n\n        // Traverse through the string \n        // Keep incrementing right and \n        // update result if required \n        while (right < str.Length) {\n            // If str[right] is '0' \n            if (str[right] == '0') {\n                // Increment right \n                right++;\n            }\n            else {\n                // If str[right] is '1' \n                // Increment left \n                left++;\n\n                // Update result if required \n                result = Math.Max(result, left + right);\n\n                // Increment right \n                right++;\n            }\n        }\n\n        // Return result \n        return result;",
    "        // Write your code here\n        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int max_count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                max_count--;\n            } else {\n                max_count++;\n            }\n            if (max_count == 0) {\n                max = i + 1;\n            } else if (count[max_count + n / 2] > 0) {\n                max = Math.Max(max, i - count[max_count + n / 2]);\n            } else {\n                count[max_count + n / 2] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int zeros = 0;\n        int ones = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            count[i] = ones - zeros;\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(count[i])) {\n                max = Math.Max(max, i - map[count[i]]);\n            } else {\n                map.Add(count[i], i);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n            max = Math.Max(max, count);\n        }\n        if (max == 0) {\n            return n;\n        }\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr[i] + i;\n        }\n        Array.Sort(arr2);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j < n && arr2[i] == arr2[j]) {\n                j++;\n            }\n            ans = Math.Max(ans, j - i);\n            i = j - 1;\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros.Add(i);\n            } else {\n                ones.Add(i);\n            }\n        }\n        if (zeros.Count == 0 || ones.Count == 0) {\n            return -1;\n        }\n        var zi = 0;\n        var oi = 0;\n        var max = 0;\n        while (zi < zeros.Count && oi < ones.Count) {\n            var z = zeros[zi];\n            var o = ones[oi];\n            if (z < o) {\n                max = Math.Max(max, o - z);\n                zi++;\n            } else {\n                max = Math.Max(max, z - o);\n                oi++;\n            }\n        }\n        return max;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < str.Length; i++) {\n            zeros[i] = zeros[i - 1] + (str[i] == '0' ? 1 : 0);\n            ones[i] = ones[i - 1] + (str[i] == '1' ? 1 : 0);\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                long diff = Math.Abs(z - o);\n                if (diff > max) {\n                    max = diff;\n                }\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the current difference\n        long currentDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 0\n            if (str[i] == '0') {\n                // Decrement the current difference\n                currentDiff--;\n            }\n            // Else if the current character is a 1\n            else if (str[i] == '1') {\n                // Increment the current difference\n                currentDiff++;\n            }\n            // If the current difference is less than 0\n            if (currentDiff < 0) {\n                // Set the current difference to 0\n                currentDiff = 0;\n            }\n            // If the current difference is greater than the maximum difference\n            if (currentDiff > maxDiff) {\n                // Set the maximum difference to the current difference\n                maxDiff = currentDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n            if (count > 0) {\n                count = 0;\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int max = 0;\n        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n            max = Math.Max(max, count);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, arr[i]);\n        }\n        return max - min;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int curr = sum[j] - (i == 0 ? 0 : sum[i - 1]);\n                max = Math.Max(max, Math.Abs(curr));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = zeros[i - 1];\n            ones[i] = ones[i - 1];\n            if (str[i] == '0') {\n                zeros[i]++;\n            } else {\n                ones[i]++;\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j];\n                int o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var zeros = new int[str.Length];\n        var ones = new int[str.Length];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (var i = 1; i < str.Length; i++) {\n            zeros[i] = str[i] == '0' ? zeros[i - 1] + 1 : zeros[i - 1];\n            ones[i] = str[i] == '1' ? ones[i - 1] + 1 : ones[i - 1];\n        }\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            for (var j = i; j < str.Length; j++) {\n                var z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                var o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        int currDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currDiff = count[0] - count[1];\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (maxDiff == currDiff) {\n                maxLen = Math.Max(maxLen, i + 1);\n            } else if (Math.Abs(currDiff) > Math.Abs(maxDiff)) {\n                maxLen = i + 1;\n                maxDiff = currDiff;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = (str[i] == '0') ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (map.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - map[sum[i]]);\n            } else {\n                map[sum[i]] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var n = str.Length;\n        var count = 0;\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var n = str.Length;\n        var count = 0;\n        var max = 0;\n        for (var i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        // Create a count array and initialize all values as 0\n        int[] count = new int[2];\n\n        // Consider all substrings beginning with str[i]\n        int n = str.Length;\n        for (int i = 0; i < n; i++) {\n            // Find the difference of number of 0s and 1s\n            // in current substring.\n            if (str[i] == '0')\n                count[0]++;\n            else\n                count[1]++;\n        }\n\n        // Return the maximum difference\n        return Math.Abs(count[0] - count[1]);",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n                ones[i] = 0;\n            } else {\n                zeros[i] = 0;\n                ones[i] = 1;\n            }\n        }\n        for (int i = 1; i < str.Length; i++) {\n            zeros[i] += zeros[i - 1];\n            ones[i] += ones[i - 1];\n        }\n        var max = 0L;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                var z = zeros[j] - (i > 0 ? zeros[i - 1] : 0);\n                var o = ones[j] - (i > 0 ? ones[i - 1] : 0);\n                var diff = Math.Abs(z - o);\n                if (diff > max) {\n                    max = diff;\n                }\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Write your code here\n        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = zeros[i - 1];\n            ones[i] = ones[i - 1];\n            if (str[i] == '0') {\n                zeros[i]++;\n            } else {\n                ones[i]++;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j];\n                int o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                one[i] = one[i - 1] + 1;\n                zero[i] = zero[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = zero[j] - zero[i] + (str[i] == '0' ? 1 : 0);\n                int ones = one[j] - one[i] + (str[i] == '1' ? 1 : 0);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count0 = new int[n];\n        int[] count1 = new int[n];\n        int[] diff = new int[n];\n        count0[0] = str[0] == '0' ? 1 : 0;\n        count1[0] = str[0] == '1' ? 1 : 0;\n        diff[0] = count0[0] - count1[0];\n        for (int i = 1; i < n; i++) {\n            count0[i] = count0[i - 1] + (str[i] == '0' ? 1 : 0);\n            count1[i] = count1[i - 1] + (str[i] == '1' ? 1 : 0);\n            diff[i] = count0[i] - count1[i];\n        }\n        int min = 0;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (diff[i] < diff[min]) {\n                min = i;\n            }\n            if (diff[i] > diff[max]) {\n                max = i;\n            }\n        }\n        return max - min + 1;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros.Add(i);\n            } else {\n                ones.Add(i);\n            }\n        }\n        var max = 0;\n        foreach (var zero in zeros) {\n            var one = ones.BinarySearch(zero);\n            if (one < 0) {\n                one = ~one;\n            }\n            if (one < ones.Count) {\n                max = Math.Max(max, ones[one] - zero);\n            }\n            if (one > 0) {\n                max = Math.Max(max, zero - ones[one - 1]);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n                ones[i] = 0;\n            } else {\n                zeros[i] = 0;\n                ones[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            zeros[i] += zeros[i - 1];\n            ones[i] += ones[i - 1];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j];\n                int o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Write your code here\n        var max = 0L;\n        var count = 0L;\n        var zero = 0L;\n        var one = 0L;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, i + 1);\n            }\n        }\n        for (var i = 0; i < str.Length - 1; i++) {\n            if (str[i] == '0') {\n                zero--;\n            } else {\n                one--;\n            }\n            if (str[i + 1] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, str.Length - i - 1);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int maxCount = 0;\n        int prevDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxCount = Math.Max(maxCount, count[str[i] - '0']);\n            int minCount = currLen - maxCount;\n            int currDiff = Math.Abs(count[0] - count[1]);\n            if (currDiff == 0) {\n                maxLen = Math.Max(maxLen, currLen);\n            } else if (prevDiff == currDiff) {\n                maxLen = Math.Max(maxLen, currLen - 1);\n            }\n            prevDiff = currDiff;\n        }\n        return maxLen;",
    "        var max = 0;\n        var count = 0;\n        var zeros = 0;\n        var ones = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            var diff = Math.Abs(zeros - ones);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Create a variable to store the current difference\n        long currDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 0, decrement the current difference\n            if (str[i] == '0') {\n                currDiff--;\n            }\n            // If the current character is a 1, increment the current difference\n            else {\n                currDiff++;\n            }\n            // If the current difference is less than 0, set it to 0\n            if (currDiff < 0) {\n                currDiff = 0;\n            }\n            // If the current difference is greater than the maximum difference, set the maximum difference to the current difference\n            if (currDiff > maxDiff) {\n                maxDiff = currDiff;\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int min = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = 1;\n            } else {\n                count[i] = -1;\n            }\n            if (i == 0) {\n                max = count[i];\n                min = count[i];\n            } else {\n                max = Math.Max(max + count[i], count[i]);\n                min = Math.Min(min + count[i], count[i]);\n            }\n            maxDiff = Math.Max(maxDiff, max - min);\n        }\n        return maxDiff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        // Create a hash table to store the number of 0s and 1s in each sub-string\n        Dictionary<string, int[]> table = new Dictionary<string, int[]>();\n        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n        // Iterate through each character in the string\n        for (int i = 0; i < str.Length; i++) {\n            // Create a variable to store the number of 0s and 1s in the current sub-string\n            int[] nums = new int[2];\n            // Iterate through each character in the string starting from the current character\n            for (int j = i; j < str.Length; j++) {\n                // Increment the number of 0s or 1s in the current sub-string\n                nums[str[j] - '0']++;\n                // Create a string to store the current sub-string\n                string sub = str.Substring(i, j - i + 1);\n                // If the current sub-string is not in the hash table, add it and its number of 0s and 1s\n                if (!table.ContainsKey(sub)) {\n                    table.Add(sub, nums);\n                }\n                // Calculate the difference between the number of 0s and 1s in the current sub-string\n                long diff = Math.Abs(nums[0] - nums[1]);\n                // If the difference is greater than the maximum difference, update the maximum difference\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                }\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1] + 1;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff == 0) {\n                maxLen = i + 1;\n            }\n            else {\n                for (int j = i + 1; j < n; j++) {\n                    count[str[j] - '0']++;\n                    curr_diff = count[0] - count[1];\n                    if (curr_diff == 0) {\n                        maxLen = Math.Max(maxLen, j - i + 1);\n                        break;\n                    }\n                }\n            }\n            count[0] = 0;\n            count[1] = 0;\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count--;\n            } else {\n                count++;\n            }\n            arr[i] = count;\n            max = Math.Max(max, count);\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.Min(min, arr[i]);\n        }\n        return max - min;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            arr[i] = count;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] == arr[j]) {\n                    max = Math.Max(max, j - i);\n                }\n            }\n        }\n        return max;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n                ones[i] = 0;\n            } else {\n                zeros[i] = 0;\n                ones[i] = 1;\n            }\n        }\n        for (int i = 1; i < str.Length; i++) {\n            zeros[i] += zeros[i - 1];\n            ones[i] += ones[i - 1];\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count0 = 0;\n        long count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                max = Math.Max(max, count0 + count1);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                max = Math.Max(max, count0 + count1);\n            }\n        }\n        return max;",
    "        // Create a count array to store count of 0s and 1s\n        int[] count = new int[2];\n        // Initialize result\n        long result = 0;\n        // Initialize count of 0s and 1s\n        count[0] = 0;\n        count[1] = 0;\n        // Traverse the given string\n        for (int i = 0; i < str.Length; i++) {\n            // If current character is '0'\n            if (str[i] == '0')\n                count[0]++;\n            // If current character is '1'\n            else\n                count[1]++;\n            // Update result if count of 0s is more than count of 1s\n            if (count[0] > count[1])\n                result = Math.Max(result, i + 1);\n            // Else update result if count of 1s is more than count of 0s\n            else if (count[1] > count[0])\n                result = Math.Max(result, i + 1);\n        }\n        // Return result\n        return result;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int count0 = 0;\n        int count1 = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            count[i] = count0 - count1;\n            max = Math.Max(max, count0 - count1);\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = str[i] == '0' ? zeros[i - 1] + 1 : zeros[i - 1];\n            ones[i] = str[i] == '1' ? ones[i - 1] + 1 : ones[i - 1];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < str.Length; i++) {\n            zeros[i] = str[i] == '0' ? zeros[i - 1] + 1 : zeros[i - 1];\n            ones[i] = str[i] == '1' ? ones[i - 1] + 1 : ones[i - 1];\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                long z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                long o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int maxDiff = 0;\n        int currDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currDiff = count[0] - count[1];\n            if (currDiff == 0) {\n                maxLen = i + 1;\n            } else if (maxDiff == currDiff) {\n                maxLen = Math.Max(maxLen, i + 1);\n            } else if (Math.Abs(maxDiff) < Math.Abs(currDiff)) {\n                maxDiff = currDiff;\n                maxLen = i + 1;\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_len = 0;\n        int curr_len = 0;\n        int prev_diff = 0;\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_len++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n            if (max_diff == curr_len) {\n                max_len = Math.Max(max_len, max_diff);\n            }\n        }\n        return max_len;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int maxLen = 0;\n        int currLen = 0;\n        int prevDiff = 0;\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            currLen++;\n            maxDiff = Math.Max(maxDiff, Math.Abs(count[0] - count[1]));\n            if (maxDiff == currLen) {\n                maxLen = Math.Max(maxLen, currLen);\n            }\n        }\n        return maxLen;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        // Create a hash table to store the count of 0s and 1s\n        Dictionary<int, int> hash = new Dictionary<int, int>();\n        // Initialize the count of 0s and 1s to 0\n        int count0 = 0;\n        int count1 = 0;\n        // Initialize the maximum difference to 0\n        int maxDiff = 0;\n        // Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is 0, increment the count of 0s\n            if (str[i] == '0') {\n                count0++;\n            }\n            // If the current character is 1, increment the count of 1s\n            else {\n                count1++;\n            }\n            // If the difference between the count of 0s and 1s is 0, then the current substring is balanced\n            if (count0 - count1 == 0) {\n                // Update the maximum difference\n                maxDiff = Math.Max(maxDiff, i + 1);\n            }\n            // If the difference between the count of 0s and 1s is not 0, then the current substring is not balanced\n            else {\n                // If the difference between the count of 0s and 1s is not in the hash table, add it to the hash table\n                if (!hash.ContainsKey(count0 - count1)) {\n                    hash.Add(count0 - count1, i);\n                }\n                // If the difference between the count of 0s and 1s is in the hash table, update the maximum difference\n                else {\n                    maxDiff = Math.Max(maxDiff, i - hash[count0 - count1]);\n                }\n            }\n        }\n        // Return the maximum difference\n        return maxDiff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                if (str[j] == '0') {\n                    count[0]++;\n                } else {\n                    count[1]++;\n                }\n                max = Math.Max(max, Math.Abs(count[0] - count[1]));\n            }\n            count[0] = 0;\n            count[1] = 0;\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n        }\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        for (int i = 0; i < n; i++) {\n            if (count[i] == 0) {\n                max = i + 1;\n            }\n            if (map.ContainsKey(count[i])) {\n                max = Math.Max(max, i - map[count[i]]);\n            } else {\n                map.Add(count[i], i);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long zeros = 0;\n        long ones = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            if (zeros == ones) {\n                max = Math.Max(max, zeros + ones);\n            }\n        }\n        zeros = 0;\n        ones = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            if (zeros == ones) {\n                max = Math.Max(max, zeros + ones);\n            }\n        }\n        return max;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        int[] min = new int[n];\n        min[0] = sum[0];\n        for (int i = 1; i < n; i++) {\n            min[i] = Math.Min(min[i - 1], sum[i]);\n        }\n        int[] max = new int[n];\n        max[0] = sum[0];\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.Max(max[i - 1], sum[i]);\n        }\n        int[] minIndex = new int[n];\n        minIndex[0] = 0;\n        for (int i = 1; i < n; i++) {\n            if (min[i] < min[i - 1]) {\n                minIndex[i] = i;\n            } else {\n                minIndex[i] = minIndex[i - 1];\n            }\n        }\n        int[] maxIndex = new int[n];\n        maxIndex[0] = 0;\n        for (int i = 1; i < n; i++) {\n            if (max[i] > max[i - 1]) {\n                maxIndex[i] = i;\n            } else {\n                maxIndex[i] = maxIndex[i - 1];\n            }\n        }\n        int maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            int minI = minIndex[i];\n            int maxI = maxIndex[i];\n            if (minI > maxI) {\n                maxDiff = Math.Max(maxDiff, i - minI + 1);\n            } else {\n",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] == '0' ? -1 : 1;\n        }\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n        Dictionary<int, int> dict = new Dictionary<int, int>();\n        dict[0] = -1;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (dict.ContainsKey(sum[i])) {\n                max = Math.Max(max, i - dict[sum[i]]);\n            } else {\n                dict[sum[i]] = i;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n            arr[i] = count;\n        }\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        return max - min;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, i + 1);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        count = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max = Math.Max(max, str.Length - i);\n            }\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;",
    "        // Create a variable to store the maximum difference\n        long maxDiff = 0;\n\n        // Create a variable to store the number of 0s\n        long numZeros = 0;\n\n        // Create a variable to store the number of 1s\n        long numOnes = 0;\n\n        // Iterate over the string\n        for (int i = 0; i < str.Length; i++) {\n            // If the current character is a 0\n            if (str[i] == '0') {\n                // Increment the number of 0s\n                numZeros++;\n            }\n            // If the current character is a 1\n            else {\n                // Increment the number of 1s\n                numOnes++;\n            }\n\n            // If the number of 0s is greater than the number of 1s\n            if (numZeros > numOnes) {\n                // Set the number of 1s to 0\n                numOnes = 0;\n\n                // Set the number of 0s to 1\n                numZeros = 1;\n            }\n            // If the number of 1s is greater than the number of 0s\n            else if (numOnes > numZeros) {\n                // Set the number of 0s to 0\n                numZeros = 0;\n\n                // Set the number of 1s to 1\n                numOnes = 1;\n            }\n\n            // Set the maximum difference to the maximum of the current maximum difference and the current difference\n            maxDiff = Math.Max(maxDiff, Math.Abs(numZeros - numOnes));\n        }\n\n        // Return the maximum difference\n        return maxDiff;",
    "        // Write your code here\n        int n = str.Length;\n        int[] arr = new int[n];\n        int[] arr2 = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count++;\n            }\n            arr[i] = count;\n        }\n        count = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            }\n            arr2[i] = count;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, Math.Abs(arr[i] - arr2[i]));\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, Math.Abs(count[0] - count[1]));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, Math.Abs(curr_diff));\n        }\n        return max_diff;",
    "        int n = str.Length;\n        int[] zero = new int[n];\n        int[] one = new int[n];\n        if (str[0] == '0') {\n            zero[0] = 1;\n        } else {\n            one[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zero[i] = zero[i - 1] + 1;\n                one[i] = one[i - 1];\n            } else {\n                one[i] = one[i - 1] + 1;\n                zero[i] = zero[i - 1];\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zeros = zero[j] - zero[i] + (str[i] == '0' ? 1 : 0);\n                int ones = one[j] - one[i] + (str[i] == '1' ? 1 : 0);\n                max = Math.Max(max, Math.Abs(zeros - ones));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        int cur = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                cur--;\n            } else {\n                cur++;\n            }\n            count[i] = cur;\n            max = Math.Max(max, cur);\n        }\n        if (max == 0) {\n            return n;\n        }\n        int[] start = new int[max + 1];\n        int[] end = new int[max + 1];\n        for (int i = 0; i < n; i++) {\n            if (start[count[i]] == 0) {\n                start[count[i]] = i + 1;\n            }\n            end[count[i]] = i + 1;\n        }\n        int ans = 0;\n        for (int i = 0; i <= max; i++) {\n            ans = Math.Max(ans, end[i] - start[i]);\n        }\n        return ans;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] diff = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                diff[i] = arr[i];\n            } else {\n                diff[i] = diff[i - 1] + arr[i];\n            }\n        }\n        int[] min = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                min[i] = diff[i];\n            } else {\n                min[i] = Math.Min(min[i - 1], diff[i]);\n            }\n        }\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                max[i] = diff[i];\n            } else {\n                max[i] = Math.Max(max[i - 1], diff[i]);\n            }\n        }\n        long maxDiff = 0;\n        for (int i = 0; i < n; i++) {\n            maxDiff = Math.Max(maxDiff, max[i] - min[i]);\n        }\n        return maxDiff;"
  ]
}