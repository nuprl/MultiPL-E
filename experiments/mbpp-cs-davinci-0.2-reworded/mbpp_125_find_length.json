{
  "name": "mbpp_125_find_length",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) curr_diff = -curr_diff;\n            if (curr_diff > max_diff) max_diff = curr_diff;\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        int z = 0;\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                z++;\n            } else {\n                o++;\n            }\n            zeros[i] = z;\n            ones[i] = o;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int zc = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int oc = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(zc - oc));\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = str[i] - '0';\n        }\n        int[] left = new int[n];\n        int[] right = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                count++;\n            }\n            left[i] = count;\n        }\n        count = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr[i] == 1) {\n                count++;\n            }\n            right[i] = count;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.Max(max, Math.Abs(left[i] - right[i]));\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            if (curr_diff < 0) {\n                curr_diff = -curr_diff;\n            }\n            if (curr_diff > max_diff) {\n                max_diff = curr_diff;\n            }\n        }\n        return max_diff;",
    "        var zeros = new List<int>();\n        var ones = new List<int>();\n        var max = 0L;\n        var count = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            zeros.Add(count);\n        }\n        count = 0;\n        for (var i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '1') {\n                count++;\n            } else {\n                count--;\n            }\n            ones.Add(count);\n        }\n        ones.Reverse();\n        for (var i = 0; i < str.Length; i++) {\n            max = Math.Max(max, Math.Abs(zeros[i] - ones[i]));\n        }\n        return max;",
    "        var count = 0;\n        var max = 0;\n        var zero = 0;\n        var one = 0;\n        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, i + 1);\n            }\n        }\n        for (var i = 0; i < str.Length - 1; i++) {\n            if (str[i] == '0') {\n                zero--;\n            } else {\n                one--;\n            }\n            if (str[i + 1] == '0') {\n                zero++;\n            } else {\n                one++;\n            }\n            if (zero == one) {\n                max = Math.Max(max, str.Length - i - 1);\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        if (str[0] == '0') {\n            zeros[0] = 1;\n        } else {\n            ones[0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            if (str[i] == '0') {\n                zeros[i] = zeros[i - 1] + 1;\n                ones[i] = ones[i - 1];\n            } else {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1] + 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int z = zeros[j] - (i == 0 ? 0 : zeros[i - 1]);\n                int o = ones[j] - (i == 0 ? 0 : ones[i - 1]);\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                count[i] = -1;\n            } else {\n                count[i] = 1;\n            }\n            if (i > 0) {\n                count[i] += count[i - 1];\n            }\n            max = Math.Max(max, count[i]);\n        }\n        int min = count[0];\n        for (int i = 1; i < n; i++) {\n            min = Math.Min(min, count[i]);\n        }\n        return max - min + 1;",
    "        var zeros = new long[str.Length + 1];\n        var ones = new long[str.Length + 1];\n        for (int i = 0; i < str.Length; i++) {\n            zeros[i + 1] = zeros[i] + (str[i] == '0' ? 1 : 0);\n            ones[i + 1] = ones[i] + (str[i] == '1' ? 1 : 0);\n        }\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i + 1; j <= str.Length; j++) {\n                max = Math.Max(max, Math.Abs(zeros[j] - zeros[i]) + Math.Abs(ones[j] - ones[i]));\n            }\n        }\n        return max;",
    "        int maxLength = 0;\n        int count0 = 0;\n        int count1 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        count0 = 0;\n        count1 = 0;\n        for (int i = str.Length - 1; i >= 0; i--) {\n            if (str[i] == '0') {\n                count0++;\n            } else {\n                count1++;\n            }\n            if (count0 == count1) {\n                maxLength = Math.Max(maxLength, count0 + count1);\n            }\n        }\n        return maxLength;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        int curr_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            curr_diff = count[0] - count[1];\n            max_diff = Math.Max(max_diff, curr_diff);\n        }\n        return max_diff;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;",
    "        long maxLength = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                maxLength = i + 1;\n            }\n        }\n        long count1 = 0;\n        long count2 = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count1++;\n            } else {\n                count2++;\n            }\n            if (count1 == count2) {\n                maxLength = Math.Max(maxLength, i + 1);\n            }\n        }\n        return maxLength;",
    "        // Write your code here\n        int n = str.Length;\n        int[] zeros = new int[n];\n        int[] ones = new int[n];\n        zeros[0] = str[0] == '0' ? 1 : 0;\n        ones[0] = str[0] == '1' ? 1 : 0;\n        for (int i = 1; i < n; i++) {\n            zeros[i] = zeros[i - 1];\n            ones[i] = ones[i - 1];\n            if (str[i] == '0') {\n                zeros[i]++;\n            } else {\n                ones[i]++;\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long z = zeros[j];\n                long o = ones[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;",
    "        // Initialize result\n        long result = 0;\n\n        // Initialize left and right\n        int n = str.Length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        // To store counts of zeroes in\n        // left[] and right[]\n        int zeroCount = 0;\n\n        // To store counts of ones in\n        // left[] and right[]\n        int oneCount = 0;\n\n        // Traverse str from left to right\n        for (int i = 0; i < n; i++) {\n            // If current character is '0'\n            if (str[i] == '0') {\n                zeroCount++;\n            }\n\n            // If current character is '1'\n            else {\n                oneCount++;\n            }\n\n            // Store counts of zeroes and ones\n            // in left[]\n            left[i] = zeroCount;\n            right[i] = oneCount;\n        }\n\n        // Traverse str from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            // If current character is '0'\n            if (str[i] == '0') {\n                zeroCount--;\n            }\n\n            // If current character is '1'\n            else {\n                oneCount--;\n            }\n\n            // If both left[] and right[] have\n            // equal number of zeroes and ones\n            if (left[i] == right[i]) {\n                result = Math.Max(result, i + 1);\n            }\n        }\n\n        return result;",
    "        long max = 0;\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                count = 0;\n            }\n            max = Math.Max(max, count);\n        }\n        return max;",
    "        int n = str.Length;\n        int[] count = new int[2];\n        int max_diff = 0;\n        for (int i = 0; i < n; i++) {\n            count[str[i] - '0']++;\n            max_diff = Math.Max(max_diff, count[0] - count[1]);\n            if (count[0] == count[1]) {\n                max_diff = Math.Max(max_diff, count[0] - count[1]);\n                count[0] = 0;\n                count[1] = 0;\n            }\n        }\n        return max_diff;",
    "        var zeros = new long[str.Length];\n        var ones = new long[str.Length];\n        long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                zeros[i] = 1;\n                if (i > 0) {\n                    zeros[i] += zeros[i - 1];\n                }\n            }\n            if (str[i] == '1') {\n                ones[i] = 1;\n                if (i > 0) {\n                    ones[i] += ones[i - 1];\n                }\n            }\n        }\n        for (int i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++) {\n                var z = zeros[j];\n                if (i > 0) {\n                    z -= zeros[i - 1];\n                }\n                var o = ones[j];\n                if (i > 0) {\n                    o -= ones[i - 1];\n                }\n                max = Math.Max(max, Math.Abs(z - o));\n            }\n        }\n        return max;"
  ]
}