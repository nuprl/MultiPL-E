{
  "name": "mbpp_429_and_tuples",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    public static long AndTuples(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AndTuples((long)Tuple.Create(10L, 4L, 6L, 9L), (long)Tuple.Create(5L, 2L, 3L, 3L)) == (long)Tuple.Create(0L, 0L, 2L, 1L));\n    Debug.Assert(AndTuples((long)Tuple.Create(1L, 2L, 3L, 4L), (long)Tuple.Create(5L, 6L, 7L, 8L)) == (long)Tuple.Create(1L, 2L, 3L, 0L));\n    Debug.Assert(AndTuples((long)Tuple.Create(8L, 9L, 11L, 12L), (long)Tuple.Create(7L, 13L, 14L, 17L)) == (long)Tuple.Create(0L, 9L, 10L, 0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if ((test_tup1 & (1 << i)) != 0 && (test_tup2 & (1 << i)) != 0) {\n                result |= (1 << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1 << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if ((test_tup1 & (1 << i)) != 0 && (test_tup2 & (1 << i)) != 0) {\n                result |= (1 << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        // Extract the elements from the tuples.\n        long tup1_elem1 = test_tup1 >> 32;\n        long tup1_elem2 = test_tup1 & 0xFFFFFFFF;\n        long tup2_elem1 = test_tup2 >> 32;\n        long tup2_elem2 = test_tup2 & 0xFFFFFFFF;\n        // Compute the elementwise and.\n        long and_elem1 = tup1_elem1 & tup2_elem1;\n        long and_elem2 = tup1_elem2 & tup2_elem2;\n        // Pack the elementwise and into a tuple.\n        long and_tup = (and_elem1 << 32) | and_elem2;\n        return and_tup;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= (1L << i);\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < 64; i++) {\n            if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n                result |= 1L << i;\n            }\n        }\n        return result;"
  ]
}