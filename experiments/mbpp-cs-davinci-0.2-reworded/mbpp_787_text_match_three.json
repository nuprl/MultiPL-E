{
  "name": "mbpp_787_text_match_three",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a string that has an a followed by three 'b'.\n    public static bool TextMatchThree(string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchThree((\"ac\")) == (false));\n    Debug.Assert(TextMatchThree((\"dc\")) == (false));\n    Debug.Assert(TextMatchThree((\"abbbba\")) == (true));\n    Debug.Assert(TextMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, \"ab{3}\");",
    "        return Regex.IsMatch(text, @\"^a(bbb)+$\");",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, \"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, \"ab{3}\");",
    "        if (text.Length < 4) return false;\n        if (text[0] != 'a') return false;\n        for (int i = 1; i < 4; i++) {\n            if (text[i] != 'b') return false;\n        }\n        return true;",
    "        return System.Text.RegularExpressions.Regex.IsMatch(text, @\"^a(bbb)+$\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, \"ab{3}\");",
    "        return Regex.IsMatch(text, \"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, \"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, @\"ab{3}\");",
    "        return Regex.IsMatch(text, @\"^a(b){3}$\");",
    "        return Regex.IsMatch(text, \"ab{3}\");"
  ]
}