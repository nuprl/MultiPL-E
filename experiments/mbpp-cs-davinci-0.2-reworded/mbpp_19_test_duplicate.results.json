{
  "name": "mbpp_19_test_duplicate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in arraynums) {\n            if (hs.Contains(i)) {\n                return true;\n            }\n            hs.Add(i);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> nums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (nums.Contains(num)) {\n                return true;\n            }\n            nums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a dictionary to store the numbers\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the number is already in the dictionary, return true\n            if (dict.ContainsKey(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the dictionary\n            else {\n                dict.Add(num, 0);\n            }\n        }\n        // If the loop finishes, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            else {\n                hs.Add(num);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // HashSet<long> hashset = new HashSet<long>();\n        // foreach (long num in arraynums) {\n        //     if (hashset.Contains(num)) {\n        //         return true;\n        //     }\n        //     hashset.Add(num);\n        // }\n        // return false;\n        return arraynums.Count != arraynums.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // We can use a hashset to store the values and check for duplicates\n        HashSet<long> nums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (nums.Contains(num)) {\n                return true;\n            }\n            nums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a dictionary to store the numbers and their counts\n        Dictionary<long, int> nums = new Dictionary<long, int>();\n        foreach (long num in arraynums) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums.Add(num, 1);\n            }\n        }\n        // Check if any of the counts are greater than 1\n        foreach (KeyValuePair<long, int> num in nums) {\n            if (num.Value > 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the numbers\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the hashset already contains the number, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the hashset\n            hashset.Add(num);\n        }\n        // If the loop completes, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a new list to store the numbers\n        List<long> nums = new List<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the number is in the list, return true\n            if (nums.Contains(num)) {\n                return true;\n            }\n            // Add the number to the list\n            nums.Add(num);\n        }\n        // Return false if no duplicate is found\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Sort the array\n        arraynums.Sort();\n        // Loop through the array\n        for (int i = 0; i < arraynums.Count - 1; i++) {\n            // If the next number is the same as the current number\n            if (arraynums[i] == arraynums[i + 1]) {\n                // Return true\n                return true;\n            }\n        }\n        // Return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a HashSet to store the numbers\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the number is already in the HashSet, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the HashSet\n            hashset.Add(num);\n        }\n        // If we get to the end of the array without returning true, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to hold the numbers\n        HashSet<long> nums = new HashSet<long>();\n        // Iterate through the list\n        foreach (long num in arraynums) {\n            // If the number is already in the hashset, return true\n            if (nums.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the hashset\n            nums.Add(num);\n        }\n        // If we get through the entire list without returning true, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the numbers\n        HashSet<long> nums = new HashSet<long>();\n        // Iterate through the array\n        foreach (long num in arraynums) {\n            // If the number is already in the hashset, return true\n            if (nums.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the hashset\n            nums.Add(num);\n        }\n        // If we get through the whole array without returning true, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // create a hashset to store the numbers\n        HashSet<long> nums = new HashSet<long>();\n        // loop through the array\n        foreach (long num in arraynums) {\n            // if the number is already in the hashset, return true\n            if (nums.Contains(num)) {\n                return true;\n            }\n            // add the number to the hashset\n            nums.Add(num);\n        }\n        // if we get here, there are no duplicates\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the numbers\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the hashset already contains the number, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Add the number to the hashset\n            hashset.Add(num);\n        }\n        // Return false if no duplicate was found\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> nums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (nums.Contains(num)) {\n                return true;\n            }\n            nums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hash = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var nums = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (nums.Contains(num)) {\n                return true;\n            }\n            nums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the values\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the hashset already contains the value, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Else, add the value to the hashset\n            else {\n                hashset.Add(num);\n            }\n        }\n        // If the loop finishes, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            } else {\n                setnums.Add(num);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach(long num in arraynums) {\n            if(set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // O(n)\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            } else {\n                set.Add(num);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // This is a O(n^2) solution.\n        // for (int i = 0; i < arraynums.Count; i++) {\n        //     for (int j = i+1; j < arraynums.Count; j++) {\n        //         if (arraynums[i] == arraynums[j]) {\n        //             return true;\n        //         }\n        //     }\n        // }\n        // return false;\n\n        // This is a O(n) solution.\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long n in arraynums) {\n            if (set.Contains(n)) {\n                return true;\n            }\n            set.Add(n);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in arraynums) {\n            if (hs.Contains(i)) {\n                return true;\n            }\n            hs.Add(i);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            } else {\n                set.Add(num);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> test = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (test.Contains(num)) {\n                return true;\n            }\n            test.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a dictionary to store the number of times each number appears\n        Dictionary<long, int> nums = new Dictionary<long, int>();\n        foreach (long num in arraynums) {\n            if (nums.ContainsKey(num)) {\n                return true;\n            }\n            else {\n                nums.Add(num, 1);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> nums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (nums.Contains(num)) {\n                return true;\n            }\n            nums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            } else {\n                hashset.Add(num);\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the numbers\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the number is already in the hashset, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the hashset\n            else {\n                hashset.Add(num);\n            }\n        }\n        // If the loop finishes, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        bool result = false;\n        for (int i = 0; i < arraynums.Count; i++) {\n            for (int j = i + 1; j < arraynums.Count; j++) {\n                if (arraynums[i] == arraynums[j]) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (var item in arraynums) {\n            if (hs.Contains(item)) {\n                return true;\n            }\n            hs.Add(item);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long n in arraynums) {\n            if (setnums.Contains(n)) {\n                return true;\n            }\n            setnums.Add(n);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a hashset to store the values\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array\n        foreach (long num in arraynums) {\n            // If the hashset already contains the number, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the number to the hashset\n            hashset.Add(num);\n        }\n        // If we get here, there are no duplicates\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        // Create a HashSet to store the numbers\n        HashSet<long> hashset = new HashSet<long>();\n        // Loop through the array and add each number to the hashset\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                // If the number is already in the hashset, return true\n                return true;\n            } else {\n                // If the number is not in the hashset, add it\n                hashset.Add(num);\n            }\n        }\n        // If the loop completes without returning true, return false\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> setnums = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (setnums.Contains(num)) {\n                return true;\n            }\n            setnums.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}