{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i += 2) {\n            test_dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdfn8my3c.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpdfn8my3c.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpdfn8my3c.cs(13,40): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpdfn8my3c.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdfn8my3c.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdfn8my3c.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4nd5jyu.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> test_dict = new Dictionary<long, long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxmeswneb.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxmeswneb.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxmeswneb.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = long.Parse(test_tup.ToString()[i].ToString());\n        }\n        for(int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i],test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgjs9c8re.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpgjs9c8re.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpgjs9c8re.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_vsrr6g7.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_vsrr6g7.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_vsrr6g7.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i < test_tup - 1) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4vpeh68p.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4vpeh68p.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4vpeh68p.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj6fv9wnh.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[0].ToString()));\n            } else {\n                dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i + 1].ToString()));\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4j5ldt1l.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4j5ldt1l.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4j5ldt1l.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i + 1 < arr.Length) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6cooelmc.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp6cooelmc.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i],test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx6o476vn.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpx6o476vn.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpx6o476vn.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3q_mkop6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3q_mkop6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3q_mkop6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i + 1 < arr.Length) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6cooelmc.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp6cooelmc.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wimsp2b.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_wimsp2b.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp_wimsp2b.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp_wimsp2b.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_wimsp2b.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_wimsp2b.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpezfjlp9j.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpezfjlp9j.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpezfjlp9j.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long, long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i + 1].ToString());\n            dict.Add(key, value);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6uykck9_.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6uykck9_.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6uykck9_.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var result = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length; i += 2) {\n            result.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplt6v9ttz.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmplt6v9ttz.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmplt6v9ttz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i < test_tup - 1) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcoltdr7g.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpcoltdr7g.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpcoltdr7g.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpssk1bfa9.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpssk1bfa9.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpssk1bfa9.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = Convert.ToInt64(Console.ReadLine());\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(arr[i], arr[i+1]);\n            i++;\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8mw5a1rj.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp8mw5a1rj.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp8mw5a1rj.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            tup[i] = long.Parse(Console.ReadLine());\n        }\n        for(int i = 0; i < tup.Length; i++) {\n            if(i+1 < tup.Length) {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc3o75skc.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc3o75skc.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc3o75skc.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i + 1 < test_tup) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprpn59mlh.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprpn59mlh.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprpn59mlh.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i+1].ToString());\n            dict.Add(key, value);\n            i++;\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr40gq02g.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpr40gq02g.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpr40gq02g.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for(int i=0;i<test_tup;i++) {\n            arr[i] = i;\n        }\n        for(int i=0;i<test_tup;i++) {\n            if(i+1<test_tup) {\n                dict.Add(arr[i],arr[i+1]);\n            }\n            else {\n                dict.Add(arr[i],arr[0]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcuuqj0ny.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpcuuqj0ny.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpcuuqj0ny.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmploitgjg9.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmploitgjg9.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmploitgjg9.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict.Add(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsgfx9k60.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpsgfx9k60.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i % 2 == 0) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmperbfs25t.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmperbfs25t.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmperbfs25t.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmperbfs25t.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmperbfs25t.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmperbfs25t.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph01dp4xe.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph01dp4xe.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph01dp4xe.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for(long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(long i = 0; i < test_tup - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6he7ls6c.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6he7ls6c.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6he7ls6c.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnb_er3mr.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpnb_er3mr.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzz4sw9ve.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzz4sw9ve.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzz4sw9ve.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprhwszz4q.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj6fv9wnh.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for(int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc9tknwov.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc9tknwov.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc9tknwov.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i+1 < test_tup) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg8z_ttpy.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpg8z_ttpy.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpg8z_ttpy.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_dict = new Dictionary<long,long>();\n        var test_list = new List<long>();\n        var test_str = test_tup.ToString();\n        for (int i = 0; i < test_str.Length; i++) {\n            test_list.Add(long.Parse(test_str[i].ToString()));\n        }\n        for (int i = 0; i < test_list.Count; i++) {\n            if (i == test_list.Count - 1) {\n                test_dict.Add(test_list[i], test_list[0]);\n            } else {\n                test_dict.Add(test_list[i], test_list[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbcc3gb7z.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbcc3gb7z.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbcc3gb7z.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                test_dict.Add(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.Add(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpymnscbml.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpymnscbml.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpymnscbml.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpymnscbml.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpymnscbml.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpymnscbml.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxmb17zx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfvtt9282.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpfvtt9282.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpfvtt9282.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpfvtt9282.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpfvtt9282.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpfvtt9282.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for(int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvvohqjck.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvvohqjck.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvvohqjck.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwbmjdqco.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpwbmjdqco.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpwbmjdqco.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4nd5jyu.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i+1].ToString());\n            dict.Add(key, value);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprfir5gjs.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprfir5gjs.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprfir5gjs.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = long.Parse(test_tup.ToString()[i].ToString());\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu0alne6m.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu0alne6m.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu0alne6m.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i],test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzmlvjop.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmzmlvjop.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmzmlvjop.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                break;\n            }\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpga4mqa8b.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpga4mqa8b.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpga4mqa8b.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpga4mqa8b.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpga4mqa8b.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpga4mqa8b.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], 0);\n            } else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz5cfrez7.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz5cfrez7.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz5cfrez7.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] { test_tup };\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps1y7qfd9.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps1y7qfd9.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps1y7qfd9.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i + 1 < arr.Length) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6cooelmc.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp6cooelmc.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i],arr[0]);\n            } else {\n                dict.Add(arr[i],arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptw8wbhoj.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptw8wbhoj.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptw8wbhoj.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmptw8wbhoj.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptw8wbhoj.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptw8wbhoj.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            if (i % 2 == 0) {\n                dict[test_tup[i]] = test_tup[i+1];\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpry8x43ba.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpry8x43ba.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpry8x43ba.cs(14,37): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpry8x43ba.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpry8x43ba.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpry8x43ba.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], 0);\n            } else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_9aztsii.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_9aztsii.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_9aztsii.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_dict = new Dictionary<long,long>();\n        var test_list = new List<long>();\n        var test_str = test_tup.ToString();\n        for (int i = 0; i < test_str.Length; i++) {\n            test_list.Add(long.Parse(test_str[i].ToString()));\n        }\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            test_dict.Add(test_list[i],test_list[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaia3pl98.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpaia3pl98.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpaia3pl98.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_vsrr6g7.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_vsrr6g7.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_vsrr6g7.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] {test_tup};\n        for (int i = 0; i < tup.Length; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiwi2_3fs.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpiwi2_3fs.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpiwi2_3fs.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for(int i = 0; i < test_tup - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm56_u7__.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm56_u7__.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm56_u7__.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdp0mzxri.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i],test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvl44pjhj.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvl44pjhj.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvl44pjhj.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for(int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpklflxu2b.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpklflxu2b.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpklflxu2b.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.Add(tup[i], tup[0]);\n            } else {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpty0hz1ad.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpty0hz1ad.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpty0hz1ad.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprhwszz4q.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_dict = new Dictionary<long,long>();\n        var test_list = new List<long>();\n        while (test_tup > 0) {\n            test_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        test_list.Reverse();\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            test_dict.Add(test_list[i], test_list[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpem1o8kzr.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpem1o8kzr.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpem1o8kzr.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict.Add(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2qyn7quv.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp2qyn7quv.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp2qyn7quv.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp2qyn7quv.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp2qyn7quv.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp2qyn7quv.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivuyqg2a.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            dict[arr[i]] = arr[i+1];\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5jccv7hx.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp5jccv7hx.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp5jccv7hx.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp5jccv7hx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp5jccv7hx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp5jccv7hx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpohs5sbkx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = test_tup.ToArray();\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], -1);\n            } else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_l6akd54.cs(12,31): error CS1061: 'long' does not contain a definition for 'ToArray' and no accessible extension method 'ToArray' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_l6akd54.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_l6akd54.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_l6akd54.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa55er828.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpa55er828.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpa55er828.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprhwszz4q.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0kw6xz5.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpt0kw6xz5.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpt0kw6xz5.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpt0kw6xz5.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpt0kw6xz5.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpt0kw6xz5.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                break;\n            }\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuef7cnav.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuef7cnav.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpuef7cnav.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpuef7cnav.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpuef7cnav.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpuef7cnav.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i += 2) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxadzfv86.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxadzfv86.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxadzfv86.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpxadzfv86.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxadzfv86.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxadzfv86.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for(int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdg8b9ab9.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdg8b9ab9.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdg8b9ab9.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => (long)Char.GetNumericValue(x)).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbopk242v.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbopk242v.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbopk242v.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxmb17zx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i+=2) {\n            test_dict.Add(test_tup[i],test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj87wlve5.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpj87wlve5.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpj87wlve5.cs(13,39): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpj87wlve5.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj87wlve5.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj87wlve5.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length; i+=2) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4u1vcvwy.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4u1vcvwy.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4u1vcvwy.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptk_f2whp.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptk_f2whp.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmptk_f2whp.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmptk_f2whp.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptk_f2whp.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptk_f2whp.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < tup.Length; i++) {\n            if (i + 1 < tup.Length) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvx7dq4eo.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvx7dq4eo.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvx7dq4eo.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph01dp4xe.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph01dp4xe.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph01dp4xe.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv6jw4zvz.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpv6jw4zvz.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpv6jw4zvz.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpv6jw4zvz.cs(14,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpv6jw4zvz.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv6jw4zvz.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv6jw4zvz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp53yj24ug.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp53yj24ug.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp53yj24ug.cs(13,40): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp53yj24ug.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp53yj24ug.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp53yj24ug.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup_arr.Length - 1; i++) {\n            dict.Add(tup_arr[i], tup_arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppmv0j04g.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppmv0j04g.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppmv0j04g.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.Add(tup[i], tup[0]);\n            }\n            else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnqj7ij7y.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnqj7ij7y.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnqj7ij7y.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm03a6u46.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpm03a6u46.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpm03a6u46.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpm03a6u46.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm03a6u46.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm03a6u46.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            if (i == test_tup - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf5bzkv2o.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpf5bzkv2o.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpf5bzkv2o.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] {test_tup};\n        for (int i = 0; i < tup.Length; i++) {\n            if (i + 1 < tup.Length) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp58xspsyq.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp58xspsyq.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp58xspsyq.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpits25zsp.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpits25zsp.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpits25zsp.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i + 1 < arr.Length) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6cooelmc.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp6cooelmc.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp6cooelmc.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6cooelmc.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            if (i == test_tup - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf5bzkv2o.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpf5bzkv2o.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpf5bzkv2o.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2t5a0_v.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps2t5a0_v.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps2t5a0_v.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = long.Parse(test_tup.ToString()[i].ToString());\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu0alne6m.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu0alne6m.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu0alne6m.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivuyqg2a.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbevpr8yj.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbevpr8yj.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbevpr8yj.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3i1wvwzz.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long, long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph57lyfcf.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph57lyfcf.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph57lyfcf.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i += 2) {\n            test_dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpddfat3o1.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpddfat3o1.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpddfat3o1.cs(13,40): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpddfat3o1.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpddfat3o1.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpddfat3o1.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                test_dict.Add(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.Add(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph_b0dtiy.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph_b0dtiy.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph_b0dtiy.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph1sjlh8s.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph1sjlh8s.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph1sjlh8s.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> test_dict = new Dictionary<long, long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        Array.Reverse(test_arr);\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzqq7ltdm.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzqq7ltdm.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzqq7ltdm.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprttuldw9.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprttuldw9.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprttuldw9.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i + 1 < test_arr.Length) {\n                test_dict.Add(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd8bx_mlh.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd8bx_mlh.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpd8bx_mlh.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpd8bx_mlh.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd8bx_mlh.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd8bx_mlh.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9j0gwcz2.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp9j0gwcz2.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp9j0gwcz2.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i + 1 < test_tup) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprpn59mlh.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprpn59mlh.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprpn59mlh.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for(int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for(int i = 0; i < arr.Length; i++) {\n            if(i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            }\n            else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0jw2i89d.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0jw2i89d.cs(13,37): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0jw2i89d.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp0jw2i89d.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0jw2i89d.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0jw2i89d.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] {test_tup};\n        for (int i = 0; i < tup.Length; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxpvhaze.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxpvhaze.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxpvhaze.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            if (i+1 < test_tup) {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0sfinfwp.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0sfinfwp.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0sfinfwp.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0kw6xz5.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpt0kw6xz5.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpt0kw6xz5.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpt0kw6xz5.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpt0kw6xz5.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpt0kw6xz5.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbevpr8yj.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbevpr8yj.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbevpr8yj.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprhwszz4q.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprhwszz4q.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmuukt9c9.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmuukt9c9.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmuukt9c9.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3q_mkop6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3q_mkop6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3q_mkop6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for(int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for(int i = 0; i < arr.Length; i++) {\n            if(i % 2 == 0) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_o4pjw3o.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_o4pjw3o.cs(13,37): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_o4pjw3o.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp_o4pjw3o.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_o4pjw3o.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_o4pjw3o.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_dict = new Dictionary<long, long>();\n        var test_list = new List<long>();\n        while (test_tup > 0) {\n            test_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_list.Count; i += 2) {\n            test_dict[test_list[i]] = test_list[i + 1];\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1yhyyxgx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp1yhyyxgx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp1yhyyxgx.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for(int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd5wwa5ai.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd5wwa5ai.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd5wwa5ai.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz400qcen.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz400qcen.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz400qcen.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long, long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i + 1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzv00ydxs.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzv00ydxs.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzv00ydxs.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] { test_tup };\n        for (int i = 0; i < tup.Length; i++) {\n            if (i + 1 < tup.Length) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpig3p2raa.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpig3p2raa.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpig3p2raa.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaiaevccy.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpaiaevccy.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpaiaevccy.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7ulmluli.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp7ulmluli.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp7ulmluli.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i % 2 == 0) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmperbfs25t.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmperbfs25t.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmperbfs25t.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmperbfs25t.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmperbfs25t.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmperbfs25t.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for(int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup.ToString()[i];\n        }\n        for(int i = 0; i < arr.Length; i++) {\n            if(i != arr.Length - 1) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvf3n23w0.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvf3n23w0.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvf3n23w0.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpicnd0t7c.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpicnd0t7c.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpicnd0t7c.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpicnd0t7c.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpicnd0t7c.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpicnd0t7c.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i += 2) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxadzfv86.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxadzfv86.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxadzfv86.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpxadzfv86.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxadzfv86.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpxadzfv86.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i == arr.Length - 1) {\n                dict.Add(arr[i], 0);\n            }\n            else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpob5gm8ww.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpob5gm8ww.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpob5gm8ww.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpob5gm8ww.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpob5gm8ww.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpob5gm8ww.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i + 1 < test_tup) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoukvlrux.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpoukvlrux.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpoukvlrux.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4nd5jyu.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length; i += 2) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe1gc8oa_.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpe1gc8oa_.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpe1gc8oa_.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for(int i = 0; i < tup.Length; i+=2) {\n            var key = tup[i].ToString() + tup[i+1].ToString();\n            dict.Add(long.Parse(key),long.Parse(key));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpng85clbx.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpng85clbx.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpng85clbx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_arr.Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpif564up0.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpif564up0.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpif564up0.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpugywylxx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpugywylxx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpugywylxx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivuyqg2a.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj6fv9wnh.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj6fv9wnh.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i < test_tup - 1) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp858a7r9b.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp858a7r9b.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp858a7r9b.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzmi8otm1.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzmi8otm1.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpzmi8otm1.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                dict.Add(test_arr[i], test_arr[0]);\n            } else {\n                dict.Add(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnigt3w_z.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpnigt3w_z.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpnigt3w_z.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnigt3w_z.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnigt3w_z.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnigt3w_z.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length; i += 2) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i + 1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptl65eiyb.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptl65eiyb.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmptl65eiyb.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i < arr.Length - 1) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pqxk4ab.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_pqxk4ab.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_pqxk4ab.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp_pqxk4ab.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_pqxk4ab.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_pqxk4ab.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i++) {\n            test_dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq27gpuzq.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpq27gpuzq.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpq27gpuzq.cs(13,40): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpq27gpuzq.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpq27gpuzq.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpq27gpuzq.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3i1wvwzz.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_dict[test_tup[i]] = test_tup[i + 1];\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4x3ykdsw.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp4x3ykdsw.cs(13,23): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp4x3ykdsw.cs(13,38): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp4x3ykdsw.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4x3ykdsw.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4x3ykdsw.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (long i = 0; i < test_tup.Length; i++) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr8xpruwg.cs(12,39): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpr8xpruwg.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpr8xpruwg.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpr8xpruwg.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpr8xpruwg.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpr8xpruwg.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxmb17zx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivuyqg2a.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3i1wvwzz.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp3i1wvwzz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for(int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for(int i = 0; i < arr.Length; i++) {\n            if(i == arr.Length - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbdrsmm49.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbdrsmm49.cs(13,37): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbdrsmm49.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpbdrsmm49.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbdrsmm49.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpbdrsmm49.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpssk1bfa9.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpssk1bfa9.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpssk1bfa9.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqypr_ey6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpqypr_ey6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpqypr_ey6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict.Add(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsgfx9k60.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpsgfx9k60.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnb_er3mr.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpnb_er3mr.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.Add(arr[i], arr[0]);\n            } else {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppnczhi0_.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppnczhi0_.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppnczhi0_.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i++) {\n            dict.Add(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnb_er3mr.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpnb_er3mr.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpnb_er3mr.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpnb_er3mr.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i + 1 < tup.Length) {\n                dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i + 1].ToString()));\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0s0nt4x0.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0s0nt4x0.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0s0nt4x0.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i += 2) {\n            test_dict.Add(test_tup[i], test_tup[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpted64qak.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpted64qak.cs(13,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpted64qak.cs(13,40): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpted64qak.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpted64qak.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpted64qak.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < arr.Length - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8clu3qp4.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp8clu3qp4.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp8clu3qp4.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        // Convert the tuple to a list\n        List<long> test_list = new List<long>();\n        while (test_tup > 0) {\n            test_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        // Convert the list to a dictionary\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            test_dict.Add(test_list[i], test_list[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyw6jbk4g.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpyw6jbk4g.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpyw6jbk4g.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj9gu5zdv.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj9gu5zdv.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpj9gu5zdv.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4nd5jyu.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph4nd5jyu.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => (long)Char.GetNumericValue(c)).ToArray();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], tup[0]);\n            } else {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6htf7ngm.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6htf7ngm.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp6htf7ngm.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivuyqg2a.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpivuyqg2a.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for(int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for(int i = 0; i < test_arr.Length; i++) {\n            if(i < test_arr.Length - 1) {\n                test_dict.Add(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphmn99yhf.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphmn99yhf.cs(13,37): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmphmn99yhf.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmphmn99yhf.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmphmn99yhf.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmphmn99yhf.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict.Add(test_arr[i],test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppbajkkqv.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmppbajkkqv.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmppbajkkqv.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmppbajkkqv.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppbajkkqv.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmppbajkkqv.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i < arr.Length - 1) {\n                dict.Add(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pqxk4ab.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_pqxk4ab.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_pqxk4ab.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp_pqxk4ab.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_pqxk4ab.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp_pqxk4ab.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy0201h2c.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpy0201h2c.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpy0201h2c.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_dict = new Dictionary<long,long>();\n        var test_list = test_tup.ToString().ToList();\n        for (int i = 0; i < test_list.Count - 1; i++) {\n            test_dict.Add(long.Parse(test_list[i].ToString()), long.Parse(test_list[i+1].ToString()));\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsvoixvcf.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsvoixvcf.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsvoixvcf.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpohs5sbkx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length-1; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i+1].ToString());\n            dict.Add(key, value);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp82v3htoy.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp82v3htoy.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp82v3htoy.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvxmb17zx.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpvxmb17zx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i + 1 < test_tup) {\n                dict.Add(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc2g5b5fn.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc2g5b5fn.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpc2g5b5fn.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i + 1].ToString());\n            dict[key] = value;\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps6mlenxt.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps6mlenxt.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps6mlenxt.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (long i = 0; i < test_tup; i += 2) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0ebplqti.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0ebplqti.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0ebplqti.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for(int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm1i9pwoe.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm1i9pwoe.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpm1i9pwoe.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdp0mzxri.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => long.Parse(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length-1; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpea9mm_r1.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpea9mm_r1.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpea9mm_r1.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup.Length; i += 2) {\n            dict.Add(test_tup[i], test_tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpegwzsr5x.cs(12,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpegwzsr5x.cs(13,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpegwzsr5x.cs(13,35): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpegwzsr5x.cs(18,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpegwzsr5x.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpegwzsr5x.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var value = long.Parse(tup[i+1].ToString());\n            dict.Add(key,value);\n            i++;\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdpw1ti_q.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdpw1ti_q.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdpw1ti_q.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdp0mzxri.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpdp0mzxri.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString().ToCharArray();\n        for (int i = 0; i < tup.Length-1; i++) {\n            dict.Add(long.Parse(tup[i].ToString()), long.Parse(tup[i+1].ToString()));\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmnsa6n_1.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmnsa6n_1.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpmnsa6n_1.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpohs5sbkx.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpohs5sbkx.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.Add(arr[i],arr[0]);\n            } else {\n                dict.Add(arr[i],arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprtyu2xfu.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprtyu2xfu.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmprtyu2xfu.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict[test_arr[i]] = test_arr[i+1];\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph5_x5rom.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph5_x5rom.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmph5_x5rom.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmph5_x5rom.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph5_x5rom.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmph5_x5rom.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp6fzgity.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpp6fzgity.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpp6fzgity.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            dict.Add(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1665509861,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dazzlk6.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp4dazzlk6.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(x => long.Parse(x.ToString())).ToArray();\n        for (int i = 0; i < tup.Length; i++) {\n            if (i == tup.Length - 1) {\n                dict.Add(tup[i], 0);\n            } else {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz5cfrez7.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz5cfrez7.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpz5cfrez7.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long[] tup = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            tup[i] = i;\n        }\n        for (int i = 0; i < test_tup - 1; i++) {\n            dict.Add(tup[i], tup[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv40cq48e.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv40cq48e.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv40cq48e.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = test_tup.ToString().Select(c => Convert.ToInt64(c.ToString())).ToArray();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            dict.Add(tup[i],tup[i+1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps_wxaukl.cs(19,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps_wxaukl.cs(20,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmps_wxaukl.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var dict = new Dictionary<long,long>();\n        var tup = test_tup.ToString();\n        for (int i = 0; i < tup.Length - 1; i++) {\n            var key = long.Parse(tup[i].ToString());\n            var val = long.Parse(tup[i + 1].ToString());\n            dict.Add(key, val);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd3j0mcxz.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd3j0mcxz.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpd3j0mcxz.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < arr.Length; i++) {\n            if (i+1 < arr.Length) {\n                dict.Add(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyfcz8eay.cs(12,40): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpyfcz8eay.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpyfcz8eay.cs(14,22): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpyfcz8eay.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpyfcz8eay.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpyfcz8eay.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (long i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (long i = 0; i < test_tup; i += 2) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv9bbfd2g.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv9bbfd2g.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpv9bbfd2g.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        var test_tup_list = new List<long>();\n        while (test_tup > 0) {\n            test_tup_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        test_tup_list.Reverse();\n        var test_tup_dict = new Dictionary<long,long>();\n        for (int i = 0; i < test_tup_list.Count - 1; i++) {\n            test_tup_dict.Add(test_tup_list[i], test_tup_list[i + 1]);\n        }\n        return test_tup_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo40pmlai.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpo40pmlai.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpo40pmlai.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] arr = new long[test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup - 1; i++) {\n            dict.Add(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpanznz0xq.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpanznz0xq.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpanznz0xq.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i % 2 == 0) {\n                test_dict.Add(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsgfx9k60.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpsgfx9k60.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpsgfx9k60.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpsgfx9k60.cs(26,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> dict = new Dictionary<long,long>();\n        long[] tup = new long[] { test_tup };\n        for (int i = 0; i < tup.Length; i++) {\n            if (i < tup.Length - 1) {\n                dict.Add(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe6kh_b7u.cs(21,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpe6kh_b7u.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpe6kh_b7u.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i+=2) {\n            test_dict.Add(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0zm2cg8i.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0zm2cg8i.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0zm2cg8i.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmp0zm2cg8i.cs(22,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0zm2cg8i.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmp0zm2cg8i.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.Length];\n        for (int i = 0; i < test_tup.Length; i++) {\n            test_arr[i] = test_tup[i];\n        }\n        for (int i = 0; i < test_arr.Length; i++) {\n            if (i == test_arr.Length - 1) {\n                test_dict.Add(test_arr[i], test_arr[0]);\n            }\n            else {\n                test_dict.Add(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb50wqwop.cs(12,45): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpb50wqwop.cs(13,38): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpb50wqwop.cs(14,27): error CS0021: Cannot apply indexing with [] to an expression of type 'long'\n/tmp/tmpb50wqwop.cs(27,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpb50wqwop.cs(28,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpb50wqwop.cs(29,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/csthon-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(long test_tup) {\n        Dictionary<long,long> test_dict = new Dictionary<long,long>();\n        long[] test_arr = new long[test_tup.ToString().Length];\n        for (int i = 0; i < test_tup.ToString().Length; i++) {\n            test_arr[i] = test_tup % 10;\n            test_tup = test_tup / 10;\n        }\n        for (int i = 0; i < test_arr.Length - 1; i++) {\n            test_dict.Add(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L)).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L)).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((long)Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L)).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu3nu8pu0.cs(23,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu3nu8pu0.cs(24,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n/tmp/tmpu3nu8pu0.cs(25,30): error CS0030: Cannot convert type 'System.Tuple<long, long, long, long, long, long>' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}