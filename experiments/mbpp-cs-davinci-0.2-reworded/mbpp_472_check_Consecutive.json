{
  "name": "mbpp_472_check_Consecutive",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        if (l.Count == 0) return false;\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) return false;\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        long min = l.Min();\n        long max = l.Max();\n        if (max - min + 1 == l.Count) {\n            return l.Distinct().Count() == l.Count;\n        }\n        return false;",
    "        // Write your code here\n        return false;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element and the next is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the list is consecutive\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        if (l.Count == 0) {\n            return false;\n        }\n        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] - l[i - 1] != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        l.Sort();\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Sort the list\n        l.Sort();\n        // Check if the difference between each element is 1\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i + 1] - l[i] != 1) {\n                return false;\n            }\n        }\n        return true;"
  ]
}