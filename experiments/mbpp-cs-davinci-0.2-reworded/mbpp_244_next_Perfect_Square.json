{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the next perfect square greater than a given number.\n    public static long NextPerfectSquare(long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPerfectSquare((35L)) == (36L));\n    Debug.Assert(NextPerfectSquare((6L)) == (9L));\n    Debug.Assert(NextPerfectSquare((9L)) == (16L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i*i <= N) {\n            i++;\n        }\n        return i*i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        // Find the next perfect square\n        long nextPerfectSquare = N;\n        while (true) {\n            nextPerfectSquare++;\n            long squareRoot = (long)Math.Sqrt(nextPerfectSquare);\n            if (squareRoot * squareRoot == nextPerfectSquare) {\n                break;\n            }\n        }\n        return nextPerfectSquare;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        // TODO: Implement this function\n        return 0;",
    "        // Find the next perfect square greater than N\n        long n = (long)Math.Sqrt(N);\n        return n * n == N ? (n + 1) * (n + 1) : -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // find the next perfect square\n        long next = (long)Math.Ceiling(Math.Sqrt(N));\n        return next * next;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        else\n            return (sqrt + 1) * (sqrt + 1);",
    "        long x = (long)Math.Sqrt(N);\n        return (x + 1) * (x + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long n = (long)Math.Sqrt(N);\n        return n * n == N ? (n + 1) * (n + 1) : -1;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        // find the next perfect square greater than N\n        // return -1 if there is no perfect square greater than N\n        // N is a positive integer\n        //\n        // Example:\n        //   NextPerfectSquare(4) = 9\n        //   NextPerfectSquare(5) = 9\n        //   NextPerfectSquare(10) = 16\n        //   NextPerfectSquare(11) = -1\n        //   NextPerfectSquare(25) = 36\n        //   NextPerfectSquare(26) = -1\n        //   NextPerfectSquare(100) = 121\n        //   NextPerfectSquare(101) = -1\n        //   NextPerfectSquare(10000) = 10001\n        //   NextPerfectSquare(10001) = -1\n        //   NextPerfectSquare(10000000000) = 10000000001\n        //   NextPerfectSquare(10000000001) = -1\n        //\n        // Hint:\n        //   1. Use the square root function\n        //   2. Use the ceiling function\n        //   3. Use the power function\n        //   4. Use the modulo function\n        //   5. Use the multiplication function\n        //   6. Use the addition function\n        //   7. Use the comparison function\n        //   8. Use the conditional function\n        //   9. Use the return function\n        //\n        // Bonus:\n        //   1. Use the subtraction function\n        //   2. Use the division function\n        //   3. Use the floor function\n        //   4. Use the negation function\n        //   5. Use the equality function\n        //   6. Use the inequality function\n        //   7. Use the less than function\n        //   8. Use the less than or equal function\n        //   9. Use the greater than function\n        //   10. Use the greater than or equal function\n        //   11. Use the logical and function\n        //   12. Use the logical or function\n        //   13. Use the logical not function\n        //   14. Use the logical xor function\n        //   15. Use the logical nand function\n        //   16. Use the logical nor function\n        //   17. Use the logical xnor function\n        //   18. Use the logical implication function\n        //",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // Your code here\n        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return sqrt * sqrt == N ? (sqrt + 1) * (sqrt + 1) : -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        return (long)Math.Ceiling(Math.Sqrt(N)) * (long)Math.Ceiling(Math.Sqrt(N));",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) return (sqrt + 1) * (sqrt + 1);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long root = (long)Math.Sqrt(N);\n        return root * root == N ? (root + 1) * (root + 1) : -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // Your code here\n        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long root = (long)Math.Sqrt(N);\n        if (root * root == N) {\n            return (root + 1) * (root + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        // We can use the fact that the next perfect square is the current perfect square + 2*sqrt(N) + 1\n        // We can also use the fact that the square root of a perfect square is an integer\n        // So we can just increment N until we find a perfect square\n        long sqrtN = (long)Math.Sqrt(N);\n        while (sqrtN * sqrtN != N) {\n            N++;\n            sqrtN = (long)Math.Sqrt(N);\n        }\n        return N + 2 * sqrtN + 1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        else\n            return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i += 1;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        // Find the next perfect square greater than N\n        // Return -1 if it does not exist\n        //\n        // Example:\n        // N = 4\n        // Output = 9\n        //\n        // N = 5\n        // Output = -1\n        //\n        // N = 9\n        // Output = 16\n        //\n        // N = 16\n        // Output = 25\n        //\n        // N = 25\n        // Output = 36\n        //\n        // N = 36\n        // Output = 49\n        //\n        // N = 49\n        // Output = 64\n        //\n        // N = 64\n        // Output = 81\n        //\n        // N = 81\n        // Output = 100\n        //\n        // N = 100\n        // Output = 121\n        //\n        // N = 121\n        // Output = 144\n        //\n        // N = 144\n        // Output = 169\n        //\n        // N = 169\n        // Output = 196\n        //\n        // N = 196\n        // Output = 225\n        //\n        // N = 225\n        // Output = 256\n        //\n        // N = 256\n        // Output = 289\n        //\n        // N = 289\n        // Output = 324\n        //\n        // N = 324\n        // Output = 361\n        //\n        // N = 361\n        // Output = 400\n        //\n        // N = 400\n        // Output = 441\n        //\n        // N = 441\n        // Output = 484\n        //\n        // N = 484\n        // Output = 529\n        //\n        // N = 529\n        // Output = 576\n        //\n        // N = 576\n        // Output = 625\n        //\n        // N = 625\n        // Output = 676\n        //\n        // N = 676\n        // Output = 729\n        //\n        // N = 729\n        // Output = 784\n        //\n        // N = 784\n        // Output = 841\n        //\n        // N = 841\n        // Output = 900\n        //\n        // N = 900\n        // Output = 961\n        //\n        // N = 961\n        // Output = 1024\n        //",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        long next = (sqrt + 1) * (sqrt + 1);\n        return next;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // Find the next perfect square\n        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long root = (long)Math.Sqrt(N);\n        if (root * root == N) {\n            return (root + 1) * (root + 1);\n        }\n        return (root + 1) * (root + 1);",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        long next = sqrt + 1;\n        return next * next;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // We can use the fact that the next perfect square is always the previous perfect square plus 2 times the previous perfect square plus 1.\n        // We can also use the fact that the perfect squares are the odd numbers.\n        // We can also use the fact that the perfect squares are the triangular numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n odd numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n even numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n natural numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Pell numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Pell-Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Padovan numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Jacobsthal numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Jacobsthal-Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Pell numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Pell-Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Padovan numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Jacobsthal numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Fibonacci-Jacobsthal-Lucas numbers.\n        // We can also use the fact that the perfect squares are the sum of the first n Lucas-Pell numbers.\n       ",
    "        // Find the square root of the number\n        long squareRoot = (long)Math.Sqrt(N);\n        // If the square root is a perfect square, add 1 to it\n        if (squareRoot * squareRoot == N) {\n            squareRoot++;\n        }\n        // Return the square of the square root\n        return squareRoot * squareRoot;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        // (n + 1)^2 = n^2 + 2n + 1\n        // (n + 1)^2 - n^2 = 2n + 1\n        // (n + 1)^2 - n^2 - 1 = 2n\n        // (n + 1)^2 - n^2 - 2 = 2n - 1\n        // (n + 1)^2 - n^2 - 2n + 1 = 1\n        // (n + 1)^2 - (n^2 + 2n + 1) = 1\n        // (n + 1)^2 - (n + 1)^2 = 1\n        // 0 = 1\n        // This is a contradiction, so there is no such number.\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long x = (long)Math.Ceiling(Math.Sqrt(N));\n        return x * x;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // Find the square root of N\n        long sqrt = (long)Math.Sqrt(N);\n        // If the square root is a perfect square, add 1\n        if (sqrt * sqrt == N) {\n            sqrt += 1;\n        }\n        // Return the square of the square root\n        return sqrt * sqrt;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        else\n            return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        // Write your code here\n        long n = (long)Math.Ceiling(Math.Sqrt(N));\n        return n * n;",
    "        long root = (long)Math.Sqrt(N);\n        if (root * root == N) {\n            return (root + 1) * (root + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (true) {\n            if (i * i > N) {\n                return i * i;\n            }\n            i++;\n        }",
    "        // return (long)Math.Ceiling(Math.Sqrt(N)) * (long)Math.Ceiling(Math.Sqrt(N));\n        return (long)Math.Pow(Math.Ceiling(Math.Sqrt(N)), 2);",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i*i < N) {\n            i++;\n        }\n        return i*i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrtN = (long)Math.Sqrt(N);\n        if (sqrtN * sqrtN == N) {\n            return (sqrtN + 1) * (sqrtN + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long root = (long)Math.Sqrt(N);\n        if (root * root == N) {\n            return (root + 1) * (root + 1);\n        }\n        return (root + 1) * (root + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long root = (long)Math.Sqrt(N);\n        return (root + 1) * (root + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        else\n            return (sqrt + 1) * (sqrt + 1);",
    "        long root = (long)Math.Sqrt(N);\n        return root * root == N ? (root + 1) * (root + 1) : -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt+1)*(sqrt+1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        // Find the next perfect square\n        long nextPerfectSquare = (long)Math.Ceiling(Math.Sqrt(N));\n        nextPerfectSquare *= nextPerfectSquare;\n        return nextPerfectSquare;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long x = (long)Math.Sqrt(N);\n        return (x + 1) * (x + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N)\n            return (sqrt + 1) * (sqrt + 1);\n        else\n            return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long n = (long)Math.Sqrt(N);\n        return (n + 1) * (n + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);"
  ]
}