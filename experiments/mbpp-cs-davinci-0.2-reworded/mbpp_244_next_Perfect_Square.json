{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to find the next perfect square greater than a given number.\n    public static long NextPerfectSquare(long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPerfectSquare((35L)) == (36L));\n    Debug.Assert(NextPerfectSquare((6L)) == (9L));\n    Debug.Assert(NextPerfectSquare((9L)) == (16L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i*i <= N) {\n            i++;\n        }\n        return i*i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return (sqrt + 1) * (sqrt + 1);\n        }",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        // Find the next perfect square\n        long nextPerfectSquare = N;\n        while (true) {\n            nextPerfectSquare++;\n            long squareRoot = (long)Math.Sqrt(nextPerfectSquare);\n            if (squareRoot * squareRoot == nextPerfectSquare) {\n                break;\n            }\n        }\n        return nextPerfectSquare;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        // TODO: Implement this function\n        return 0;",
    "        // Find the next perfect square greater than N\n        long n = (long)Math.Sqrt(N);\n        return n * n == N ? (n + 1) * (n + 1) : -1;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.Sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long i = 1;\n        while (i * i < N) {\n            i++;\n        }\n        return i * i;",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        long sqrt = (long)Math.Sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long i = 1;\n        while (i * i <= N) {\n            i++;\n        }\n        return i * i;",
    "        // find the next perfect square\n        long next = (long)Math.Ceiling(Math.Sqrt(N));\n        return next * next;"
  ]
}