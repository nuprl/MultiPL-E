{
  "name": "mbpp_767_get_pairs_count",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing the sum\n        Dictionary<long, long> map = new Dictionary<long, long>();\n\n        long count = 0; // Initialize result\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < arr.Count; i++) {\n            // Initialize empty map to store count of sum-arr[i]\n            map.Clear();\n\n            // Store counts of all elements in map\n            for (int j = i; j < arr.Count; j++) {\n                // Initialize sum of elements in current pair\n                long curr_sum = arr[i] + arr[j];\n\n                // If not present, then store it in the map with\n                // count as 1\n                if (!map.ContainsKey(curr_sum))\n                    map.Add(curr_sum, 1);\n                else\n                    map[curr_sum]++;\n            }\n\n            // Traverse through all elements and increment\n            // count (Notice that every pair is counted twice)\n            foreach (var item in map) {\n                if (item.Key == sum)\n                    count += item.Value;\n            }\n        }\n\n        // Return result\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Iterate over the list and add each number to the dictionary\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate over the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumOccurences = dict[otherNum];\n                if (num == otherNum) {\n                    pairsCount += numOccurences * (numOccurences - 1) / 2;\n                } else {\n                    pairsCount += numOccurences * otherNumOccurences;\n                }\n            }\n        }\n        return pairsCount;",
    "        // create a hash table to store the number of times each number appears in the list\n        Dictionary<long, long> numCount = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCount.ContainsKey(num)) {\n                numCount[num]++;\n            } else {\n                numCount[num] = 1;\n            }\n        }\n        // iterate over the list and for each number check if there is another number in the list that sums up to sum\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long otherNum = sum - num;\n            if (numCount.ContainsKey(otherNum)) {\n                pairsCount += numCount[otherNum];\n            }\n        }\n        // return the number of pairs\n        return pairsCount;",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long count = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numCount = pair.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumCount = dict[otherNum];\n                count += numCount * otherNumCount;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long count = 0;\n        foreach (long num in arr) {\n            // If the number is not in the dictionary, skip it\n            if (!dict.ContainsKey(num)) {\n                continue;\n            }\n            // If the number is in the dictionary, remove it\n            dict.Remove(num);\n            // If the number that completes the pair is in the dictionary, add the number of times it appears\n            if (dict.ContainsKey(sum - num)) {\n                count += dict[sum - num];\n            }\n        }\n        return count;",
    "        // Initialize result\n        long count = 0;\n\n        // Consider all possible pairs and check their sums\n        for (int i = 0; i < arr.Count; i++)\n            for (int j = i + 1; j < arr.Count; j++)\n                if ((arr[i] + arr[j]) == sum)\n                    count++;\n\n        return count;",
    "        long count = 0;\n        // TODO: Write your code here\n        // O(n^2)\n        // for (int i = 0; i < arr.Count; i++) {\n        //     for (int j = i + 1; j < arr.Count; j++) {\n        //         if (arr[i] + arr[j] == sum) {\n        //             count++;\n        //         }\n        //     }\n        // }\n        // O(n)\n        Dictionary<long, long> map = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (map.ContainsKey(arr[i])) {\n                map[arr[i]]++;\n            } else {\n                map.Add(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            long target = sum - arr[i];\n            if (map.ContainsKey(target)) {\n                count += map[target];\n            }\n            if (target == arr[i]) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        long count = 0;\n        // TODO: Write your code here\n        // O(n) time | O(n) space\n        Dictionary<long, long> nums = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums.Add(num, 1);\n            }\n        }\n        foreach (long num in arr) {\n            long target = sum - num;\n            if (nums.ContainsKey(target)) {\n                count += nums[target];\n            }\n            if (target == num) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        // return the number of pairs of integers in the list that have a sum equal to sum.\n        // You can assume that the list does not contain duplicates and is sorted in ascending order.\n        // The running time of your algorithm should be O(n).\n        // You can use extra space O(n).\n        // Example:\n        // input array: [1, 2, 3, 4, 5], sum = 6\n        // output: 2\n        // Explanation: there are 2 pairs in the array that have a sum of 6: (1, 5) and (2, 4).\n        // input array: [1, 2, 3, 4, 5], sum = 10\n        // output: 0\n        // Explanation: there are no pairs in the array that have a sum of 10.\n        // input array: [1, 2, 3, 4, 5], sum = 5\n        // output: 1\n        // Explanation: there is 1 pair in the array that has a sum of 5: (1, 4).\n        // input array: [1, 2, 3, 4, 5], sum = 3\n        // output: 1\n        // Explanation: there is 1 pair in the array that has a sum of 3: (1, 2).\n        // input array: [1, 2, 3, 4, 5], sum = 7\n        // output: 2\n        // Explanation: there are 2 pairs in the array that have a sum of 7: (1, 6) and (2, 5).\n        // input array: [1, 2, 3, 4, 5], sum = 8\n        // output: 2\n        // Explanation: there are 2 pairs in the array that have a sum of 8: (1, 7) and (2, 6).\n        // input array: [1, 2, 3, 4, 5], sum = 9\n        // output: 2\n        // Explanation: there are 2 pairs in the array that have a sum of 9: (1, 8) and (2, 7).\n        // input array: [1, 2, 3, 4, 5], sum = 11\n        // output: 1\n        // Explanation: there is 1 pair in the array that has a sum of 11: (2, 9).\n        // input array: [1, 2,",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Loop through the list and add the number of times each number appears in the dictionary\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairsCount = 0;\n        // Loop through the dictionary and check if the sum - the current number is in the dictionary\n        foreach (KeyValuePair<long, long> pair in dict) {\n            if (dict.ContainsKey(sum - pair.Key)) {\n                // If the current number is equal to the sum - the current number, multiply the number of times the current number appears by the number of times the current number appears minus 1\n                if (pair.Key == sum - pair.Key) {\n                    pairsCount += pair.Value * (pair.Value - 1);\n                } else {\n                    // Else, multiply the number of times the current number appears by the number of times the sum - the current number appears\n                    pairsCount += pair.Value * dict[sum - pair.Key];\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairsCount / 2;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Create a dictionary to store the counts of the elements in the array\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // For each element in the array, add it to the dictionary if it does not exist, or increment its count if it does\n        foreach (long x in arr) {\n            if (dict.ContainsKey(x)) {\n                dict[x]++;\n            } else {\n                dict.Add(x, 1);\n            }\n        }\n        // Initialize the count of pairs to 0\n        long pairsCount = 0;\n        // For each element in the array, check if the dictionary contains the element that makes the sum\n        foreach (long x in arr) {\n            if (dict.ContainsKey(sum - x)) {\n                // If the element is the same as the element that makes the sum, then the count of pairs is the count of that element\n                if (x == sum - x) {\n                    pairsCount += dict[x] - 1;\n                } else {\n                    // Otherwise, the count of pairs is the count of the element that makes the sum\n                    pairsCount += dict[sum - x];\n                }\n            }\n        }\n        // Return the count of pairs\n        return pairsCount / 2;",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Loop through the list\n        for (int i = 0; i < arr.Count; i++) {\n            // If the current number is in the dictionary\n            if (dict.ContainsKey(arr[i])) {\n                // Increment the number of times it appears\n                dict[arr[i]]++;\n            }\n            // If the current number is not in the dictionary\n            else {\n                // Add it to the dictionary with a value of 1\n                dict.Add(arr[i], 1);\n            }\n        }\n        // Loop through the dictionary\n        foreach (KeyValuePair<long, long> entry in dict) {\n            // If the current number is less than the sum\n            if (entry.Key < sum) {\n                // If the number of times the current number appears is greater than 1\n                if (entry.Value > 1) {\n                    // Increment the number of pairs by the number of times the current number appears\n                    pairs += entry.Value;\n                }\n                // If the number of times the current number appears is 1\n                else {\n                    // If the dictionary contains the sum minus the current number\n                    if (dict.ContainsKey(sum - entry.Key)) {\n                        // Increment the number of pairs\n                        pairs++;\n                    }\n                }\n            }\n            // If the current number is equal to the sum\n            else if (entry.Key == sum) {\n                // If the number of times the current number appears is greater than 1\n                if (entry.Value > 1) {\n                    // Increment the number of pairs by the number of times the current number appears minus 1\n                    pairs += entry.Value - 1;\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairs;",
    "        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Loop through the list and add the number of occurences to the dictionary\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Loop through the dictionary\n        foreach (KeyValuePair<long, long> kvp in dict) {\n            // If the dictionary contains the difference between the sum and the current key,\n            if (dict.ContainsKey(sum - kvp.Key)) {\n                // Add the product of the number of occurences of the current key and the difference to the number of pairs\n                pairs += kvp.Value * dict[sum - kvp.Key];\n            }\n        }\n        // Return the number of pairs\n        return pairs;",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num] = dict[num] + 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a set to store the numbers that have already been used\n        HashSet<long> used = new HashSet<long>();\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            // If the number has already been used, continue\n            if (used.Contains(num)) {\n                continue;\n            }\n            // If the number is in the dictionary, add the number of times it appears to the pairs count\n            if (dict.ContainsKey(sum - num)) {\n                pairsCount += dict[num] * dict[sum - num];\n            }\n            // Add the number to the set of used numbers\n            used.Add(num);\n        }\n        return pairsCount;",
    "        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Iterate through the list\n        for (int i = 0; i < arr.Count; i++) {\n            // If the current number is in the dictionary\n            if (dict.ContainsKey(arr[i])) {\n                // Increment the number of times it appears\n                dict[arr[i]]++;\n            }\n            // If the current number is not in the dictionary\n            else {\n                // Add it to the dictionary\n                dict.Add(arr[i], 1);\n            }\n        }\n        // Iterate through the list\n        for (int i = 0; i < arr.Count; i++) {\n            // If the current number is in the dictionary\n            if (dict.ContainsKey(sum - arr[i])) {\n                // Increment the number of pairs by the number of times the current number appears\n                pairs += dict[arr[i]];\n                // If the current number is equal to the number that completes the sum\n                if (arr[i] == sum - arr[i]) {\n                    // Decrement the number of pairs by one\n                    pairs--;\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairs / 2;",
    "        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Iterate over the list\n        foreach (long num in arr) {\n            // If the number is already in the dictionary, increment its count\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            }\n            // Otherwise, add it to the dictionary with count 1\n            else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairsCount = 0;\n        // Iterate over the dictionary\n        foreach (KeyValuePair<long, long> pair in dict) {\n            // If the number is less than the sum, find the number that completes the sum\n            if (pair.Key < sum) {\n                long complement = sum - pair.Key;\n                // If the complement is in the dictionary, add the number of pairs to the count\n                if (dict.ContainsKey(complement)) {\n                    pairsCount += pair.Value * dict[complement];\n                }\n            }\n            // If the number is equal to the sum, add the number of pairs to the count\n            else if (pair.Key == sum) {\n                pairsCount += pair.Value * (pair.Value - 1) / 2;\n            }\n        }\n        // Return the number of pairs\n        return pairsCount;"
  ]
}