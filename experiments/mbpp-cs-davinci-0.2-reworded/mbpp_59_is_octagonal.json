{
  "name": "mbpp_59_is_octagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -(2 * n);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return -1;\n        if (x2 < 0) return -1;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n)\n            return a;\n        return -1;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        double x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == 2 * n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + 2*sqrt(1 + 3*n)) / 6\n        // x = (1 + sqrt(1 + 3*n)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) /",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x = (long)Math.Floor((-b + Math.Sqrt(d)) / (2 * a));\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        if ((1 + x) % 6 != 0) return 0;\n        return (1 + x) / 6;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 <= 0 || x2 <= 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x = (long)Math.Floor((-b + Math.Sqrt(d)) / (2 * a));\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2*n;\n        long d = b*b - 4*a*c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2*a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2*a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 12*n))/6\n        var x = (1 + Math.Sqrt(1 + 12*n))/6;\n        return x == (long)x ? n : 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n)\n            return nth;\n        else\n            return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) return x1;\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1)\n                return b;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 <= 0 || x2 <= 0) {\n            return 0;\n        }\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2*n + 0.25) - 0.5;\n        if (x*(3*x-2) == n) return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x2 < 0) return 0;\n        if (x1 == x2) return 0;\n        if (x1 % 1 != 0) return 0;\n        if (x2 % 1 != 0) return 0;\n        return x1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long n2 = n * 2;\n        long n3 = n * 3;\n        long n4 = n * 4;\n        long n5 = n * 5;\n        long n6 = n * 6;\n        long n7 = n * 7;\n        long n8 = n * 8;\n        long n9 = n * 9;\n        long n10 = n * 10;\n        long n11 = n * 11;\n        long n12 = n * 12;\n        long n13 = n * 13;\n        long n14 = n * 14;\n        long n15 = n * 15;\n        long n16 = n * 16;\n        long n17 = n * 17;\n        long n18 = n * 18;\n        long n19 = n * 19;\n        long n20 = n * 20;\n        long n21 = n * 21;\n        long n22 = n * 22;\n        long n23 = n * 23;\n        long n24 = n * 24;\n        long n25 = n * 25;\n        long n26 = n * 26;\n        long n27 = n * 27;\n        long n28 = n * 28;\n        long n29 = n * 29;\n        long n30 = n * 30;\n        long n31 = n * 31;\n        long n32 = n * 32;\n        long n33 = n * 33;\n        long n34 = n * 34;\n        long n35 = n * 35;\n        long n36 = n * 36;\n        long n37 = n * 37;\n        long n38 = n * 38;\n        long n39 = n * 39;\n        long n40 = n * 40;\n        long n41 = n * 41;\n        long n42 = n * 42;\n        long n43 = n * 43;\n        long n44 = n * 44;\n        long n45 = n * 45;\n        long n46 = n * 46;\n        long n47 = n * 47;\n        long n48 = n * 48;\n        long n49 = n * 49;\n        long n50 = n * 50;\n        long n51 = n * 51;\n        long n52 = n * 52;\n       ",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        long x = (long)Math.Sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == 2 * n) {\n            return x;\n        }\n        return 0;",
    "        // x^2 = 2n + 1/3\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (2n + 1/3)^1/2\n        // x = (",
    "        double r = (Math.Sqrt(24*n+1)+1)/6;\n        return (long)r == r ? (long)r : 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return 0;\n        }",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        long x = (long)Math.Floor((2 + Math.Sqrt(4 + 12*n)) / 6);\n        return x*(3*x - 2);",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        //",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == x2) return 0;\n        if (x1 % 1 != 0 || x2 % 1 != 0) return 0;\n        return Math.Max(x1, x2);",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return -1;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (int)x1) return (long)x1;\n        if (x2 > 0 && x2 == (int)x2) return (long)x2;\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 != 0) {\n                return b;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) return x1;\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) return x2;\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x2 < 0) return 0;\n        if (x1 == (x1 * x1 * 2 - 1) / 2) return x1;\n        if (x2 == (x2 * x2 * 2 - 1) / 2) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n       ",
    "        long nth = 0;\n        long nth_1 = 0;\n        long nth_2 = 0;\n        long nth_3 = 0;\n        long nth_4 = 0;\n        long nth_5 = 0;\n        long nth_6 = 0;\n        long nth_7 = 0;\n        long nth_8 = 0;\n        long nth_9 = 0;\n        long nth_10 = 0;\n        long nth_11 = 0;\n        long nth_12 = 0;\n        long nth_13 = 0;\n        long nth_14 = 0;\n        long nth_15 = 0;\n        long nth_16 = 0;\n        long nth_17 = 0;\n        long nth_18 = 0;\n        long nth_19 = 0;\n        long nth_20 = 0;\n        long nth_21 = 0;\n        long nth_22 = 0;\n        long nth_23 = 0;\n        long nth_24 = 0;\n        long nth_25 = 0;\n        long nth_26 = 0;\n        long nth_27 = 0;\n        long nth_28 = 0;\n        long nth_29 = 0;\n        long nth_30 = 0;\n        long nth_31 = 0;\n        long nth_32 = 0;\n        long nth_33 = 0;\n        long nth_34 = 0;\n        long nth_35 = 0;\n        long nth_36 = 0;\n        long nth_37 = 0;\n        long nth_38 = 0;\n        long nth_39 = 0;\n        long nth_40 = 0;\n        long nth_41 = 0;\n        long nth_42 = 0;\n        long nth_43 = 0;\n        long nth_44 = 0;\n        long nth_45 = 0;\n        long nth_46 = 0;\n        long nth_47 = 0;\n        long nth_48 = 0;\n        long nth_49 = 0;\n        long nth_50 = 0;\n        long n",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +/- sqrt(4 + 24*n)) / 6\n        // x = (1 +/- sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (1 + sqrt(1 + 6*n)) / 3\n        // x = (1 - sqrt(1 + 6*n)) / 3\n        // x = (",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        var d = 4 + 12 * n;\n        var s = (long)Math.Sqrt(d);\n        if (s * s != d) return 0;\n        var x = (2 + s) / 6;\n        if (x * (3 * x - 2) != 2 * n) return 0;\n        return n;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x)/2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2+sqrt(4+12*n))/6\n        double x = (2 + Math.Sqrt(4 + 12 * n)) / 6;\n        if (x == (int)x)\n            return (int)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * x1 * x1 == n) return x1;\n        if (x2 > 0 && x2 * x2 * x2 == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return 0;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        return (long)((Math.Sqrt(24*n+1)+1)/6);",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        long t = (long)Math.Sqrt(n);\n        if (t * t == n) {\n            long t2 = (long)Math.Sqrt(t);\n            if (t2 * t2 == t && t2 % 2 == 1) {\n                return t2;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x =",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n && (x % 2) == 1) return x;\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long nth = 0;\n        for (int i = 1; nth < n; i++) {\n            nth = i * (3 * i - 2);\n            if (nth == n) {\n                return nth;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long a = (long)Math.Sqrt(1 + 24 * n);\n        if (a * a != 1 + 24 * n) return 0;\n        a += 1;\n        if (a % 6 != 0) return 0;\n        a /= 6;\n        return a;",
    "        double root = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (root == (long)root)\n            return (long)root;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x + 1/4 - 1/4\n        // n = (3*x - 1/2)^2 - 1/4\n        // n = (3*x - 1/2)^2 - 1/4 + 1/16 - 1/16\n        // n = ((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16\n        // n = ((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256 - 1/256\n        // n = (((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256\n        // n = (((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256 + 1/65536 - 1/65536\n        // n = ((((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256 + 1/65536)^2 - 1/65536\n        // n = ((((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256 + 1/65536)^2 - 1/65536 + 1/4294967296 - 1/4294967296\n        // n = (((((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256 + 1/65536)^2 - 1/65536 + 1/4294967296)^2 - 1/4294967296\n        // n = (((((3*x - 1/2)^2 - 1/4 + 1/16)^2 - 1/16 + 1/256)^2 - 1/256",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        var x = (2 + (long)Math.Sqrt(4 + 12*n)) / 6;\n        if (x * (3 * x - 2) == n) return x;\n        x = (2 - (long)Math.Sqrt(4 + 12*n)) / 6;\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x must be an integer\n        double x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return -1;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 1 != 0 && x2 % 1 != 0) {\n            return -1;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        return x2;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long m = (long)Math.Sqrt(n);\n        if (m * m == n) {\n            if ((m & 1) == 1) {\n                return m;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        var a = (long)Math.Sqrt(1 + 24 * n);\n        if (a * a != 1 + 24 * n) return 0;\n        var b = 1 + a;\n        if (b % 6 != 0) return 0;\n        var c = b / 6;\n        if (c <= 0) return 0;\n        return c;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        long x = (-b + d) / (2 * a);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // x^2 - x - 2n = 0\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 + 8n)) / 2\n        // x = (1 + sqrt(1 + 8n)) / 2\n        // x = (1 - sqrt(1 +",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return (x + 1) / 2;\n            }\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        double x = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long n2 = n * 2;\n        long n3 = n * 3;\n        long n4 = n * 4;\n        long n5 = n * 5;\n        long n6 = n * 6;\n        long n7 = n * 7;\n        long n8 = n * 8;\n        long n9 = n * 9;\n        long n10 = n * 10;\n        long n11 = n * 11;\n        long n12 = n * 12;\n        long n13 = n * 13;\n        long n14 = n * 14;\n        long n15 = n * 15;\n        long n16 = n * 16;\n        long n17 = n * 17;\n        long n18 = n * 18;\n        long n19 = n * 19;\n        long n20 = n * 20;\n        long n21 = n * 21;\n        long n22 = n * 22;\n        long n23 = n * 23;\n        long n24 = n * 24;\n        long n25 = n * 25;\n        long n26 = n * 26;\n        long n27 = n * 27;\n        long n28 = n * 28;\n        long n29 = n * 29;\n        long n30 = n * 30;\n        long n31 = n * 31;\n        long n32 = n * 32;\n        long n33 = n * 33;\n        long n34 = n * 34;\n        long n35 = n * 35;\n        long n36 = n * 36;\n        long n37 = n * 37;\n        long n38 = n * 38;\n        long n39 = n * 39;\n        long n40 = n * 40;\n        long n41 = n * 41;\n        long n42 = n * 42;\n        long n43 = n * 43;\n        long n44 = n * 44;\n        long n45 = n * 45;\n        long n46 = n * 46;\n        long n47 = n * 47;\n        long n48 = n * 48;\n        long n49 = n * 49;\n        long n50 = n * 50;\n        long n51 = n * 51;\n        long n52 = n * 52;\n       ",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 1 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long t = (long)Math.Sqrt(1 + 24 * n);\n        if (t * t != 1 + 24 * n) return 0;\n        t += 1;\n        if (t % 6 != 0) return 0;\n        t /= 6;\n        return t;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x =",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        if (x < 0) return 0;\n        long y = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (y < 0) return 0;\n        return x == y ? x : 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + 2*sqrt(1 + 3*n)) / 6\n        // x = (1 + sqrt(1 + 3*n)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x",
    "        long a = 1;\n        long b = 1;\n        long c = -2*n;\n        long d = b*b - 4*a*c;\n        if (d < 0) {\n            return -1;\n        }\n        double x1 = (-b + Math.Sqrt(d))/(2*a);\n        double x2 = (-b - Math.Sqrt(d))/(2*a);\n        if (x1 > 0 && x1 == (int)x1) {\n            return (long)x1;\n        }\n        if (x2 > 0 && x2 == (int)x2) {\n            return (long)x2;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) return x1;\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) return x2;\n        return 0;",
    "        double root = Math.Sqrt(1 + 24 * n);\n        if (root != (long)root) return 0;\n        root += 1;\n        if (root % 6 != 0) return 0;\n        root /= 6;\n        return (long)root;",
    "        long a = (long)Math.Sqrt(n);\n        return a * a == n && (a & 1) == 1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x % 2) == 0) {\n                return x;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        long x = (long)Math.Ceiling((2 + Math.Sqrt(4 + 12*n)) / 6.0);\n        return (3*x*x - 2*x) / 2;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 <= 0 || x2 <= 0) return 0;\n        if (x1 % 1 == 0) return x1;\n        if (x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == (x1 * x1 * x1 + 3 * x1 + 2) / 2) return x1;\n        if (x2 == (x2 * x2 * x2 + 3 * x2 + 2) / 2) return x2;\n        return 0;",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24*n)) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x + 0\n        // n = 3*x^2 - 2*x + 1/4 - 1/4\n        // n = (3*x - 1/2)^2 - 1/4\n        // n = (3*x - 1/2)^2 - 1/4 + 1/16 - 1/16\n        // n = (3*x - 1/2 + 1/4)^2 - 1/16\n        // n = (3*x - 1/2 + 1/4)^2 - 1/16 + 9/256 - 9/256\n        // n = (3*x - 1/2 + 1/4 + 3/16)^2 - 9/256\n        // n = (3*x - 1/2 + 1/4 + 3/16)^2 - 9/256 + 81/4096 - 81/4096\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64)^2 - 81/4096\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64)^2 - 81/4096 + 729/65536 - 729/65536\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64 + 27/256)^2 - 729/65536\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64 + 27/256)^2 - 729/65536 + 6561/1048576 - 6561/1048576\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64 + 27/256 + 81/1024)^2 - 6561/1048576\n        // n = (3*x - 1/2 + 1/4 + 3/16 + 9/64 + 27/256 + 81/1024)^2 - 6561/1048576 + 59049/16777216 - 59049/16777216",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return -1;\n        x += 1;\n        if (x % 6 != 0) return -1;\n        x /= 6;\n        return x;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return 0;",
    "        long i = 1;\n        while (true) {\n            long oct = i * (3 * i - 2);\n            if (oct == n) {\n                return i;\n            }\n            if (oct > n) {\n                return 0;\n            }\n            i++;\n        }",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24*n)) / 6;\n        return x == (long)x ? n : 0;",
    "        double root = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (root == (long)root) {\n            return (long)root;\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        double x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + Math.Sqrt(4 + 12*n)) / 6;\n        if (x == Math.Floor(x))\n            return (long)x;\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // n = 3*x^2 - x\n        // 0 = 3*x^2 - x - 2*n\n        // 0 = x^2 - (1/3)*x - (2/3)*n\n        // x = (1/6) +- sqrt((1/36) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((1/9) + (4/3)*n)\n        // x = (1/6) +- sqrt((",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : 0;",
    "        long x = (long)Math.Sqrt(2 * n + 0.125) - 0.5;\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 +- sqrt(4 + 24*n)) / 6\n        // x = (2 +- sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        // x = (2 + sqrt(4 + 24*n))",
    "        return (long)((Math.Sqrt(8 * n + 1) + 1) / 4);",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        if (x < 0) {\n            return -1;\n        }\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * x1 * x1 + x1) / 2) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 * x2 * x2 + x2) / 2) {\n            return x2;\n        }\n        return -1;",
    "        long d = 1 + 24 * n;\n        long sqrt = (long)Math.Sqrt(d);\n        if (sqrt * sqrt != d) return 0;\n        if ((1 + sqrt) % 6 != 0) return 0;\n        return (1 + sqrt) / 6;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        double x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == (long)x) return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + (long)Math.Sqrt(4 + 12 * n)) / 6;\n        if (x * (3 * x - 2) == 2 * n)\n            return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x = (-b + d) / (2 * a);\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if (a % 2 == 0) {\n                return a / 2;\n            }\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        double x = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == (long)x1) return (long)x1;\n        if (x2 == (long)x2) return (long)x2;\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // n = (3*x - 1)*x/2\n        // 2*n = (3*x - 1)*x\n        // 2*n = 3*x^2 - x\n        // 2*n + 1 = 3*x^2\n        // (2*n + 1)^(1/2) = x^2\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x = (2*n + 1)^(1/2)\n        // x =",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long nth = 0;\n        for (long i = 1; nth < n; i++) {\n            nth = i * (3 * i - 2);\n            if (nth == n) {\n                return nth;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            x = (long)Math.Sqrt(x);\n            if (x * x == n) {\n                return x;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -(n << 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return -1;\n        if (x2 < 0) return -1;\n        if (x1 % 1 == 0) return x1;\n        if (x2 % 1 == 0) return x2;\n        return -1;"
  ]
}