{
  "name": "mbpp_59_is_octagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -(2 * n);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return -1;\n        if (x2 < 0) return -1;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n)\n            return a;\n        return -1;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        double x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == 2 * n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + 2*sqrt(1 + 3*n)) / 6\n        // x = (1 + sqrt(1 + 3*n)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) / 3\n        // x = (1 + sqrt(3*n + 1)) /",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x = (long)Math.Floor((-b + Math.Sqrt(d)) / (2 * a));\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        if ((1 + x) % 6 != 0) return 0;\n        return (1 + x) / 6;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 <= 0 || x2 <= 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x = (long)Math.Floor((-b + Math.Sqrt(d)) / (2 * a));\n        if (x * (3 * x - 2) == n) return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2*n;\n        long d = b*b - 4*a*c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2*a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2*a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;"
  ]
}