{
  "name": "mbpp_222_check_type",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static bool CheckType(object test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckType(Tuple.Create(5L, 6L, 7L, 3L, 5L, 6L)) == (true));\n    Debug.Assert(CheckType(Tuple.Create(1L, 2L, \"4\")) == (false));\n    Debug.Assert(CheckType(Tuple.Create(3L, 2L, 1L, 4L, 5L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            return types.All(t => t == types[0]);\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != types[0]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType) {\n            Type[] generic_types = type.GetGenericArguments();\n            Type first_type = generic_types[0];\n            foreach (Type t in generic_types) {\n                if (t != first_type) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            return types[0] == types[1];\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            return types[0] == types[1];\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            return types.All(t => t == types[0]);\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            var types = type.GetGenericArguments();\n            return types.All(t => t == types[0]);\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            return types[0] == types[1];\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType) {\n            Type[] generic_args = type.GetGenericArguments();\n            Type first_arg = generic_args[0];\n            foreach (Type arg in generic_args) {\n                if (arg != first_arg) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types.Length == 0) {\n                return true;\n            }\n            Type first_type = types[0];\n            foreach (Type t in types) {\n                if (t != first_type) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType) {\n            Type[] types = t.GetGenericArguments();\n            if (types.Length == 0) {\n                return true;\n            }\n            Type first = types[0];\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types.Length == 1) {\n                return true;\n            }\n            Type first = types[0];\n            for (int i = 1; i < types.Length; i++) {\n                if (types[i] != first) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }",
    "        Type type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = type.GetGenericArguments();\n            if (types[0] == types[1]) {\n                return true;\n            }\n        }\n        return false;",
    "        Type t = test_tuple.GetType();\n        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Tuple<,>)) {\n            Type[] types = t.GetGenericArguments();\n            return types[0] == types[1];\n        }\n        return false;",
    "        var type = test_tuple.GetType();\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Tuple<>)) {\n            var types = type.GetGenericArguments();\n            if (types.Length > 0) {\n                var first = types[0];\n                return types.All(t => t == first);\n            }\n        }\n        return false;",
    "        var tuple_type = test_tuple.GetType();\n        var tuple_type_name = tuple_type.Name;\n        var tuple_type_namespace = tuple_type.Namespace;\n        var tuple_type_fullname = tuple_type.FullName;\n        var tuple_type_assembly = tuple_type.Assembly;\n        var tuple_type_assembly_name = tuple_type.Assembly.GetName();\n        var tuple_type_assembly_name_name = tuple_type.Assembly.GetName().Name;\n        var tuple_type_assembly_name_version = tuple_type.Assembly.GetName().Version;\n        var tuple_type_assembly_name_version_major = tuple_type.Assembly.GetName().Version.Major;\n        var tuple_type_assembly_name_version_minor = tuple_type.Assembly.GetName().Version.Minor;\n        var tuple_type_assembly_name_version_build = tuple_type.Assembly.GetName().Version.Build;\n        var tuple_type_assembly_name_version_revision = tuple_type.Assembly.GetName().Version.Revision;\n        var tuple_type_assembly_name_version_major_rev = tuple_type.Assembly.GetName().Version.MajorRevision;\n        var tuple_type_assembly_name_version_minor_rev = tuple_type.Assembly.GetName().Version.MinorRevision;\n        var tuple_type_assembly_name_version_string = tuple_type.Assembly.GetName().Version.ToString();\n        var tuple_type_assembly_name_version_string_split = tuple_type.Assembly.GetName().Version.ToString().Split('.');\n        var tuple_type_assembly_name_version_string_split_0 = tuple_type.Assembly.GetName().Version.ToString().Split('.')[0];\n        var tuple_type_assembly_name_version_string_split_1 = tuple_type.Assembly.GetName().Version.ToString().Split('.')[1];\n        var tuple_type_assembly_name_version_string_split_2 = tuple_type.Assembly.GetName().Version.ToString().Split('.')[2];\n        var tuple",
    "        var tuple_type = test_tuple.GetType();\n        var tuple_type_name = tuple_type.Name;\n        var tuple_type_generic_args = tuple_type.GetGenericArguments();\n        var tuple_type_generic_args_name = tuple_type_generic_args[0].Name;\n        for (int i = 1; i < tuple_type_generic_args.Length; i++) {\n            if (tuple_type_generic_args[i].Name != tuple_type_generic_args_name) {\n                return false;\n            }\n        }\n        return true;"
  ]
}