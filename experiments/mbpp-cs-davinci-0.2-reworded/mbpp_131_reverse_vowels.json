{
  "name": "mbpp_131_reverse_vowels",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to reverse only the vowels of a given string (where y is not a vowel).\n    public static string ReverseVowels(string str1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseVowels((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(ReverseVowels((\"USA\")).Equals((\"ASU\")));\n    Debug.Assert(ReverseVowels((\"ab\")).Equals((\"ab\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        string vowels = \"aeiouAEIOU\";\n        int left = 0;\n        int right = str1.Length - 1;\n        char[] str2 = str1.ToCharArray();\n        while (left < right) {\n            while (left < right && !vowels.Contains(str2[left])) {\n                left++;\n            }\n            while (left < right && !vowels.Contains(str2[right])) {\n                right--;\n            }\n            char temp = str2[left];\n            str2[left] = str2[right];\n            str2[right] = temp;\n            left++;\n            right--;\n        }\n        return new string(str2);",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str = str1.ToCharArray();\n        int start = 0;\n        int end = str.Length - 1;\n        while (start < end) {\n            if (!vowels.Contains(str[start])) {\n                start++;\n            }\n            if (!vowels.Contains(str[end])) {\n                end--;\n            }\n            if (vowels.Contains(str[start]) && vowels.Contains(str[end])) {\n                char temp = str[start];\n                str[start] = str[end];\n                str[end] = temp;\n                start++;\n                end--;\n            }\n        }\n        return new string(str);",
    "        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (IsVowel(str[i]) && IsVowel(str[j])) {\n                char temp = str[i];\n                str[i] = str[j];\n                str[j] = temp;\n                i++;\n                j--;\n            }\n            else if (IsVowel(str[i]) && !IsVowel(str[j])) {\n                j--;\n            }\n            else if (!IsVowel(str[i]) && IsVowel(str[j])) {\n                i++;\n            }\n            else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str);",
    "        string vowels = \"aeiouAEIOU\";\n        char[] str1Array = str1.ToCharArray();\n        int start = 0;\n        int end = str1.Length - 1;\n        while (start < end) {\n            if (vowels.Contains(str1Array[start]) && vowels.Contains(str1Array[end])) {\n                char temp = str1Array[start];\n                str1Array[start] = str1Array[end];\n                str1Array[end] = temp;\n                start++;\n                end--;\n            } else if (vowels.Contains(str1Array[start])) {\n                end--;\n            } else if (vowels.Contains(str1Array[end])) {\n                start++;\n            } else {\n                start++;\n                end--;\n            }\n        }\n        return new string(str1Array);",
    "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        var str = str1.ToCharArray();\n        int i = 0, j = str.Length - 1;\n        while (i < j) {\n            if (!vowels.Contains(str[i])) {\n                i++;\n                continue;\n            }\n            if (!vowels.Contains(str[j])) {\n                j--;\n                continue;\n            }\n            var temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(str);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of characters\n        List<char> chars = new List<char>();\n        // Create a list of indexes\n        List<int> indexes = new List<int>();\n        // Loop through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the character is a vowel, add it to the list of characters and add the index to the list of indexes\n            if (vowels.Contains(str1[i])) {\n                chars.Add(str1[i]);\n                indexes.Add(i);\n            }\n        }\n        // Reverse the list of characters\n        chars.Reverse();\n        // Create a string builder\n        StringBuilder sb = new StringBuilder(str1);\n        // Loop through the list of indexes\n        for (int i = 0; i < indexes.Count; i++) {\n            // Replace the character at the index with the character at the index in the list of characters\n            sb[indexes[i]] = chars[i];\n        }\n        // Return the string\n        return sb.ToString();",
    "        string vowels = \"aeiouAEIOU\";\n        int i = 0;\n        int j = str1.Length - 1;\n        char[] str = str1.ToCharArray();\n        while (i < j) {\n            while (i < j && !vowels.Contains(str[i])) {\n                i++;\n            }\n            while (i < j && !vowels.Contains(str[j])) {\n                j--;\n            }\n            if (i < j) {\n                char temp = str[i];\n                str[i] = str[j];\n                str[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        return new string(str);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        // Create a list of the characters in the string\n        List<char> chars = new List<char>();\n        foreach (char c in str1) {\n            chars.Add(c);\n        }\n        // Create a list of the indices of the vowels in the string\n        List<int> vowelIndices = new List<int>();\n        for (int i = 0; i < chars.Count; i++) {\n            if (vowels.Contains(chars[i])) {\n                vowelIndices.Add(i);\n            }\n        }\n        // Reverse the vowels in the string\n        for (int i = 0; i < vowelIndices.Count / 2; i++) {\n            char temp = chars[vowelIndices[i]];\n            chars[vowelIndices[i]] = chars[vowelIndices[vowelIndices.Count - 1 - i]];\n            chars[vowelIndices[vowelIndices.Count - 1 - i]] = temp;\n        }\n        // Return the reversed string\n        return new string(chars.ToArray());",
    "        // Create a list of vowels\n        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of chars to hold the reversed vowels\n        List<char> reversedVowels = new List<char>();\n        // Create a list of chars to hold the non-vowels\n        List<char> nonVowels = new List<char>();\n        // Create a list of chars to hold the final string\n        List<char> finalString = new List<char>();\n        // Loop through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the current char is a vowel, add it to the reversedVowels list\n            if (vowels.Contains(str1[i])) {\n                reversedVowels.Add(str1[i]);\n            }\n            // Else, add it to the nonVowels list\n            else {\n                nonVowels.Add(str1[i]);\n            }\n        }\n        // Reverse the reversedVowels list\n        reversedVowels.Reverse();\n        // Loop through the nonVowels list\n        for (int i = 0; i < nonVowels.Count; i++) {\n            // Add the current char to the finalString list\n            finalString.Add(nonVowels[i]);\n            // If the current index is less than the reversedVowels list count, add the current char to the finalString list\n            if (i < reversedVowels.Count) {\n                finalString.Add(reversedVowels[i]);\n            }\n        }\n        // Return the finalString list as a string\n        return new string(finalString.ToArray());",
    "        string vowels = \"aeiouAEIOU\";\n        char[] arr = str1.ToCharArray();\n        int i = 0;\n        int j = str1.Length - 1;\n        while (i < j) {\n            while (i < j && !vowels.Contains(arr[i])) {\n                i++;\n            }\n            while (i < j && !vowels.Contains(arr[j])) {\n                j--;\n            }\n            if (i < j) {\n                char temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        return new string(arr);",
    "        int i = 0;\n        int j = str1.Length - 1;\n        char[] str = str1.ToCharArray();\n        while (i < j) {\n            if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u') {\n                if (str[j] == 'a' || str[j] == 'e' || str[j] == 'i' || str[j] == 'o' || str[j] == 'u') {\n                    char temp = str[i];\n                    str[i] = str[j];\n                    str[j] = temp;\n                    i++;\n                    j--;\n                } else {\n                    j--;\n                }\n            } else {\n                i++;\n            }\n        }\n        return new string(str);",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (!vowels.Contains(str[i])) {\n                i++;\n                continue;\n            }\n            if (!vowels.Contains(str[j])) {\n                j--;\n                continue;\n            }\n            char temp = str[i];\n            str[i] = str[j];\n            str[j] = temp;\n            i++;\n            j--;\n        }\n        return new string(str);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        // Create a list of characters\n        List<char> chars = new List<char>();\n        // Create a list of indices\n        List<int> indices = new List<int>();\n        // Iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the character is a vowel\n            if (vowels.Contains(str1[i])) {\n                // Add the character to the list of characters\n                chars.Add(str1[i]);\n                // Add the index to the list of indices\n                indices.Add(i);\n            }\n        }\n        // Reverse the list of characters\n        chars.Reverse();\n        // Create a string builder\n        StringBuilder sb = new StringBuilder(str1);\n        // Iterate through the list of indices\n        for (int i = 0; i < indices.Count; i++) {\n            // Replace the character at the index with the character at the index of the reversed list\n            sb[indices[i]] = chars[i];\n        }\n        // Return the string\n        return sb.ToString();",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1Array.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str1Array[i]) && vowels.Contains(str1Array[j])) {\n                char temp = str1Array[i];\n                str1Array[i] = str1Array[j];\n                str1Array[j] = temp;\n                i++;\n                j--;\n            }\n            else if (vowels.Contains(str1Array[i])) {\n                j--;\n            }\n            else if (vowels.Contains(str1Array[j])) {\n                i++;\n            }\n            else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str1Array);",
    "        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (IsVowel(str[i]) && IsVowel(str[j])) {\n                char temp = str[i];\n                str[i] = str[j];\n                str[j] = temp;\n                i++;\n                j--;\n            } else if (IsVowel(str[i])) {\n                j--;\n            } else if (IsVowel(str[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str);",
    "        char[] str = str1.ToCharArray();\n        int i = 0;\n        int j = str.Length - 1;\n        while (i < j) {\n            if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u') {\n                if (str[j] == 'a' || str[j] == 'e' || str[j] == 'i' || str[j] == 'o' || str[j] == 'u') {\n                    char temp = str[i];\n                    str[i] = str[j];\n                    str[j] = temp;\n                    i++;\n                    j--;\n                } else {\n                    j--;\n                }\n            } else {\n                i++;\n            }\n        }\n        return new string(str);",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1Array.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str1Array[i]) && vowels.Contains(str1Array[j])) {\n                char temp = str1Array[i];\n                str1Array[i] = str1Array[j];\n                str1Array[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str1Array[i])) {\n                j--;\n            } else if (vowels.Contains(str1Array[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str1Array);",
    "        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] str1Array = str1.ToCharArray();\n        int i = 0;\n        int j = str1Array.Length - 1;\n        while (i < j) {\n            if (vowels.Contains(str1Array[i])) {\n                if (vowels.Contains(str1Array[j])) {\n                    char temp = str1Array[i];\n                    str1Array[i] = str1Array[j];\n                    str1Array[j] = temp;\n                    i++;\n                    j--;\n                } else {\n                    j--;\n                }\n            } else {\n                i++;\n            }\n        }\n        return new string(str1Array);",
    "        string vowels = \"aeiouAEIOU\";\n        int i = 0;\n        int j = str1.Length - 1;\n        char[] str1Arr = str1.ToCharArray();\n        while (i < j) {\n            if (vowels.Contains(str1Arr[i]) && vowels.Contains(str1Arr[j])) {\n                char temp = str1Arr[i];\n                str1Arr[i] = str1Arr[j];\n                str1Arr[j] = temp;\n                i++;\n                j--;\n            } else if (vowels.Contains(str1Arr[i])) {\n                j--;\n            } else if (vowels.Contains(str1Arr[j])) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return new string(str1Arr);",
    "        // Create a list of vowels\n        List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        // Create a list of chars to hold the vowels\n        List<char> vowelList = new List<char>();\n        // Create a list of chars to hold the consonants\n        List<char> consonantList = new List<char>();\n        // Create a list of chars to hold the reversed vowels\n        List<char> reversedVowelList = new List<char>();\n        // Create a list of chars to hold the reversed consonants\n        List<char> reversedConsonantList = new List<char>();\n        // Create a list of chars to hold the final string\n        List<char> finalList = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedList = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedString = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedVowels = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedConsonants = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalList = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalString = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalVowels = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalConsonants = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalVowelList = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalConsonantList = new List<char>();\n        // Create a list of chars to hold the reversed string\n        List<char> reversedFinalRe"
  ]
}