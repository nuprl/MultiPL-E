{
  "name": "mbpp_556_find_Odd_Pair",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long oddCount = 0;\n        long evenCount = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return oddCount * evenCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long oddCount = 0;\n        long evenCount = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return oddCount * evenCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = i + 1; j < N; j++)\n            {\n                if ((A[i] ^ A[j]) % 2 != 0)\n                    count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw44ruhbn.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw44ruhbn.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6ppx86qd.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6ppx86qd.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        // Return the number of odd pairs\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw44ruhbn.cs(15,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpw44ruhbn.cs(15,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long oddCount = 0;\n        long evenCount = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return oddCount * evenCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            }\n            else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = i + 1; j < N; j++)\n            {\n                if ((A[i] ^ A[j]) % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6ppx86qd.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6ppx86qd.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long oddCount = 0;\n        long evenCount = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return oddCount * evenCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here.\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6ppx86qd.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6ppx86qd.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (int i = 0; i < N; i++) {\n            if (A[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd = 0;\n        long even = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return odd * even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long odd_count = 0;\n        long even_count = 0;\n        for (long i = 0; i < N; i++) {\n            if (A[(int)i] % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        return odd_count * even_count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1666122959,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n",
      "timestamp": 1665510017,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4c_9rnt3.cs(14,24): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp4c_9rnt3.cs(14,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}