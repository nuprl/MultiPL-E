{
  "name": "mbpp_743_rotate_right",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/csthon-program-right-rotate-list-n/\n    public static List<long> RotateRight(List<long> list, long m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (3L)).Equals((new List<long>(new long[]{(long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        var n = list.Count;\n        var result = new List<long>(n);\n        for (long i = 0; i < n; i++) {\n            result.Add(list[(int)((i + m) % n)]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            int index = (int)((i + m) % list.Count);\n            result.Add(list[index]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < list.Count; i++) {\n            result.Add(list[(i + m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = list.Count - m; i < list.Count; i++) {\n            result.Add(list[(int)i]);\n        }\n        for (long i = 0; i < list.Count - m; i++) {\n            result.Add(list[(int)i]);\n        }\n        return result;",
    "        // Rotate the list m times\n        for (int i = 0; i < m; i++) {\n            // Remove the last element of the list and add it to the beginning\n            list.Insert(0, list[list.Count - 1]);\n            list.RemoveAt(list.Count - 1);\n        }\n        return list;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (long i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        // Rotate the list m times to the right\n        for (long i = 0; i < m; i++) {\n            long last = list[list.Count - 1];\n            list.RemoveAt(list.Count - 1);\n            list.Insert(0, last);\n        }\n        return list;",
    "        var result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(int)((i + m) % list.Count)]);\n        }\n        return result;",
    "        var result = new List<long>();\n        var n = list.Count;\n        for (int i = 0; i < n; i++) {\n            result.Add(list[(int)((i + m) % n)]);\n        }\n        return result;",
    "        var result = new List<long>();\n        for (int i = 0; i < list.Count; i++) {\n            result.Add(list[(i + (int)m) % list.Count]);\n        }\n        return result;"
  ]
}