name: HumanEval_71_triangle_area
language: rust
results:
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        x => if a + b > c { 1.0 } else { -1.0 },\n        y => if b + c > a {\
    \ 1.0 } else { -1.0 },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpmtsw3hhd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut s = 0.0;\n    if a + b > c {\n        s\
    \ = s + (b - c) * (b + c) / 2.0;\n    }\n    if a + c > b {\n        s = s + (c\
    \ - a) * (c + a) / 2.0;\n    }\n    if b + c > a {\n        s = s + (a - b) *\
    \ (a + b) / 2.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphn923m_t.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmphn923m_t.rs:21:35\n   |\n21 |   \
    \      s = s + (b - c) * (b + c) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmphn923m_t.rs:24:35\n   |\n24 |         s = s + (c - a) * (c + a)\
    \ / 2.0;\n   |                                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphn923m_t.rs:27:35\n\
    \   |\n27 |         s = s + (a - b) * (a + b) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the foll"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * b - 4 * a * c;\n    }\n    \n    if a > c {\n        area\
    \ += c * c - 4 * a * b;\n    }\n    \n    if b > c {\n        area += a * a -\
    \ 4 * b * c;\n    }\n    \n    if area < 0.0 {\n        area = 0.0;\n    }\n \
    \   \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo13ctni4.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpo13ctni4.rs:23:14\n   |\n23 |\
    \         area += b * b - 4 * a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpo13ctni4.rs:27:14\n\
    \   |\n27 |         area += c * c - 4 * a * b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpo13ctni4.rs:31:14\n   |\n31 |         area += a * a - 4 * b * c;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += (b - a) * (b - c);\n    }\n    \n    if a > c {\n        area\
    \ += (b - a) * (c - b);\n    }\n    \n    if c > b {\n        area += (c - a)\
    \ * (c - b);\n    }\n    \n    area / (b - a)\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_6i20_ud.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp_6i20_ud.rs:23:14\n   |\n23 |\
    \         area += (b - a) * (b - c);\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp_6i20_ud.rs:27:14\n\
    \   |\n27 |         area += (b - a) * (c - b);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp_6i20_ud.rs:31:14\n   |\n31 |         area += (c - a) * (c - b);\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjat9044q.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjat9044q.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area: f64 = 0.0;\n    area = (a * b) - (c\
    \ * a);\n    area = area / 2.0;\n    area = area.round();\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9jhz03t8.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9jhz03t8.rs:20:12\n   |\n19 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n20 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n20 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += c;\n    }\n    \n    if a > c {\n        area += b;\n    }\n\
    \    \n    if b > c {\n        area += a;\n    }\n    \n    area /= 2.0;\n   \
    \ \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdbgjoojm.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpdbgjoojm.rs:23:14\n   |\n23 |\
    \         area += c;\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpdbgjoojm.rs:27:14\n\
    \   |\n27 |         area += b;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpdbgjoojm.rs:31:14\n\
    \   |\n31 |         area += a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzmoxu_4x.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpzmoxu_4x.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area: f64 = 0.0;\n    area = (a * b) - (c\
    \ * a);\n    area = area / 2.0;\n    area = area.round();\n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpue0yqj1b.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpue0yqj1b.rs:20:12\n   |\n19 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n20 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n20 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += a * b\n    }\n    \n    if a > c {\n        area += a * c\n \
    \   }\n    \n    if b > c {\n        area += b * c\n    }\n    \n    area / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ezcnsn4.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp6ezcnsn4.rs:23:14\n   |\n23 |         area\
    \ += a * b\n   |              ^^ no implementation for `{float} += isize`\n  \
    \ |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp6ezcnsn4.rs:27:14\n\
    \   |\n27 |         area += a * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp6ezcnsn4.rs:31:14\n\
    \   |\n31 |         area += b * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as Ad"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwg3b1up6.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpwg3b1up6.rs:19:17\n   |\n19 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area += a * b * c / 6.0;\n\
    \    area += a * c;\n    area += b * c;\n    area /= 2.0;\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7xr7fdg4.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp7xr7fdg4.rs:20:23\n   |\n20 |   \
    \  area += a * b * c / 6.0;\n   |                       ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp7xr7fdg4.rs:21:10\n\
    \   |\n21 |     area += a * c;\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp7xr7fdg4.rs:22:10\n\
    \   |\n22 |     area += b * c;\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmviwm3ez.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmviwm3ez.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvjhpb94u.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvjhpb94u.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd96osbec.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpd96osbec.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfld8frdz.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum = 0.0;\n    let mut\
    \ side_sum = 0.0;\n    let mut side_lengths = (0..3).map(|_| 0.0);\n    let mut\
    \ side_lengths_sum = 0.0;\n    let mut side_lengths_product = 0.0;\n    let mut\
    \ side_lengths_product2 = 0.0;\n    let mut side_lengths_product3 = 0.0;\n   \
    \ let mut side_lengths_product4 = 0.0;\n    let mut side_lengths_product5 = 0.0;\n\
    \    let mut side_lengths_product6 = 0.0;\n    let mut side_lengths_product7 =\
    \ 0.0;\n    let mut side_lengths_product8 = 0.0;\n    let mut side_lengths_product9\
    \ = 0.0;\n    let mut side_lengths_product10 = 0.0;\n    let mut side_lengths_product11\
    \ = 0.0;\n    let mut side_lengths_product12 = 0.0;\n    let mut side_lengths_product13\
    \ = 0.0;\n    let mut side_lengths_product14 = 0.0;\n    let mut side_lengths_product15\
    \ = 0.0;\n    let mut side_lengths_product16 = 0.0;\n    let mut side_lengths_product17\
    \ = 0.0;\n    let mut side_lengths_product18 = 0.0;\n    let mut side_lengths_product19\
    \ = 0.0;\n    let mut side_lengths_product20 = 0.0;\n    let mut side_lengths_product21\
    \ = 0.0;\n    let mut side_lengths_product22 = 0.0;\n    let mut side_lengths_product23\
    \ = 0.0;\n    let mut side_lengths_product24 = 0.0;\n    let mut side_lengths_product25\
    \ = 0.0;\n    let mut side_lengths_product26 = 0.0;\n    let mut side_lengths_product27\
    \ = 0.0;\n    let mut side_lengths_product28 = 0.0;\n    let mut side_lengths_product29\
    \ = 0.0;\n    let mut side_lengths_product30 = 0.0;\n    let mut side_lengths_product31\
    \ = 0.0;\n    let mut side_lengths_product32 = 0.0;\n    let mut side_lengths_product33\
    \ = 0.0;\n    let mut side_lengths_product34 = 0.0;\n    let mut side_lengths_product35\
    \ = 0.0;\n    let mut side_lengths_product36 = 0.0;\n    let mut side_lengths_product37\
    \ = 0.0;\n    let mut side_lengths_product38 = 0.0;\n    let mut side_lengths_product39\
    \ = 0.0;\n    let mut side_lengths_product40 = 0.0;\n    let mut side_lengths_product41\
    \ = 0.0;\n    let mut side_lengths_product42 = 0.0;\n    let mut side_lengths_\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmx6r8pvr.rs:56:26\n   |\n\
    56 |     let mut side_lengths_\n   |                          ^ help: add `;`\
    \ here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpmx6r8pvr.rs:9:51\n  |\n9 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |    -------------                                  ^^^ expected\
    \ `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpofqkh7to.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /= 3.0;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsbhu16dp.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpsbhu16dp.rs:20:19\n   |\n20 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpsbhu16dp.rs:21:19\n\
    \   |\n21 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpsbhu16dp.rs:22:19\n\
    \   |\n22 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzqlshn2u.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpzqlshn2u.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp3fubx6w5.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4d4b76hg.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4d4b76hg.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / 3.0,\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpflgqm06j.rs:13:24\n\
    \   |\n13 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9v6b_o6c.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9v6b_o6c.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9v6b_o6c.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp9v6b_o6c.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    (a * b + c) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2tufwagu.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp2tufwagu.rs:22:17\n   |\n22 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmptoew2ilk.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = b\
    \ as f64;\n        b = c as f64;\n        c = a as f64;\n    }\n    if a + c >\
    \ b {\n        a = c as f64;\n        c = b as f64;\n        b = a as f64;\n \
    \   }\n    if b + c > a {\n        b = c as f64;\n        c = a as f64;\n    \
    \    a = b as f64;\n    }\n    (a * b * c) / ((a * b) + (c * c))\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.4390243902439024`,\n right: `6.0`', /tmp/tmpswbqyyg8.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area += \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp9pq5m8kj.rs:70:1\n\
    \   |\n70 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9pq5m8kj.rs:11:16\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n10 |     if a + b > c {\n11 |       \
    \  return -1;\n   |                ^^\n   |                |\n   |           \
    \     expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp9pq5m8kj.rs:21:19\n\
    \   |\n21 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp9pq5m8kj.rs:22:19\n\
    \   |\n22 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp9pq5m8kj.rs:23:19\n\
    \   |\n23 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /= 3.0;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcwvkqc5x.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpcwvkqc5x.rs:20:19\n   |\n20 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpcwvkqc5x.rs:21:19\n\
    \   |\n21 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpcwvkqc5x.rs:22:19\n\
    \   |\n22 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area /= 3.0;\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwxnng3bj.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpwxnng3bj.rs:20:19\n   |\n20 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpwxnng3bj.rs:21:19\n\
    \   |\n21 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpwxnng3bj.rs:22:19\n\
    \   |\n22 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut s = 0.0;\n    s += a * b * 0.5;\n\
    \    s += a * c * 0.5;\n    s += b * c * 0.5;\n    \n    s / (a + b + c)\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmv4chw34.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpmv4chw34.rs:21:16\n   |\n21 | \
    \    s += a * b * 0.5;\n   |                ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpmv4chw34.rs:22:16\n   |\n\
    22 |     s += a * c * 0.5;\n   |                ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpmv4chw34.rs:23:16\n\
    \   |\n23 |     s += b * c * 0.5;\n   |                ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mu"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphc62sshr.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * b - 4 * a * c;\n    }\n    if a > c {\n        area += a\
    \ * c - 4 * a * b;\n    }\n    if b > c {\n        area += b * c - 4 * a * a;\n\
    \    }\n    \n    area /= 2.0;\n    \n    area = round(area, 2);\n    \n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmphnqo63jf.rs:34:12\n\
    \   |\n34 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphnqo63jf.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmphnqo63jf.rs:23:14\n   |\n23 |\
    \         area += b * b - 4 * a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphnqo63jf.rs:26:14\n\
    \   |\n26 |         area += a * c - 4 * a * b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmphnqo63jf.rs:29:14\n   |\n29 |         area += b * c - 4 * a * a;\n\
    \   |              ^^ "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        a + b + c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvy7k8be1.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvy7k8be1.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         (a + b + c) as f64\n   |         +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * c);\n\
    \    area = area + (a * c);\n    area = area + (a * b);\n    area = area - (a\
    \ * b);\n    area = area - (a * c);\n    area = area - (b * c);\n    area = area\
    \ / (2.0 * c);\n    area = area / (2.0 * b);\n    area = area / (2.0 * a);\n \
    \   area = area / c;\n    area = area / b;\n    area = area / a;\n    area = area\
    \ / c;\n    area = area / b;\n    area = area / a;\n    area = area / c;\n   \
    \ area = area / b;\n    area = area / a;\n    area = area / c;\n    area = area\
    \ / b;\n    area = area / a;\n    area = area / c;\n    area = area / b;\n   \
    \ area = area / a;\n    area = area / c;\n    area = area / b;\n    area = area\
    \ / a;\n    area = area / c;\n    area = area / b;\n    area = area / a;\n   \
    \ area = area / c;\n    area = area / b;\n    area = area / a;\n    area = area\
    \ / c;\n    area = area / b;\n    area = area / a;\n    area = area / c;\n   \
    \ area = area / b;\n    area = area / a;\n    area = area / c;\n    area = area\
    \ / b;\n    area = area / a;\n    area = area / c;\n    area = area / b;\n   \
    \ area = area / a;\n    area = area / c;\n    area = area / b;\n    area = area\
    \ / a;\n    area = area / c;\n    area = area / b;\n    area = area / a;\n   \
    \ area = area / c;\n    area = area / b;\n    area = area / a;\n    area = area\
    \ / c;\n    area = area / b;\n    area = area / a;\n    area = area / c;\n   \
    \ area = area / b;\n    area = area / a;\n    area = area / c;\n    area = area\
    \ / b;\n    area = area / a;\n    area = area / c;\n    area = area / b;\n   \
    \ area = area / a;\n    area = area / c;\n    area = area / b;\n    area = area\
    \ / a;\n    area = area / c;\n    area = area / b;\n    area = area / a;\n   \
    \ area = area / c;\n    area = area / b;\n    area = area / a;\n    \n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv14ryw4r.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpv14ryw4r.rs:20:17\n   |\n20 |     area\
    \ = area + (b * c);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpv14ryw4r.rs:21:17\n   |\n21 |\
    \     area = area + (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpv14ryw4r.rs:22:17\n   |\n22 |\
    \     area = area + (a * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyp8c3bez.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpyp8c3bez.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area: f64 = 0.0;\n    area = (a * b) - (c\
    \ * a);\n    area = area / 2.0;\n    area = area.round();\n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpymcsteuy.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpymcsteuy.rs:20:12\n   |\n19 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n20 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n20 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c * a) / (b * b)\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpexo3nw62.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpexo3nw62.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     (a * b + c\
    \ * a) / (b * b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |     ((a * b\
    \ + c * a) / (b * b)) as f64\n   |     +                         ++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * b - 4 * a * c;\n    }\n    \n    if a > c {\n        area\
    \ += a * c - 4 * a * b;\n    }\n    \n    if b > c {\n        area += b * c -\
    \ 4 * a * a;\n    }\n    \n    if area < 0.0 {\n        area = 0.0;\n    }\n \
    \   \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6lbcrgwn.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp6lbcrgwn.rs:23:14\n   |\n23 |\
    \         area += b * b - 4 * a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp6lbcrgwn.rs:27:14\n\
    \   |\n27 |         area += a * c - 4 * a * b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp6lbcrgwn.rs:31:14\n   |\n31 |         area += b * c - 4 * a * a;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        2 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmps_uoi8a2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (b * a) - (c * a);\n    area = area\
    \ + (a * b) - (c * a);\n    area = area + (\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp47ls7f_a.rs:63:19\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                                   - closing delimiter possibly\
    \ meant for this\n...\n63 |     area = area + (\n   |                   ^ unclosed\
    \ delimiter\n64 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp47ls7f_a.rs:11:16\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n10 |     if a + b > c {\n\
    11 |         return -1;\n   |                ^^\n   |                |\n   | \
    \               expected `f64`, found integer\n   |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmp47ls7f_a.rs:22:17\n   |\n22 |     area = area + (a * b) - (c * c);\n\
    \   |                 ^ no implementation for `{float} + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp47ls7f_a.rs:23:17\n   |\n23 |     area\
    \ = area + (a * c) - (b * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 oth"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    if a +\
    \ b > c {\n        s = b - c;\n        t = a;\n        w = c;\n    } else {\n\
    \        s = a - c;\n        t = b;\n        w = c;\n    }\n    if a + c > b {\n\
    \        u = c - b;\n        v = a;\n    } else {\n        u = a - b;\n      \
    \  v = c;\n    }\n    if b + c > a {\n        w = c - a;\n    } else {\n     \
    \   w = b - a;\n    }\n    s / (w * t)\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:16:13\n   |\n\
    10 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    ...\n16 |         s = b - c;\n   |             ^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:17:13\n\
    \   |\n11 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n17 |         t = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:18:13\n\
    \   |\n14 |     let mut w = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n18 |         w = c;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:20:13\n\
    \   |\n10 |     let mut s = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n20 |         s = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:21:13\n\
    \   |\n11 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n21 |         t = b;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:22:13\n\
    \   |\n14 |     let mut w = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n22 |         w = c;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:25:13\n\
    \   |\n12 |     let mut u = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n25 |         u = c - b;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:26:13\n\
    \   |\n13 |     let mut v = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n26 |         v = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppk69m94y.rs:28:13\n\
    \   |\n12 |     let mut u = 0.0;\n   |                 --- expected due to t"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bhq_s6e.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bhq_s6e.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bhq_s6e.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp3bhq_s6e.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstr3g3ra.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum: f64 = 0.0;\n    if\
    \ a + b > c {\n        area_sum += (a + b - c) * 0.5;\n    }\n    if a + c > b\
    \ {\n        area_sum += (a + c - b) * 0.5;\n    }\n    if b + c > a {\n     \
    \   area_sum += (b + c - a) * 0.5;\n    }\n    area_sum\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpltceswz_.rs:12:33\n\
    \   |\n12 |         area_sum += (a + b - c) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpltceswz_.rs:15:33\n   |\n15 |         area_sum\
    \ += (a + c - b) * 0.5;\n   |                                 ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpltceswz_.rs:18:33\n\
    \   |\n18 |         area_sum += (b + c - a) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    let mut side1\
    \ = 0.0;\n    let mut side2 = 0.0;\n    let mut side3 = 0.0;\n    if a + b > c\
    \ {\n        side1 = b - c;\n        side2 = c - a;\n    } else {\n        side1\
    \ = c - b;\n        side2 = a - c;\n    }\n    if side1 + side2 > side3 {\n  \
    \      area = side1 * side2;\n    } else {\n        area = side3;\n    }\n   \
    \ area = area.round();\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt95kf24f.rs:15:17\n   |\n\
    11 |     let mut side1 = 0.0;\n   |                     --- expected due to this\
    \ value\n...\n15 |         side1 = b - c;\n   |                 ^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt95kf24f.rs:16:17\n   |\n12 |     let mut side2 = 0.0;\n   |       \
    \              --- expected due to this value\n...\n16 |         side2 = c - a;\n\
    \   |                 ^^^^^ expected floating-point number, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpt95kf24f.rs:18:17\n   |\n11 |  \
    \   let mut side1 = 0.0;\n   |                     --- expected due to this value\n\
    ...\n18 |         side1 = c - b;\n   |                 ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt95kf24f.rs:19:17\n\
    \   |\n12 |     let mut side2 = 0.0;\n   |                     --- expected due\
    \ to this value\n...\n19 |         side2 = a - c;\n   |                 ^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0689]: can't call method\
    \ `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmpt95kf24f.rs:26:17\n\
    \   |\n26 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n10 |     let mut\
    \ area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / (2.0\
    \ * c);\n    area = area / (2.0 * a);\n    area = area / (2.0 * b);\n    area\
    \ = area / (2.0 * a);\n    area = area / (2.0 * c);\n    area = area / (2.0 *\
    \ a);\n    area = area / (2.0 * b);\n    area = area / (2.0 * a);\n    area =\
    \ area / (2.0 * c);\n    area = area / (2.0 * a);\n    area = area / (2.0 * b);\n\
    \    area = area / (2.0 * a);\n    area = area / (2.0 * c);\n    area = area /\
    \ (2.0 * a);\n    area = area / (2.0 * b);\n    area = area / (2.0 * a);\n   \
    \ area = area / (2.0 * c);\n    area = area / (2.0 * a);\n    area = area / (2.0\
    \ * b);\n    area = area / (2.0 * a);\n    area = area / (2.0 * c);\n    area\
    \ = area / (2.0 * a);\n    area = area / (2.0 * b);\n    area = area / (2.0 *\
    \ a);\n    area = area / (2.0 * c);\n    area = area / (2.0 * a);\n    area =\
    \ area / (2.0 * b);\n    area = area / (2.0 * a);\n    area = area / (2.0 * c);\n\
    \    area = area / (2.0 * a);\n    area = area / (2.0 * b);\n    area = area /\
    \ (2.0 * a);\n    area = area / (2.0 * c);\n    area = area / (2.0 * a);\n   \
    \ area = area / (2.0 * b);\n    area = area / (2.0 * a);\n    area = area / (2.0\
    \ * c);\n    area = area / (2.0 * a);\n    area = area / (2.0 * b);\n    area\
    \ = area / (2.0 * a);\n    area = area / (2.0 * c);\n    area = area / (2.0 *\
    \ a);\n    area = area / (2.0 * b);\n    area = area / (2.0 * a);\n    area =\
    \ area / (2.0 * c);\n    area = area / (2.0 * a);\n    area = area / (2.0 * b);\n\
    \    area = area / (2.0 * a);\n    area = area / (2.0 * c);\n    area = area /\
    \ (2.0 * a);\n    area = area / (2.0 * b);\n    area = area / (2.0 * a);\n   \
    \ area = area / (2.0 * c);\n    area = area / (2.0 * a);\n    area = area / (2.0\
    \ * b);\n    area = area / (2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpauke9c7z.rs:78:19\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                                   - closing delimiter possibly\
    \ meant for this\n...\n78 |     area = area / (2.0\n   |                   ^ unclosed\
    \ delimiter\n79 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpauke9c7z.rs:11:16\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n10 |     if a + b > c {\n\
    11 |         return -1;\n   |                ^^\n   |                |\n   | \
    \               expected `f64`, found integer\n   |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpauke9c7z.rs:20:17\n   |\n20 |     area = area + (b * b);\n   |     \
    \            ^ no implementation for `{float} + isize`\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot add `isize`\
    \ to `{float}`\n  --> /tmp/tmpauke9c7z.rs:21:17\n   |\n21 |     area = area +\
    \ (c * c);\n   |                 ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    let mut area = 0.0;\n    area = area + (a * b) - (c\
    \ * c);\n    area = area + (a * c) - (b * b);\n    area = area + (c * a) - (b\
    \ * c);\n    area = area + (c * b) - (a * a);\n    area = area / 2.0;\n    area\
    \ = round(area, 2);\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp2md8dfqv.rs:25:12\n\
    \   |\n25 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2md8dfqv.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmp2md8dfqv.rs:20:17\n   |\n20 |     area =\
    \ area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp2md8dfqv.rs:21:17\n   |\n21 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp2md8dfqv.rs:22:17\n\
    \   |\n22 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + i"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / 2.0;\n\
    \    area = area as f64;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd8udef3o.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpd8udef3o.rs:20:17\n   |\n20 |     area\
    \ = area + (b * b);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpd8udef3o.rs:21:17\n   |\n21 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpd8udef3o.rs:22:17\n   |\n22 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    \n    area += a * b\
    \ * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    \n    area /=\
    \ (a * b + a * c + b * c);\n    \n    area = area.round();\n    \n    area\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpllss093d.rs:26:13\n\
    \   |\n26 |     area /= (a * b + a * c + b * c);\n   |             ^         \
    \            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n26 -     area /= (a * b + a * c + b * c);\n\
    26 +     area /= a * b + a * c + b * c;\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpllss093d.rs:11:16\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n10 |     if a + b > c {\n11 |       \
    \  return -1\n   |                ^^\n   |                |\n   |            \
    \    expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpllss093d.rs:22:19\n\
    \   |\n22 |     area += a * b * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpllss093d.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E027"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp741jdgy9.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp741jdgy9.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += c;\n    }\n    else {\n        area += b;\n    }\n    \n    if\
    \ a > c {\n        area += a;\n    }\n    else {\n        area += c;\n    }\n\
    \    \n    if b > c {\n        area += b;\n    }\n    else {\n        area +=\
    \ a;\n    }\n    \n    area /= 2.0;\n    \n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpapo090p1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpapo090p1.rs:23:14\n   |\n23 |\
    \         area += c;\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpapo090p1.rs:26:14\n\
    \   |\n26 |         area += b;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpapo090p1.rs:30:14\n\
    \   |\n30 |         area += a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprxdxsu0e.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprxdxsu0e.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = b\
    \ as f64;\n        b = c as f64;\n        c = a as f64;\n    }\n    if a + c >\
    \ b {\n        a = c as f64;\n        b = a as f64;\n        c = b as f64;\n \
    \   }\n    if b + c > a {\n        a = b as f64;\n        b = c as f64;\n    \
    \    c = a as f64;\n    }\n    (a * b * c) / f64::sqrt((a * b).pow((b * c).powi(2))).round()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpk50t1d9z.rs:28:37\n   |\n28 |     (a * b * c) / f64::sqrt((a\
    \ * b).pow((b * c).powi(2))).round()\n   |                                   \
    \  ^^^ help: there is an associated function with a similar name: `powf`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnnj8idod.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_dv6qxe.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6_dv6qxe.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp73__o6a.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    let mut s\
    \ = 0.0;\n    let mut t = 0.0;\n    if a + b > c {\n        s = b - c;\n     \
    \   t = a;\n    } else {\n        s = c - a;\n        t = b;\n    }\n    area\
    \ = s * t / 2.0;\n    if area > 0.0 {\n        area = round(area as f64 * 100.0)\
    \ / 100.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpxyv5lrdv.rs:22:16\n\
    \   |\n22 |         area = round(area as f64 * 100.0) / 100.0;\n   |         \
    \       ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxyv5lrdv.rs:14:13\n   |\n11 |     let mut s = 0.0;\n   |           \
    \      --- expected due to this value\n...\n14 |         s = b - c;\n   |    \
    \         ^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxyv5lrdv.rs:15:13\n   |\n12 |     let mut t\
    \ = 0.0;\n   |                 --- expected due to this value\n...\n15 |     \
    \    t = a;\n   |             ^ expected floating-point number, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxyv5lrdv.rs:17:13\n   |\n11 |\
    \     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    ...\n17 |         s = c - a;\n   |             ^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxyv5lrdv.rs:18:13\n\
    \   |\n12 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n18 |         t = b;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    if a + b >\
    \ c {\n        area = -1;\n    } else if a + c > b {\n        area = -1;\n   \
    \ } else if b + c > a {\n        area = -1;\n    } else {\n        area = (a *\
    \ b + c) / 2.0;\n    }\n    area = area.round();\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi7ny7_2o.rs:12:16\n   |\n\
    10 |     let mut area = 0.0;\n   |                    --- expected due to this\
    \ value\n11 |     if a + b > c {\n12 |         area = -1;\n   |              \
    \  ^^ expected floating-point number, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi7ny7_2o.rs:14:16\n   |\n10 |     let mut area = 0.0;\n\
    \   |                    --- expected due to this value\n...\n14 |         area\
    \ = -1;\n   |                ^^ expected floating-point number, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi7ny7_2o.rs:16:16\n   |\n10 |\
    \     let mut area = 0.0;\n   |                    --- expected due to this value\n\
    ...\n16 |         area = -1;\n   |                ^^ expected floating-point number,\
    \ found integer\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpi7ny7_2o.rs:18:28\n\
    \   |\n18 |         area = (a * b + c) / 2.0;\n   |                          \
    \  ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpi7ny7_2o.rs:20:17\n   |\n20 |     area\
    \ = area.round();\n   |                 ^^^^^\n   |\nhelp: you must specify a\
    \ type for this binding, like `f32`\n   |\n10 |     let mut area: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ + b - c;\n    }\n    if a + c > b {\n        b = a + c - b;\n    }\n    if b\
    \ + c > a {\n        c = b + c - a;\n    }\n    (a * b * c) / ((a * b) + (c *\
    \ c))\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmp6__pghkk.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c * a) / (b * c + a * b)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfr48exwy.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfr48exwy.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     (a * b + c\
    \ * a) / (b * c + a * b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |     ((a * b + c * a) / (b * c + a * b)) as f64\n   |     +              \
    \                   ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc74h5p9e.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpc74h5p9e.rs:19:17\n   |\n19 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / (a + b + c),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpplsqf7ed.rs:13:14\n\
    \   |\n10 | /     match a + b + c {\n11 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n12 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n13 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n14 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a + b >\
    \ c {\n        area = (a * b) / c;\n    }\n    \n    if a + c > b {\n        area\
    \ = (a * c) / b;\n    }\n    \n    if b + c > a {\n        area = (b * c) / a;\n\
    \    }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_6cf_mw.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz_6cf_mw.rs:23:16\n   |\n20 |     let mut area = 0.0;\n\
    \   |                    --- expected due to this value\n...\n23 |         area\
    \ = (a * b) / c;\n   |                ^^^^^^^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_6cf_mw.rs:27:16\n\
    \   |\n20 |     let mut area = 0.0;\n   |                    --- expected due\
    \ to this value\n...\n27 |         area = (a * c) / b;\n   |                ^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz_6cf_mw.rs:31:16\n   |\n20 |     let mut area = 0.0;\n   |   \
    \                 --- expected due to this value\n...\n31 |         area = (b\
    \ * c) / a;\n   |                ^^^^^^^^^^^ expected floating-point number, found\
    \ `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        x => if a + b > c { 1.0 } else { -1.0 },\n        y => if b + c > a {\
    \ 1.0 } else { -1.0 },\n        z if a + c > b { 1.0 } else { -1.0 },\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `1.0`\n  --> /tmp/tmpfwdt3qlq.rs:14:26\n\
    \   |\n14 |         z if a + c > b { 1.0 } else { -1.0 },\n   |              \
    \        -   ^^^ expected identifier\n   |                      |\n   |      \
    \                while parsing this struct\n\nerror: expected one of `.`, `=>`,\
    \ `?`, or an operator, found keyword `else`\n  --> /tmp/tmpfwdt3qlq.rs:14:32\n\
    \   |\n14 |         z if a + c > b { 1.0 } else { -1.0 },\n   |              \
    \                  ^^^^ expected one of `.`, `=>`, `?`, or an operator\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area: f64 = 0.0;\n    area = (a * b) - (c\
    \ * a);\n    area = area / 2.0;\n    area = area.round();\n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyjjffk97.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyjjffk97.rs:20:12\n   |\n19 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n20 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n20 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / (a + b + c),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp7e9spq1n.rs:13:14\n\
    \   |\n10 | /     match a + b + c {\n11 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n12 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n13 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n14 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptobb9if5.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmptobb9if5.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut s = 0.0;\n    if a + b > c {\n   \
    \     s = s + (a + b - c) * 0.5;\n    }\n    if a + c > b {\n        s = s + (a\
    \ + c - b) * 0.5;\n    }\n    if b + c > a {\n        s = s + (b + c - a) * 0.5;\n\
    \    }\n    \n    return s * 0.5;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3nfx8jir.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp3nfx8jir.rs:22:29\n   |\n22 | \
    \        s = s + (a + b - c) * 0.5;\n   |                             ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp3nfx8jir.rs:25:29\n\
    \   |\n25 |         s = s + (a + c - b) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp3nfx8jir.rs:28:29\n   |\n28 |         s = s + (b + c - a) * 0.5;\n\
    \   |                             ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement tr"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3r2758b.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl3r2758b.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl3r2758b.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpl3r2758b.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if\
    \ a + b > c {\n        s = 0.0;\n        t = 0.0;\n        w = 0.0;\n    } else\
    \ {\n        s = (a * b) / c;\n        t = ((b * c) - (a * c)) / b;\n        w\
    \ = ((c * a) - (b * a)) / c;\n    }\n    if s > 0.0 {\n        u = s / t;\n  \
    \      v = t / w;\n    } else {\n        u = -1.0;\n        v = -1.0;\n    }\n\
    \    round::round(2.0 * u * v as f64 / 3.0)\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `round`\n\
    \  --> /tmp/tmpg24sua3z.rs:34:5\n   |\n34 |     round::round(2.0 * u * v as f64\
    \ / 3.0)\n   |     ^^^^^ use of undeclared crate or module `round`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpir56g7bs.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpir56g7bs.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if\
    \ a + b > c {\n        s = 0.0;\n    } else {\n        s = (a * b) / (c + b);\n\
    \    }\n    if a + c > b {\n        t = 0.0;\n    } else {\n        t = (b * c)\
    \ / (a + c);\n    }\n    if b + c > a {\n        u = 0.0;\n    } else {\n    \
    \    u = (a * c) / (b + c);\n    }\n    if a + b > c {\n        v = 0.0;\n   \
    \ } else {\n        v = (b * a) / (a + b);\n    }\n    if a + c > b {\n      \
    \  w = 0.0;\n    } else {\n        w = (c * a) / (a + c);\n    }\n    if s > t\
    \ && s > u && s > v && s > w {\n        return s;\n    }\n    if t > s && t >\
    \ u && t > v && t > w {\n        return t;\n    }\n    if u > s && u > t && u\
    \ > v && u > w {\n        return u;\n    }\n    if v > s && v > t && v > u &&\
    \ v > w {\n        return v;\n    }\n    if w > s && w > t && w > u && w > v {\n\
    \        return w;\n    }\n    return -1.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpa10imyfi.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    let mut s = 0.0;\n    let mut\
    \ t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    let\
    \ mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut\
    \ c = c as f64;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut a = a as f64;\n    let mut b = b\
    \ as f64;\n    let mut c = c as f64;\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = a as f64;\n\
    \    let mut b = b as f64;\n    let mut c = c as f64;\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n\
    \    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n\
    \    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut\
    \ v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp6i3gzz30.rs:76:1\n\
    \   |\n76 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ + b - c;\n    }\n    if a + c > b {\n        b = a + c - b;\n    }\n    if b\
    \ + c > a {\n        c = b + c - a;\n    }\n    (a * b * c) / ((a * b) + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `6.0`', /tmp/tmpw6f9_08k.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvt15x0eo.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpvt15x0eo.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ql9w55d.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp1ql9w55d.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_e68yps.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_e68yps.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_e68yps.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw_e68yps.rs:17:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n17 |       \
    \  (a * b + c) / 2\n   |         ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n17 |         ((a\
    \ * b + c) / 2) as f64\n   |         +               ++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   if s == 1 {\n        return 1.0;\n    }\n    if s == 2 {\n        return 2.0;\n\
    \    }\n    if s == 3 {\n        return 3.0;\n    }\n    if s == 4 {\n       \
    \ return 4.0;\n    }\n    if s == 5 {\n        return 5.0;\n    }\n    if s ==\
    \ 6 {\n        return 6.0;\n    }\n    if s == 7 {\n        return 7.0;\n    }\n\
    \    if s == 8 {\n        return 8.0;\n    }\n    if s == 9 {\n        return\
    \ 9.0;\n    }\n    if s == 10 {\n        return 10.0;\n    }\n    if s == 11 {\n\
    \        return 11.0;\n    }\n    if s == 12 {\n        return 12.0;\n    }\n\
    \    if s == 13 {\n        return 13.0;\n    }\n    if s == 14 {\n        return\
    \ 14.0;\n    }\n    if s == 15 {\n        return 15.0;\n    }\n    if s == 16\
    \ {\n        return 16.0;\n    }\n    if s == 17 {\n        return 17.0;\n   \
    \ }\n    if s == 18 {\n        return 18.0;\n    }\n    if s == 19 {\n       \
    \ return 19.0;\n    }\n    if s == 20 {\n        return 20.0;\n    }\n    if s\
    \ == 21 {\n        return 21.0;\n    }\n    if s == 22 {\n        return 22.0;\n\
    \    }\n    if s == 23 {\n        return 23.0;\n    }\n    if s == 24 {\n    \
    \    return 24.0;\n    }\n    if s == 25 {\n        return 25.0;\n    }\n    if\
    \ s == 26 {\n        return 26.0;\n    }\n    if s == 27 {\n        return 27.0;\n\
    \    }\n    if s == 28 {\n        return 28.0;\n    }\n    if s == 29 {\n    \
    \    return 29.0;\n    }\n    if s == 30 {\n        return 30.0;\n    }\n    if\
    \ s == 31 {\n        return 31.0;\n    }\n    if s == 32 {\n        return 32.0;\n\
    \    }\n    if s == 33 {\n        return 33.0;\n    }\n    if s == 34 {\n    \
    \    return 34.0;\n    }\n    if s == 35 {\n        return 35.0;\n    }\n    if\
    \ s == 36 {\n        return 36.0;\n    }\n    if s == 37 {\n        return 37.0;\n\
    \    }\n    if s == 38 {\n        return 38.0;\n    }\n    if s == 39 {\n    \
    \    return 39.0;\n    }\n    if s == 40 {\n        return 40.0;\n    }\n    if\
    \ s == 41 {\n        return 41.0;\n    }\n    if s == 42 {\n        return 42.0;\n\
    \    }\n    if s == 43 {\n        return 43.0;\n    }\n    if s == 44 {\n    \
    \    return 44.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpiupj47_4.rs:162:3\n\
    \    |\n9   | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n146 |     if s == 44 {\n    |                - this delimiter might not be\
    \ properly closed...\n...\n149 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n162 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpiupj47_4.rs:9:51\n  |\n9 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |    -------------                                  ^^^ expected\
    \ `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    (a * b + c) / 2\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp763ywhif.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp763ywhif.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     (a * b + c)\
    \ / 2\n   |     ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n19 |     ((a * b + c) / 2) as f64\n\
    \   |     +               ++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5w6evzey.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp5w6evzey.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ - b;\n        b = c - a;\n        c = a + b;\n    }\n    if a + c > b {\n  \
    \      a = a - c;\n        c = c - a;\n        b = b + c;\n    }\n    if b + c\
    \ > a {\n        b = b - c;\n        c = c - b;\n        a = a + c;\n    }\n \
    \   a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `6.0`', /tmp/tmpm7dt2g76.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum: f64 = 0.0;\n    let\
    \ mut area_product: f64 = 0.0;\n    \n    if a + b > c {\n        area_sum +=\
    \ (a + b) * (c + b);\n        area_product += (a + b) * (c - b);\n    }\n    \n\
    \    if a + c > b {\n        area_sum += (a + c) * (b + c);\n        area_product\
    \ += (a + c) * (b - c);\n    }\n    \n    if b + c > a {\n        area_sum +=\
    \ (b + c) * (a + c);\n        area_product += (b + c) * (a - c);\n    }\n    \n\
    \    if area_sum > area_product {\n        area_sum -= area_product;\n       \
    \ area_product = area_sum;\n    }\n    \n    area_sum / area_product\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmphzcl0vn0.rs:14:18\n\
    \   |\n14 |         area_sum += (a + b) * (c + b);\n   |                  ^^ no\
    \ implementation for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n\
    \  --> /tmp/tmphzcl0vn0.rs:15:22\n   |\n15 |         area_product += (a + b) *\
    \ (c - b);\n   |                      ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmphzcl0vn0.rs:19:18\n\
    \   |\n19 |         area_sum += (a + c) * (b + c);\n   |                  ^^ no\
    \ implementation for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n\
    \  --> /tmp/tmphzcl0vn0.rs:20:22\n   |\n20 |         are"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a as f64)\
    \ * (b as f64);\n    area = area + (b as f64) * (c as f64);\n    area = area +\
    \ (c as f64) * (a as f64);\n    area = area / ((a as f64) * (b as f64) + (b as\
    \ f64) * (c as f64) + (c as f64) * (a as f64));\n    area = area.round() as f64;\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgtuexblw.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpacbo6wet.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpacbo6wet.rs:19:17\n   |\n19 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjnazr7di.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjnazr7di.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut s = 0.0;\n    let mut t = 0.0;\n \
    \   \n    s = a + b + c;\n    t = a + c;\n    \n    if s > t {\n        return\
    \ -1;\n    }\n    \n    s / t\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphlddioci.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphlddioci.rs:23:9\n   |\n20 |     let mut s = 0.0;\n   |\
    \                 --- expected due to this value\n...\n23 |     s = a + b + c;\n\
    \   |         ^^^^^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphlddioci.rs:24:9\n   |\n21 |     let mut t =\
    \ 0.0;\n   |                 --- expected due to this value\n...\n24 |     t =\
    \ a + c;\n   |         ^^^^^ expected floating-point number, found `isize`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * (b - a);\n    }\n    \n    if a > c {\n        area += c\
    \ * (c - a);\n    }\n    \n    if b > c {\n        area += a * (a - b);\n    }\n\
    \    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmponqti5t1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmponqti5t1.rs:23:14\n   |\n23 |\
    \         area += b * (b - a);\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmponqti5t1.rs:27:14\n\
    \   |\n27 |         area += c * (c - a);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmponqti5t1.rs:31:14\n   |\n31 |         area += a * (a - b);\n  \
    \ |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area: f64 = 0.0;\n    area = (a *\
    \ b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1965bnu.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi1965bnu.rs:21:12\n   |\n20 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n21 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n21 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    \n    area = area +\
    \ (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area +\
    \ (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    area = area /\
    \ 2.0;\n    \n    area = area.round();\n    \n    area\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph8235wy3.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmph8235wy3.rs:22:17\n   |\n22 |     area =\
    \ area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmph8235wy3.rs:23:17\n   |\n23 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmph8235wy3.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ as f64;\n        b = b as f64;\n        c = c as f64;\n    }\n    if a + c >\
    \ b {\n        a = a as f64;\n        c = c as f64;\n    }\n    if b + c > a {\n\
    \        b = b as f64;\n        c = c as f64;\n    }\n    (a * b + c) as f64 /\
    \ 2\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp7hpkr_p2.rs:26:24\n\
    \   |\n26 |     (a * b + c) as f64 / 2\n   |                        ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n26 |     (a * b + c) as f64 / 2.0\n   |                        \
    \   ++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        (b * b) - ((a + b) * c)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0up4utrz.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0up4utrz.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         (b * b) - ((a + b) * c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         ((b * b) - ((a + b) * c)) as f64\n   |       \
    \  +                       ++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = a < b\
    \ ? a : b;\n    let mut b = b < c ? b : c;\n    let mut c = c < a ? c : a;\n \
    \   while a > b {\n        s = s + a;\n        a = a - b;\n    }\n    while b\
    \ > c {\n        t = t + b;\n        b = b - c;\n    }\n    while c > a {\n  \
    \      u = u + c;\n        c = c - a;\n    }\n    while a > b {\n        v = v\
    \ + a;\n        a = a - b;\n    }\n    while b > c {\n        w = w + b;\n   \
    \     b = b - c;\n    }\n    while c > a {\n        x = x + c;\n        c = c\
    \ - a;\n    }\n    while a > b {\n        y = y + a;\n        a = a - b;\n   \
    \ }\n    while b > c {\n        z = z + b;\n        b = b - c;\n    }\n    s *\
    \ (s - t) * (s - u) * (s - v) * (s - w) * (s - x) * (s - y) * (s - z) * (t - w)\
    \ * (t - x) * (t - y) * (t - z) * (u - w) * (u - x) * (u - y) * (u - z) * (v -\
    \ w) * (v - x) * (v - y) * (v - z) * (w - x) * (w - y) * (w - z)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpa9m5r9j3.rs:18:25\n   |\n18 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   if s == 1 {\n        return 1.0;\n    }\n    if s == 2 {\n        return 2.0;\n\
    \    }\n    if s == 3 {\n        return 3.0;\n    }\n    if s == 4 {\n       \
    \ return 4.0;\n    }\n    if s == 5 {\n        return 5.0;\n    }\n    if s ==\
    \ 6 {\n        return 6.0;\n    }\n    if s == 7 {\n        return 7.0;\n    }\n\
    \    if s == 8 {\n        return 8.0;\n    }\n    if s == 9 {\n        return\
    \ 9.0;\n    }\n    if s == 10 {\n        return 10.0;\n    }\n    if s == 11 {\n\
    \        return 11.0;\n    }\n    if s == 12 {\n        return 12.0;\n    }\n\
    \    if s == 13 {\n        return 13.0;\n    }\n    if s == 14 {\n        return\
    \ 14.0;\n    }\n    if s == 15 {\n        return 15.0;\n    }\n    if s == 16\
    \ {\n        return 16.0;\n    }\n    if s == 17 {\n        return 17.0;\n   \
    \ }\n    if s == 18 {\n        return 18.0;\n    }\n    if s == 19 {\n       \
    \ return 19.0;\n    }\n    if s == 20 {\n        return 20.0;\n    }\n    if s\
    \ == 21 {\n        return 21.0;\n    }\n    if s == 22 {\n        return 22.0;\n\
    \    }\n    if s == 23 {\n        return 23.0;\n    }\n    if s == 24 {\n    \
    \    return 24.0;\n    }\n    if s == 25 {\n        return 25.0;\n    }\n    if\
    \ s == 26 {\n        return 26.0;\n    }\n    if s == 27 {\n        return 27.0;\n\
    \    }\n    if s == 28 {\n        return 28.0;\n    }\n    if s == 29 {\n    \
    \    return 29.0;\n    }\n    if s == 30 {\n        return 30.0;\n    }\n    if\
    \ s == 31 {\n        return 31.0;\n    }\n    if s == 32 {\n        return 32.0;\n\
    \    }\n    if s == 33 {\n        return 33.0;\n    }\n    if s == 34 {\n    \
    \    return 34.0;\n    }\n    if s == 35 {\n        return 35.0;\n    }\n    if\
    \ s == 36 {\n        return 36.0;\n    }\n    if s == 37 {\n        return 37.0;\n\
    \    }\n    if s == 38 {\n        return 38.0;\n    }\n    if s == 39 {\n    \
    \    return 39.0;\n    }\n    if s == 40 {\n        return 40.0;\n    }\n    if\
    \ s == 41 {\n        return 41.0;\n    }\n    if s == 42 {\n        return 42.0;\n\
    \    }\n    if s == 43 {\n        return 43.0;\n    }\n    if s == 44 {\n    \
    \    return 44.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9w7cj_iv.rs:162:3\n\
    \    |\n9   | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n146 |     if s == 44 {\n    |                - this delimiter might not be\
    \ properly closed...\n...\n149 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n162 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp9w7cj_iv.rs:9:51\n  |\n9 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |    -------------                                  ^^^ expected\
    \ `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpe3re61nl.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptim0yy_l.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptim0yy_l.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   return s * s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgjasccug.rs:17:12\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |     return s * s;\n   |            ^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n17 |     return\
    \ (s * s) as f64;\n   |            +     ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgs0xeik1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpgs0xeik1.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    area = area\
    \ + ((a * b) - (c * b));\n    area = area + ((a * c) - (b * c));\n    area = area\
    \ + ((b * a) - (c * a));\n    area = area + ((b * c) - (a * c));\n    area = area\
    \ + ((c * a) - (a * a));\n    area = area + ((c * b) - (b * b));\n    area = area\
    \ + ((a * c) - (b * c));\n    area = area + ((b * a) - (c * a));\n    area = area\
    \ + ((b * c) - (a * c));\n    area = area + ((c * a) - (a * a));\n    area = area\
    \ + ((c * b) - (b * b));\n    area = area + ((a * c) - (b * c));\n    area = area\
    \ + ((b * a) - (c * a));\n    area = area + ((b * c) - (a * c));\n    area = area\
    \ + ((c * a) - (a * a));\n    area = area + ((c * b) - (b * b));\n    area = area\
    \ + ((a * c) - (b * c));\n    area = area + ((b * a) - (c * a));\n    area = area\
    \ + ((b * c) - (a * c));\n    area = area + ((c * a) - (a * a));\n    area = area\
    \ + ((c * b) - (b * b));\n    area = area + ((a * c) - (b * c));\n    area = area\
    \ + ((b * a) - (c * a));\n    area = area + ((b * c) - (a * c));\n    area = area\
    \ + ((c * a) - (a * a));\n    area = area + ((c * b) - (b * b));\n    area = area\
    \ + ((a * c) - (b * c));\n    area = area + ((b * a) - (c * a));\n    area = area\
    \ + ((b * c) - (a * c));\n    area = area + ((c * a) - (a * a));\n    area = area\
    \ + ((c * b) - (b * b));\n    area = area + ((a * c) - (b * c));\n    area = area\
    \ + ((b * a) - (c * a));\n    area = area + ((b * c) - (a * c));\n    area = area\
    \ + ((c * a) - (a * a));\n    area = area + ((c * b) - (b * b));\n    area = area\
    \ + ((a * c) - (b * c));\n    area = area + ((b * a) - (c * a));\n    area = area\
    \ + ((b * c) - (a * c));\n    area = area + (\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpt61n9gx5.rs:61:19\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                                   - closing delimiter possibly\
    \ meant for this\n...\n61 |     area = area + (\n   |                   ^ unclosed\
    \ delimiter\n62 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt61n9gx5.rs:11:16\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n10 |     if a + b > c {\n\
    11 |         return -1;\n   |                ^^\n   |                |\n   | \
    \               expected `f64`, found integer\n   |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpt61n9gx5.rs:22:17\n   |\n22 |     area = area + ((a * b) - (c * b));\n\
    \   |                 ^ no implementation for `{float} + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpt61n9gx5.rs:23:17\n   |\n23 |     area\
    \ = area + ((a * c) - (b * c));\n   |                 ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpxxx0f56u.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / 2.0;\n\
    \    area = round(area as f64 * 100.0) / 100.0;\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp9wubq14t.rs:24:12\n\
    \   |\n24 |     area = round(area as f64 * 100.0) / 100.0;\n   |            ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9wubq14t.rs:11:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n10 |     if a + b > c {\n11 |         return -1;\n   |        \
    \        ^^\n   |                |\n   |                expected `f64`, found\
    \ integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp9wubq14t.rs:20:17\n   |\n20 |\
    \     area = area + (b * b);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp9wubq14t.rs:21:17\n   |\n21 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp9wubq14t.rs:22:17\n   |\n22 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpper6kzf_.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpper6kzf_.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area: f64 = 0.0;\n    area = (a * b) - (c\
    \ * a);\n    area = area / 2.0;\n    area = area.round();\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vwq__og.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1vwq__og.rs:20:12\n   |\n19 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n20 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n20 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c * a) / (b * b)\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6px21cyu.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6px21cyu.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     (a * b + c\
    \ * a) / (b * b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |     ((a * b\
    \ + c * a) / (b * b)) as f64\n   |     +                         ++++++++\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += (b - a) * (b - c);\n    }\n    \n    if a > c {\n        area\
    \ += (b - a) * (c - b);\n    }\n    \n    if c > b {\n        area += (b - a)\
    \ * (c - a);\n    }\n    \n    if area > 0.0 {\n        area /= 2.0;\n    }\n\
    \    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphk3h_h5y.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmphk3h_h5y.rs:23:14\n   |\n23 |\
    \         area += (b - a) * (b - c);\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphk3h_h5y.rs:27:14\n\
    \   |\n27 |         area += (b - a) * (c - b);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmphk3h_h5y.rs:31:14\n   |\n31 |         area += (b - a) * (c - a);\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a + b +\
    \ c) / 2.0;\n    area = area + (a - b - c) / 2.0;\n    area = area + (b - a -\
    \ c) / 2.0;\n    area = area - (a + b + c) / 2.0;\n    area = area - (a - b -\
    \ c) / 2.0;\n    area = area - (b - a - c) / 2.0;\n    area = area / 2.0;\n  \
    \  area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsacmhmes.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpsacmhmes.rs:20:31\n   |\n20 |   \
    \  area = area + (a + b + c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsacmhmes.rs:21:31\n\
    \   |\n21 |     area = area + (a - b - c) / 2.0;\n   |                       \
    \        ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpsacmhmes.rs:22:31\n   |\n22 |     area =\
    \ area + (b - a - c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implem"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr9t_vfmc.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr9t_vfmc.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    if a + b >\
    \ c {\n        area = area + b * c;\n    }\n    if a + c > b {\n        area =\
    \ area + c * b;\n    }\n    if b + c > a {\n        area = area + a * c;\n   \
    \ }\n    area = area / 2.0;\n    area = area.round();\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfg8c5muo.rs:12:21\n\
    \   |\n12 |         area = area + b * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfg8c5muo.rs:15:21\n\
    \   |\n15 |         area = area + c * b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpfg8c5muo.rs:18:21\n\
    \   |\n18 |         area = area + a * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpfg8c5muo.rs:21:17\n   |\n21 |     area = area.round();\n\
    \   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjcs3twyd.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjcs3twyd.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * (b + c) / 2.0;\n    }\n    \n    if a > c {\n        area\
    \ += c * (a + c) / 2.0;\n    }\n    \n    if b > c {\n        area += a * (a +\
    \ b) / 2.0;\n    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzb2w1h4k.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpzb2w1h4k.rs:23:29\n   |\n23 |   \
    \      area += b * (b + c) / 2.0;\n   |                             ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpzb2w1h4k.rs:27:29\n\
    \   |\n27 |         area += c * (a + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpzb2w1h4k.rs:31:29\n   |\n31 |         area += a * (a + b) / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `D"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwldqqn8i.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpwldqqn8i.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5hgsq943.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5hgsq943.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpecktav23.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpecktav23.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpecktav23.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpecktav23.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    let mut area = 0.0;\n    area = area + (a * b) - (c\
    \ * c);\n    area = area / (2.0 * c);\n    area = area.round();\n    area\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbbgg_vtt.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmpbbgg_vtt.rs:20:17\n   |\n20 |     area =\
    \ area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpbbgg_vtt.rs:21:24\n   |\n\
    21 |     area = area / (2.0 * c);\n   |                        ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmpbbgg_vtt.rs:22:17\n   |\n22 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n19 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 4 previous errors\n\nSome err"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   if s == 1 {\n        return 1.0;\n    }\n    if s == 2 {\n        return 2.0;\n\
    \    }\n    if s == 3 {\n        return 3.0;\n    }\n    if s == 4 {\n       \
    \ return 4.0;\n    }\n    if s == 5 {\n        return 5.0;\n    }\n    if s ==\
    \ 6 {\n        return 6.0;\n    }\n    if s == 7 {\n        return 7.0;\n    }\n\
    \    if s == 8 {\n        return 8.0;\n    }\n    if s == 9 {\n        return\
    \ 9.0;\n    }\n    if s == 10 {\n        return 10.0;\n    }\n    if s == 11 {\n\
    \        return 11.0;\n    }\n    if s == 12 {\n        return 12.0;\n    }\n\
    \    if s == 13 {\n        return 13.0;\n    }\n    if s == 14 {\n        return\
    \ 14.0;\n    }\n    if s == 15 {\n        return 15.0;\n    }\n    if s == 16\
    \ {\n        return 16.0;\n    }\n    if s == 17 {\n        return 17.0;\n   \
    \ }\n    if s == 18 {\n        return 18.0;\n    }\n    if s == 19 {\n       \
    \ return 19.0;\n    }\n    if s == 20 {\n        return 20.0;\n    }\n    if s\
    \ == 21 {\n        return 21.0;\n    }\n    if s == 22 {\n        return 22.0;\n\
    \    }\n    if s == 23 {\n        return 23.0;\n    }\n    if s == 24 {\n    \
    \    return 24.0;\n    }\n    if s == 25 {\n        return 25.0;\n    }\n    if\
    \ s == 26 {\n        return 26.0;\n    }\n    if s == 27 {\n        return 27.0;\n\
    \    }\n    if s == 28 {\n        return 28.0;\n    }\n    if s == 29 {\n    \
    \    return 29.0;\n    }\n    if s == 30 {\n        return 30.0;\n    }\n    if\
    \ s == 31 {\n        return 31.0;\n    }\n    if s == 32 {\n        return 32.0;\n\
    \    }\n    if s == 33 {\n        return 33.0;\n    }\n    if s == 34 {\n    \
    \    return 34.0;\n    }\n    if s == 35 {\n        return 35.0;\n    }\n    if\
    \ s == 36 {\n        return 36.0;\n    }\n    if s == 37 {\n        return 37.0;\n\
    \    }\n    if s == 38 {\n        return 38.0;\n    }\n    if s == 39 {\n    \
    \    return 39.0;\n    }\n    if s == 40 {\n        return 40.0;\n    }\n    if\
    \ s == 41 {\n        return 41.0;\n    }\n    if s == 42 {\n        return 42.0;\n\
    \    }\n    if s == 43 {\n        return 43.0;\n    }\n    if s == 44 {\n    \
    \    return 44.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4xivsian.rs:162:3\n\
    \    |\n9   | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n146 |     if s == 44 {\n    |                - this delimiter might not be\
    \ properly closed...\n...\n149 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n162 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp4xivsian.rs:9:51\n  |\n9 | fn triangle_area(a: isize, b: isize, c: isize)\
    \ -> f64 {\n  |    -------------                                  ^^^ expected\
    \ `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64 = 0.0;\n    sum +=\
    \ a;\n    sum += b;\n    sum += c;\n    if sum > c {\n        sum -= c;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp_gfarfq8.rs:11:9\n\
    \   |\n11 |     sum += a;\n   |         ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp_gfarfq8.rs:12:9\n\
    \   |\n12 |     sum += b;\n   |         ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp_gfarfq8.rs:13:9\n\
    \   |\n13 |     sum += c;\n   |         ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_gfarfq8.rs:14:14\n   |\n14 |\
    \     if sum > c {\n   |              ^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating p"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    \n    if area > 1.0 {\n\
    \        return -1.0;\n    }\n    \n    area.round()\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ql8ylfo.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmp5ql8ylfo.rs:21:19\n   |\n21 |     area +=\
    \ a * b * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5ql8ylfo.rs:22:19\n   |\n\
    22 |     area += a * c * 0.5;\n   |                   ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5ql8ylfo.rs:23:19\n\
    \   |\n23 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        a + b + c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhrh75yy.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdhrh75yy.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         (a + b + c) as f64\n   |         +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if b + c > a {\n        -1\n    } else if c + a > b {\n        -1\n    } else\
    \ {\n        (a * b + c * a + b * c) / (2.0 * a)\n    }\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfhy3xiw.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyfhy3xiw.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyfhy3xiw.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpyfhy3xiw.rs:17:40\n   |\n\
    17 |         (a * b + c * a + b * c) / (2.0 * a)\n   |                       \
    \                 ^ no implementation for `{float} * isize`\n   |\n   = help:\
    \ the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    (a * b + c * a) / (b * c + a * b)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps6okf9u3.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps6okf9u3.rs:22:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n22 |     (a * b + c\
    \ * a) / (b * c + a * b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    22 |     ((a * b + c * a) / (b * c + a * b)) as f64\n   |     +              \
    \                   ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        ((a + b) * c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg8cbeejr.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpg8cbeejr.rs:13:23\n\
    \   |\n13 |         ((a + b) * c) / 2.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / (a + b + c),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpowok1p0q.rs:13:14\n\
    \   |\n10 | /     match a + b + c {\n11 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n12 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n13 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n14 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplg9b6phv.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    \n    if a + b > c\
    \ {\n        area = area + (b - c) * (b + c) / 2.0;\n    }\n    \n    if a + c\
    \ > b {\n        area = area + (c - a) * (c + a) / 2.0;\n    }\n    \n    if b\
    \ + c > a {\n        area = area + (a - b) * (a + b) / 2.0;\n    }\n    \n   \
    \ area = area / 2.0;\n    \n    area = area.round();\n    \n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphw1oeben.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmphw1oeben.rs:23:41\n   |\n23 |         area\
    \ = area + (b - c) * (b + c) / 2.0;\n   |                                    \
    \     ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmphw1oeben.rs:27:41\n   |\n27 |         area = area + (c - a) * (c\
    \ + a) / 2.0;\n   |                                         ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphw1oeben.rs:31:41\n\
    \   |\n31 |         area = area + (a - b) * (a + b) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemen"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpi_aohy8q.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / 3.0,\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpd6i_s5mu.rs:13:24\n\
    \   |\n13 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4t6foaj0.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp4t6foaj0.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi87hywdb.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpi87hywdb.rs:19:17\n   |\n19 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjna0xuv1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpjna0xuv1.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a * b) -\
    \ (c * c);\n    area = area + (a * c) - (b * b);\n    area = area + (c * a) -\
    \ (b * c);\n    area = area + (c * b) - (a * a);\n    area = area / 2.0;\n   \
    \ area = round(area, 2);\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpz4d3r2f6.rs:25:12\n\
    \   |\n25 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz4d3r2f6.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpz4d3r2f6.rs:20:17\n   |\n20 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpz4d3r2f6.rs:21:17\n   |\n21 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpz4d3r2f6.rs:22:17\n\
    \   |\n22 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / (a + b + c),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdhz4ynfa.rs:13:14\n\
    \   |\n10 | /     match a + b + c {\n11 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n12 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n13 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n14 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              +                     \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3pfi_1oz.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp3pfi_1oz.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        x => if a + b > c { 1.0 } else { -1.0 },\n        _ => if a + c > b {\
    \ 1.0 } else { -1.0 },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpdw2lnjvr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * b - 4 * a * c;\n    }\n    if a > c {\n        area += a\
    \ * c - 4 * a * b;\n    }\n    if b > c {\n        area += a * c - b * b + 4 *\
    \ a * a;\n    }\n    \n    area = area.sqrt();\n    \n    if area < 0.0 {\n  \
    \      area = -1.0;\n    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpubck6kvm.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpubck6kvm.rs:23:14\n   |\n23 |\
    \         area += b * b - 4 * a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpubck6kvm.rs:26:14\n\
    \   |\n26 |         area += a * c - 4 * a * b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpubck6kvm.rs:29:14\n   |\n29 |         area += a * c - b * b + 4\
    \ * a * a;\n   |              ^^ no implementation for `{float} += isize`\n  \
    \ |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpid3wmw70.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = a < b\
    \ ? a : b;\n    let mut b = b < c ? b : c;\n    let mut c = c < a ? c : a;\n \
    \   while a > b {\n        s += a;\n        a -= b;\n    }\n    while b > c {\n\
    \        t += b;\n        b -= c;\n    }\n    while c > a {\n        u += c;\n\
    \        c -= a;\n    }\n    while a > b {\n        v += a;\n        a -= b;\n\
    \    }\n    while b > c {\n        w += b;\n        b -= c;\n    }\n    while\
    \ c > a {\n        x += c;\n        c -= a;\n    }\n    while a > b {\n      \
    \  y += a;\n        a -= b;\n    }\n    while b > c {\n        z += b;\n     \
    \   b -= c;\n    }\n    s * (s - t) * (s - u) * (s - v) * (s - w) * (s - x) *\
    \ (s - y) * (s - z) * (t - w) * (t - x) * (t - y) * (t - z) * (u - w) * (u - x)\
    \ * (u - y) * (u - z) * (v - w) * (v - x) * (v - y) * (v - z) * (w - x) * (w -\
    \ y) * (w - z)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpv9kf19be.rs:18:25\n   |\n18 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprcmpdgs1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmprcmpdgs1.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    let mut area = 0.0;\n    area = area + (a * b) - (a\
    \ * c);\n    area = area + (b * c) - (b * a);\n    area = area + (c * a) - (c\
    \ * b);\n    area = area / 2.0;\n    area = round(area as f64 * 100.0) / 100.0;\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpg0b8osu_.rs:24:12\n\
    \   |\n24 |     area = round(area as f64 * 100.0) / 100.0;\n   |            ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg0b8osu_.rs:11:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n10 |     if a + b > c {\n11 |         return -1\n   |         \
    \       ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpg0b8osu_.rs:20:17\n   |\n20 |     area\
    \ = area + (a * b) - (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpg0b8osu_.rs:21:17\n   |\n21 |\
    \     area = area + (b * c) - (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpg0b8osu_.rs:22:17\n\
    \   |\n22 |     area = area + (c * a) - (c * b);\n   |                 ^ no implementat"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqqoptbad.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpqqoptbad.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1.0\n\
    \    }\n    if a + c > b {\n        return -1.0\n    }\n    if b + c > a {\n \
    \       return -1.0\n    }\n    let mut s = 0.0;\n    if a > b {\n        s +=\
    \ a;\n    }\n    if a > c {\n        s += b;\n    }\n    if b > c {\n        s\
    \ += c;\n    }\n    s / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr04u7y8g.rs:21:11\n\
    \   |\n21 |         s += a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr04u7y8g.rs:24:11\n\
    \   |\n24 |         s += b;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpr04u7y8g.rs:27:11\n\
    \   |\n27 |         s += c;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhpjgvb_.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpbhpjgvb_.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        (b * b) - ((a * c) - (b * a))\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpul453b9l.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpul453b9l.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         (b * b) - ((a * c) - (b * a))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         ((b * b) - ((a * c) - (b * a))) as f64\n   | \
    \        +                             ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum: f64 = 0.0;\n    if\
    \ a + b > c {\n        area_sum += (a + b - c) * (a + b - c) / 2.0;\n    }\n \
    \   if a + c > b {\n        area_sum += (a + c - b) * (a + c - b) / 2.0;\n   \
    \ }\n    if b + c > a {\n        area_sum += (b + c - a) * (b + c - a) / 2.0;\n\
    \    }\n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpxesxqyoq.rs:12:47\n\
    \   |\n12 |         area_sum += (a + b - c) * (a + b - c) / 2.0;\n   |       \
    \                                        ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpxesxqyoq.rs:15:47\n   |\n\
    15 |         area_sum += (a + c - b) * (a + c - b) / 2.0;\n   |              \
    \                                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpxesxqyoq.rs:18:47\n   |\n\
    18 |         area_sum += (b + c - a) * (b + c - a) / 2.0;\n   |              \
    \                                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 othe"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let\
    \ mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n\
    \    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = 0.0;\n    let mut\
    \ b = 0.0;\n    let mut c = 0.0;\n    let mut d = 0.0;\n    let mut e = 0.0;\n\
    \    let mut f = 0.0;\n    let mut g = 0.0;\n    let mut h = 0.0;\n    let mut\
    \ i = 0.0;\n    let mut j = 0.0;\n    let mut k = 0.0;\n    let mut l = 0.0;\n\
    \    let mut m = 0.0;\n    let mut n = 0.0;\n    let mut o = 0.0;\n    let mut\
    \ p = 0.0;\n    let mut q = 0.0;\n    let mut r = 0.0;\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n\
    \    let mut a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut\
    \ d = 0.0;\n    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n\
    \    let mut h = 0.0;\n    let mut i = 0.0;\n    let mut j = 0.0;\n    let mut\
    \ k = 0.0;\n    let mut l = 0.0;\n    let mut m = 0.0;\n    let mut n = 0.0;\n\
    \    let mut o = 0.0;\n    let mut p = 0.0;\n    let mut q = 0.0;\n    let mut\
    \ r = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut a = 0.0;\n    let mut b = 0.0;\n\
    \    let mut c = 0.0;\n    let mut d = 0.0;\n    let mut e = 0.0;\n    let mut\
    \ f = 0.0;\n    let mut g = 0.0;\n    let mut h = 0.0;\n\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy9tt4mnl.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpy9tt4mnl.rs:9:51\n  |\n9 | fn triangle_area(a: isize, b:\
    \ isize, c: isize) -> f64 {\n  |    -------------                            \
    \      ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ + b - c;\n    }\n    if a + c > b {\n        b = a + c - b;\n    }\n    if b\
    \ + c > a {\n        c = b + c - a;\n    }\n    (a * b * c) / ((a * b) + c * c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmp8fj56srn.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    let mut sides\
    \ = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    \n    if a + b > c {\n\
    \        sides = a;\n        s = b;\n        t = c;\n    } else {\n        sides\
    \ = b;\n        s = c;\n        t = a;\n    }\n    \n    if sides == 0.0 {\n \
    \       return -1.0;\n    }\n    \n    area = s * t / sides;\n    \n    if area\
    \ == 0.0 {\n        return -1.0;\n    }\n    \n    area = round(area as f64 *\
    \ 100.0) / 100.0;\n    \n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpetpxvnby.rs:35:12\n\
    \   |\n35 |     area = round(area as f64 * 100.0) / 100.0;\n   |            ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpetpxvnby.rs:16:17\n\
    \   |\n11 |     let mut sides = 0.0;\n   |                     --- expected due\
    \ to this value\n...\n16 |         sides = a;\n   |                 ^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpetpxvnby.rs:17:13\n   |\n12 |     let mut s = 0.0;\n   |           \
    \      --- expected due to this value\n...\n17 |         s = b;\n   |        \
    \     ^ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpetpxvnby.rs:18:13\n   |\n13 |     let mut t = 0.0;\n  \
    \ |                 --- expected due to this value\n...\n18 |         t = c;\n\
    \   |             ^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpetpxvnby.rs:20:17\n   |\n11 |     let mut sides\
    \ = 0.0;\n   |                     --- expected due to this value\n...\n20 | \
    \        sides = b;\n   |                 ^ expected floating-point number, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpetpxvnby.rs:21:13\n\
    \   |\n12 |     let mut s = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n21 |         s = c;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpetpxvnby.rs:22:13\n\
    \   |\n13 |     let mut t = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n22 |         t = a;\n   |             ^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 7 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyt6pipx.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyt6pipx.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyt6pipx.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpmyt6pipx.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp65yeo85u.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut s = (a + b + c) / 2;\n    if s == 0 {\n\
    \        return 0;\n    }\n    let mut area = 0.0;\n    while s > 0 {\n      \
    \  area += s;\n        s /= 2.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptqi4ffx_.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmptqi4ffx_.rs:25:14\n   |\n25 |\
    \         area += s;\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmptqi4ffx_.rs:26:11\n\
    \   |\n26 |         s /= 2.0;\n   |           ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmprbv5kfw3.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    \n    area /= 3.0;\n\
    \    \n    area.round()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4rknuk47.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp4rknuk47.rs:21:19\n   |\n21 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp4rknuk47.rs:22:19\n\
    \   |\n22 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp4rknuk47.rs:23:19\n\
    \   |\n23 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64 = 0.0;\n    \n   \
    \ if a + b > c {\n        sum = a + b - c;\n    } else if b + c > a {\n      \
    \  sum = a + b - c;\n    } else {\n        sum = a + b - c;\n    }\n    \n   \
    \ sum.round()\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpks2pzs93.rs:13:15\n   |\n\
    10 |     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n...\n13 |         sum = a + b - c;\n   |               ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         sum = (a + b - c) as f64;\n   |               +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpks2pzs93.rs:15:15\n   |\n10 |\
    \     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n...\n15 |         sum = a + b - c;\n   |               ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         sum = (a + b - c) as f64;\n   |               +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpks2pzs93.rs:17:15\n   |\n10 |\
    \     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n...\n17 |         sum = a + b - c;\n   |               ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         sum = (a + b - c) as f64;\n   |               +         ++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprgkan_pi.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprgkan_pi.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprgkan_pi.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmprgkan_pi.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1.0\n\
    \    }\n    if a + c > b {\n        return -1.0\n    }\n    if b + c > a {\n \
    \       return -1.0\n    }\n    \n    let mut area_sum = 0.0;\n    area_sum +=\
    \ a * b\n    area_sum += a * c\n    area_sum += b * c\n    area_sum\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `area_sum`\n  --> /tmp/tmp5e8mq1_b.rs:21:22\n\
    \   |\n21 |     area_sum += a * b\n   |                      ^ help: add `;` here\n\
    22 |     area_sum += a * c\n   |     -------- unexpected token\n\nerror: expected\
    \ `;`, found `area_sum`\n  --> /tmp/tmp5e8mq1_b.rs:22:22\n   |\n22 |     area_sum\
    \ += a * c\n   |                      ^ help: add `;` here\n23 |     area_sum\
    \ += b * c\n   |     -------- unexpected token\n\nerror: expected `;`, found `area_sum`\n\
    \  --> /tmp/tmp5e8mq1_b.rs:23:22\n   |\n23 |     area_sum += b * c\n   |     \
    \                 ^ help: add `;` here\n24 |     area_sum\n   |     -------- unexpected\
    \ token\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp5e8mq1_b.rs:21:14\n\
    \   |\n21 |     area_sum += a * b\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp5e8mq1_b.rs:22:14\n\
    \   |\n22 |     area_sum += a * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp5e8mq1_b.rs:23:14\n\
    \   |\n23 |     area_sum += b * c\n   |              ^^ no implem"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf_0nc_w1.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_0nc_w1.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_0nc_w1.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpf_0nc_w1.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s = s + (b - c) * (b + c) / 2.0;\n    }\n    if a + c > b {\n   \
    \     s = s + (c - b) * (c + b) / 2.0;\n    }\n    if b + c > a {\n        s =\
    \ s + (c - a) * (c + a) / 2.0;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfr542zrc.rs:12:35\n\
    \   |\n12 |         s = s + (b - c) * (b + c) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfr542zrc.rs:15:35\n   |\n15 |   \
    \      s = s + (c - b) * (c + b) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpfr542zrc.rs:18:35\n   |\n18 |         s = s + (c - a) * (c + a)\
    \ / 2.0;\n   |                                   ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum = a;\n    sum += b;\n \
    \   sum += c;\n    if sum > c {\n        sum -= c;\n    }\n    sum / 2.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp70vbsh3v.rs:16:9\n\
    \   |\n16 |     sum / 2.0\n   |         ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s = b * b - c;\n    }\n    if a + c > b {\n        s = s * a - c;\n\
    \    }\n    if b + c > a {\n        s = s * b - a;\n    }\n    s / 2.0;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkvjuio6n.rs:12:13\n   |\n\
    10 |     let mut s = 0.0;\n   |                 --- expected due to this value\n\
    11 |     if a + b > c {\n12 |         s = b * b - c;\n   |             ^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0277]: cannot multiply\
    \ `{float}` by `isize`\n  --> /tmp/tmpkvjuio6n.rs:15:15\n   |\n15 |         s\
    \ = s * a - c;\n   |               ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpkvjuio6n.rs:18:15\n   |\n\
    18 |         s = s * b - a;\n   |               ^ no implementation for `{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkvjuio6n.rs:9:51\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |    -------------                 \
    \                 ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n20 |     s\
    \ / 2.0;\n   |            - help: remove this semicolon\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    let mut area = 0.0;\n    \n    area = area +\
    \ (b * c);\n    area = area + (a * c);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * c);\n\
    \    area = area + (c * a) - (c * b);\n    area = area + (a * b) - (a * c);\n\
    \    area = area + (b * a) - (b * c);\n    area = area + (c * a) - (c * b);\n\
    \    area = area + (a * b) - (a * c);\n    area = area + (b * a) - (b * \n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmprdu2cvay.rs:65:1\n\
    \   |\n65 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmprdu2cvay.rs:64:29\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \              - closing delimiter possibly meant for this\n...\n64 |     area\
    \ = area + (b * a) - (b * \n   |                             ^ unclosed delimiter\n\
    65 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprdu2cvay.rs:11:16\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n10 |     if a + b > c {\n11 |       \
    \  return -1\n   |                ^^\n   |                |\n   |            \
    \    expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmprdu2cvay.rs:22:17\n\
    \   |\n22 |     area = area + (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmprdu2cvay.rs:23:17\n\
    \   |\n23 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + ((a + b)\
    \ * (b + c));\n    area = area + ((a * b) * (c + a));\n    area = area + ((a +\
    \ c) * (c + b));\n    area = area / 2.0;\n    area = round(area, 2);\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpg7fqjb5o.rs:24:12\n\
    \   |\n24 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7fqjb5o.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpg7fqjb5o.rs:20:17\n   |\n20 |     area\
    \ = area + ((a + b) * (b + c));\n   |                 ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpg7fqjb5o.rs:21:17\n\
    \   |\n21 |     area = area + ((a * b) * (c + a));\n   |                 ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmpg7fqjb5o.rs:22:17\n   |\n22 |     area = area + ((a + c) * (c + b));\n\
    \   |                 ^ no implementation for `{flo"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a + b >\
    \ c {\n        area = area + (b - c) * (b + c) / 2.0;\n    }\n    if a + c > b\
    \ {\n        area = area + (c - a) * (c + a) / 2.0;\n    }\n    if b + c > a {\n\
    \        area = area + (a - b) * (a + b) / 2.0;\n    }\n    \n    area = area.round()\
    \ as f64;\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp_klhsr7.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpp_klhsr7.rs:23:41\n   |\n23 |   \
    \      area = area + (b - c) * (b + c) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpp_klhsr7.rs:26:41\n   |\n26 |   \
    \      area = area + (c - a) * (c + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpp_klhsr7.rs:29:41\n   |\n29 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not impleme"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut s = 0.0;\n    if a + b > c {\n        s\
    \ = s + (a - b) * (c - b);\n    }\n    if a + c > b {\n        s = s + (a - c)\
    \ * (b - c);\n    }\n    if b + c > a {\n        s = s + (b - c) * (a - c);\n\
    \    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0m46dlnq.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp0m46dlnq.rs:21:15\n   |\n21 |      \
    \   s = s + (a - b) * (c - b);\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp0m46dlnq.rs:24:15\n   |\n24 |\
    \         s = s + (a - c) * (b - c);\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp0m46dlnq.rs:27:15\n\
    \   |\n27 |         s = s + (b - c) * (a - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n      "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpzhm17g57.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpyn8zslyp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a + b +\
    \ c) / 2.0;\n    area = area - (a + b) * (b + c) / 2.0;\n    area = area - (b\
    \ + c) * (a + c) / 2.0;\n    area = area / 2.0;\n    area = area.round();\n  \
    \  return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyav8mrox.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpyav8mrox.rs:20:31\n   |\n20 |   \
    \  area = area + (a + b + c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpyav8mrox.rs:21:37\n\
    \   |\n21 |     area = area - (a + b) * (b + c) / 2.0;\n   |                 \
    \                    ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpyav8mrox.rs:22:37\n   |\n22 |   \
    \  area = area - (b + c) * (a + c) / 2.0;\n   |                              \
    \       ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the foll"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp1enimig4.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum: f64 = 0.0;\n    if a +\
    \ b > c {\n        sum = a + b;\n    } else {\n        sum = c;\n    }\n    if\
    \ a + c > b {\n        sum += c;\n    }\n    if b + c > a {\n        sum += b;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_89ve_ae.rs:12:15\n   |\n\
    10 |     let mut sum: f64 = 0.0;\n   |                  --- expected due to this\
    \ type\n11 |     if a + b > c {\n12 |         sum = a + b;\n   |             \
    \  ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n12 |         sum = (a + b) as f64;\n   |               +\
    \     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_89ve_ae.rs:14:15\n\
    \   |\n10 |     let mut sum: f64 = 0.0;\n   |                  --- expected due\
    \ to this type\n...\n14 |         sum = c;\n   |               ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |         sum = c as f64;\n   |                 ++++++\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmp_89ve_ae.rs:17:13\n   |\n17 |   \
    \      sum += c;\n   |             ^^ no implementation for `f64 += isize`\n \
    \  |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n \
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \        <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n         \
    \    <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp_89ve_ae.rs:20:13\n\
    \   |\n20 |         sum += b;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s > c {\n        s /= 2;\n    }\n    if\
    \ s > b {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8zx1ggc.rs:20:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n20 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n20 |     s as f64\n   |       ++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut a = a as f64;\n\
    \    let mut b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n  \
    \      z = c;\n    } else {\n        z = b;\n    }\n    if a + c > z {\n     \
    \   y = z;\n    } else {\n        y = c;\n    }\n    if b + c > y {\n        x\
    \ = y;\n    } else {\n        x = b;\n    }\n    if a + b > x {\n        w = x;\n\
    \    } else {\n        w = a;\n    }\n    if a + c > w {\n        v = w;\n   \
    \ } else {\n        v = a;\n    }\n    if b + c > v {\n        u = v;\n    } else\
    \ {\n        u = b;\n    }\n    if a + b > u {\n        s = u;\n    } else {\n\
    \        s = a;\n    }\n    if a + c > s {\n        t = s;\n    } else {\n   \
    \     t = a;\n    }\n    if b + c > t{\n        return t;\n    } else {\n    \
    \    return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5.0`,\n right: `6.0`', /tmp/tmppuvh0j26.rs:70:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + ((a + b)\
    \ * (b + c));\n    area = area + ((a * b) * (c + a));\n    area = area + ((b *\
    \ c) * (a + b));\n    area = area / 3.0;\n    area = round(area, 2);\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp_009vnyx.rs:24:12\n\
    \   |\n24 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_009vnyx.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp_009vnyx.rs:20:17\n   |\n20 |     area\
    \ = area + ((a + b) * (b + c));\n   |                 ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_009vnyx.rs:21:17\n\
    \   |\n21 |     area = area + ((a * b) * (c + a));\n   |                 ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  -->\
    \ /tmp/tmp_009vnyx.rs:22:17\n   |\n22 |     area = area + ((b * c) * (a + b));\n\
    \   |                 ^ no implementation for `{flo"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4q06ohh9.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp4q06ohh9.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut s = 0.0;\n    s += a * b * 0.5;\n\
    \    s += a * c * 0.5;\n    s += b * c * 0.5;\n    \n    s / (a + b + c)\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbsr1php.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpkbsr1php.rs:21:16\n   |\n21 | \
    \    s += a * b * 0.5;\n   |                ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpkbsr1php.rs:22:16\n   |\n\
    22 |     s += a * c * 0.5;\n   |                ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpkbsr1php.rs:23:16\n\
    \   |\n23 |     s += b * c * 0.5;\n   |                ^ no implementation for\
    \ `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mu"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99nu8yy1.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp99nu8yy1.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm5s169hq.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm5s169hq.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm5s169hq.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpm5s169hq.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ + b - c;\n    }\n    if a + c > b {\n        b = a + c - b;\n    }\n    if b\
    \ + c > a {\n        c = b + c - a;\n    }\n    a as f64 + b as f64 + c as f64\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11.0`,\n right: `6.0`', /tmp/tmprx2v_sgd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum = 0.0;\n    let mut\
    \ area_product = 0.0;\n    let mut area_product2 = 0.0;\n    let mut area_product3\
    \ = 0.0;\n    let mut area_product4 = 0.0;\n    let mut area_product5 = 0.0;\n\
    \    let mut area_product6 = 0.0;\n    let mut area_product7 = 0.0;\n    let mut\
    \ area_product8 = 0.0;\n    let mut area_product9 = 0.0;\n    let mut area_product10\
    \ = 0.0;\n    let mut area_product11 = 0.0;\n    let mut area_product12 = 0.0;\n\
    \    let mut area_product13 = 0.0;\n    let mut area_product14 = 0.0;\n    let\
    \ mut area_product15 = 0.0;\n    let mut area_product16 = 0.0;\n    let mut area_product17\
    \ = 0.0;\n    let mut area_product18 = 0.0;\n    let mut area_product19 = 0.0;\n\
    \    let mut area_product20 = 0.0;\n    let mut area_product21 = 0.0;\n    let\
    \ mut area_product22 = 0.0;\n    let mut area_product23 = 0.0;\n    let mut area_product24\
    \ = 0.0;\n    let mut area_product25 = 0.0;\n    let mut area_product26 = 0.0;\n\
    \    let mut area_product27 = 0.0;\n    let mut area_product28 = 0.0;\n    let\
    \ mut area_product29 = 0.0;\n    let mut area_product30 = 0.0;\n    let mut area_product31\
    \ = 0.0;\n    let mut area_product32 = 0.0;\n    let mut area_product33 = 0.0;\n\
    \    let mut area_product34 = 0.0;\n    let mut area_product35 = 0.0;\n    let\
    \ mut area_product36 = 0.0;\n    let mut area_product37 = 0.0;\n    let mut area_product38\
    \ = 0.0;\n    let mut area_product39 = 0.0;\n    let mut area_product40 = 0.0;\n\
    \    let mut area_product41 = 0.0;\n    let mut area_product42 = 0.0;\n    let\
    \ mut area_product43 = 0.0;\n    let mut area_product44 = 0.0;\n    let mut area_product45\
    \ = 0.0;\n    let mut area_product46 = 0.0;\n    let mut area_product47 = 0.0;\n\
    \    let mut area_product48 = 0.0;\n    let mut area_product49 = 0.0;\n    let\
    \ mut area_product50 = 0.0;\n    let mut area_product51 = 0.0;\n    let mut area_product52\
    \ = 0.0;\n    let mut area_product53 = 0.0;\n    let mut area_product54 = 0.0;\n\
    \    let mut area_product55 = 0.0;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpau_ze4cx.rs:67:1\n  \
    \ |\n67 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = b\
    \ - c;\n    }\n    if a + c > b {\n        b = c - a;\n    }\n    if b + c > a\
    \ {\n        c = a - b;\n    }\n    (a * b * c) / ((a * b) + c)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.2222222222222223`,\n right: `6.0`', /tmp/tmpjcdl5w89.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if a > b {\n\
    \        area += b * c / a;\n    }\n    \n    if a > c {\n        area += c *\
    \ a / b;\n    }\n    \n    if b > c {\n        area += a * b / c;\n    }\n   \
    \ \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo4h0yr54.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpo4h0yr54.rs:23:14\n   |\n23 |\
    \         area += b * c / a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpo4h0yr54.rs:27:14\n\
    \   |\n27 |         area += c * a / b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpo4h0yr54.rs:31:14\n   |\n31 |         area += a * b / c;\n   |\
    \              ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n       "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * (s - a) * (s - b) * (s - c)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvi_kc0qd.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * (s - a) * (s - b) * (s - c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n14 |     (s * (s - a) * (s - b) * (s - c)) as f64\n   |   \
    \  +                               ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    area += a * b * 0.5;\n\
    \    area += a * c * 0.5;\n    area += b * c * 0.5;\n    \n    area /= 2.0;\n\
    \    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7t_ql56h.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp7t_ql56h.rs:21:19\n   |\n21 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp7t_ql56h.rs:22:19\n\
    \   |\n22 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp7t_ql56h.rs:23:19\n\
    \   |\n23 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ + b - c;\n    }\n    if a + c > b {\n        b = a + c - b;\n    }\n    if b\
    \ + c > a {\n        c = b + c - a;\n    }\n    (a * b * c) / ((a * b) + c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `6.0`', /tmp/tmpiny9_9q_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => a * b * c / 3.0,\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpxu7jqrjv.rs:13:24\n\
    \   |\n13 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a as f64;\n    let mut\
    \ b = b as f64;\n    let mut c = c as f64;\n    if a + b > c {\n        a = a\
    \ - b;\n        b = c - a;\n        c = b - a;\n    }\n    if a + c > b {\n  \
    \      a = a - c;\n        c = c - a;\n        b = b - c;\n    }\n    if b + c\
    \ > a {\n        b = b - c;\n        c = c - b;\n        a = a - c;\n    }\n \
    \   a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmptr2ygf11.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => match a + b {\n            a if a > c => 0.0,\n\
    \            b if b > c => 0.0,\n            c if c > a => 0.0,\n            _\
    \ => 1.0,\n        },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `6.0`', /tmp/tmpv5zexstu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area: f64 = 0.0;\n    area = (a *\
    \ b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkuezf4bt.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkuezf4bt.rs:21:12\n   |\n20 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n21 |     area = (a * b)\
    \ - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n21 |     area = ((a\
    \ * b) - (c * a)) as f64;\n   |            +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    area = area\
    \ + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n    area = area\
    \ + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n    \n    area =\
    \ area.round();\n    \n    return area;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvkumofb8.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpvkumofb8.rs:22:17\n   |\n22 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpvkumofb8.rs:23:17\n   |\n23 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpvkumofb8.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return -1.0;\n    }\n\
    \    s * s\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpid24ob7n.rs:17:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n17 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n    let mut side1\
    \ = 0.0;\n    let mut side2 = 0.0;\n    let mut side3 = 0.0;\n    \n    if a +\
    \ b > c {\n        side1 = b - c;\n        side2 = c - a;\n        side3 = a -\
    \ b;\n    } else {\n        side1 = c - a;\n        side2 = a - b;\n        side3\
    \ = b - c;\n    }\n    \n    area = side1 * side2 * side3;\n    area = area.sqrt();\n\
    \    area = area.round();\n    \n    if area == 0.0 {\n        area = -1.0;\n\
    \    }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmk91i_of.rs:16:17\n   |\n\
    11 |     let mut side1 = 0.0;\n   |                     --- expected due to this\
    \ value\n...\n16 |         side1 = b - c;\n   |                 ^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmk91i_of.rs:17:17\n   |\n12 |     let mut side2 = 0.0;\n   |       \
    \              --- expected due to this value\n...\n17 |         side2 = c - a;\n\
    \   |                 ^^^^^ expected floating-point number, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmk91i_of.rs:18:17\n   |\n13 |  \
    \   let mut side3 = 0.0;\n   |                     --- expected due to this value\n\
    ...\n18 |         side3 = a - b;\n   |                 ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmk91i_of.rs:20:17\n\
    \   |\n11 |     let mut side1 = 0.0;\n   |                     --- expected due\
    \ to this value\n...\n20 |         side1 = c - a;\n   |                 ^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmk91i_of.rs:21:17\n   |\n12 |     let mut side2 = 0.0;\n   |  \
    \                   --- expected due to this value\n...\n21 |         side2 =\
    \ a - b;\n   |                 ^^^^^ expected floating-point number, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmk91i_of.rs:22:17\n   |\n13 |\
    \     let mut side3 = 0.0;\n   |                     --- expected due to this\
    \ value\n...\n22 |         side3 = b - c;\n   |                 ^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0689]: can't call method `sqrt`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmpmk91i_of.rs:26:17\n   |\n\
    26 |     area = area.sqrt();\n   |                 ^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n10 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror[E0689]: can't call method `round`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmpmk91i_of.rs:27:17\n   |\n\
    27 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp: you must "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a * b) -\
    \ (c * c);\n    area = area + (a * c) - (b * b);\n    area = area + (c * a) -\
    \ (b * c);\n    area = area + (c * b) - (a * a);\n    area = area / 2.0;\n   \
    \ area = round(area, 2);\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpj3b_ylvo.rs:25:12\n\
    \   |\n25 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj3b_ylvo.rs:11:16\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpj3b_ylvo.rs:20:17\n   |\n20 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpj3b_ylvo.rs:21:17\n   |\n21 |\
    \     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpj3b_ylvo.rs:22:17\n\
    \   |\n22 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfh36i1gg.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpfh36i1gg.rs:19:17\n   |\n19 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / ((a\
    \ * b) + (a * c) + (b * c));\n    area = area.round();\n    area = area.to_f64();\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3ld3au9.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpl3ld3au9.rs:20:17\n   |\n20 |     area\
    \ = area + (b * b);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpl3ld3au9.rs:21:17\n   |\n21 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpl3ld3au9.rs:22:17\n   |\n22 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    let mut area_sum: f64 = 0.0;\n    area_sum\
    \ += a * b * c / 6.0;\n    area_sum += a * c * c / 6.0;\n    area_sum += b * c\
    \ * c / 6.0;\n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpenov9xu5.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpenov9xu5.rs:21:27\n   |\n21 |   \
    \  area_sum += a * b * c / 6.0;\n   |                           ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpenov9xu5.rs:22:27\n\
    \   |\n22 |     area_sum += a * c * c / 6.0;\n   |                           ^\
    \ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpenov9xu5.rs:23:27\n   |\n23 |     area_sum += b * c * c / 6.0;\n\
    \   |                           ^ no implementation for `isize / {float}`\n  \
    \ |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else if b + c > a {\n        -1\n    } else\
    \ {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb1vvsrd5.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1vvsrd5.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1vvsrd5.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpb1vvsrd5.rs:17:21\n   |\n\
    17 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidrbvkom.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpidrbvkom.rs:19:17\n   |\n19 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    if s == 0 {\n        return 0.0;\n    }\n \
    \   s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp8ce8oz8o.rs:17:7\n\
    \   |\n17 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        a + b + c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyll34jt.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyll34jt.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         (a + b + c) as f64\n   |         +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplia3lz42.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     (s * s)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s = s + b - c;\n    }\n    if a + c > b {\n        s = s + c - b;\n\
    \    }\n    if b + c > a {\n        s = s + c - a;\n    }\n    s * 0.5\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpl4y7iqe3.rs:12:15\n\
    \   |\n12 |         s = s + b - c;\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpl4y7iqe3.rs:15:15\n\
    \   |\n15 |         s = s + c - b;\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpl4y7iqe3.rs:18:15\n\
    \   |\n18 |         s = s + c - a;\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    let mut area = 0.0;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / (a\
    \ * b * c);\n    area = area.round();\n    return area;\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_pi3z5la.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp_pi3z5la.rs:20:17\n   |\n20 |     area\
    \ = area + (b * b);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp_pi3z5la.rs:21:17\n   |\n21 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp_pi3z5la.rs:22:17\n   |\n22 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    (a * b + c * a) / (b * c + a * b)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_qmg1zp.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt_qmg1zp.rs:19:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |     (a * b + c\
    \ * a) / (b * c + a * b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |     ((a * b + c * a) / (b * c + a * b)) as f64\n   |     +              \
    \                   ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
