name: HumanEval_5_intersperse
language: rust
results:
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    for number in numbers_iter.by_ref() {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnxfxhn_.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgnxfxhn_.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dcmjlve.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7dcmjlve.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmp67fnifpw.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(item) = numbers_iter.next()\
    \ {\n        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpnqbt3mb7.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    while let Some(number)\
    \ = (numbers_iter.next_back() as Option<isize>) {\n        result.push(number);\n\
    \        if current_number < number {\n            result.push(delimeter);\n \
    \       }\n        current_number = number;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `let` scrutinee expression\n  -->\
    \ /tmp/tmppy8bzzy6.rs:10:30\n   |\n10 |     while let Some(number) = (numbers_iter.next_back()\
    \ as Option<isize>) {\n   |                              ^                   \
    \                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n10 -     while let Some(number) = (numbers_iter.next_back()\
    \ as Option<isize>) {\n10 +     while let Some(number) = numbers_iter.next_back()\
    \ as Option<isize> {\n   | \n\nerror[E0605]: non-primitive cast: `Option<&isize>`\
    \ as `Option<isize>`\n  --> /tmp/tmppy8bzzy6.rs:10:30\n   |\n10 |     while let\
    \ Some(number) = (numbers_iter.next_back() as Option<isize>) {\n   |         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    while let Some(current_number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n        result.push(current_number);\n        result.push(current_delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn2cc0u7x.rs:11:15\n   |\n\
    11 |     while let Some(current_number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        result.push(last_number);\n       \
    \ result.push(number);\n        last_number = number;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7k90cr4.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.extend_from_slice(&[delimeter]);\n\
    \    numbers_clone.extend_from_slice(&numbers.iter().cloned());\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc_re_3lr.rs:9:37\n  |\n9 |\
    \     numbers_clone.extend_from_slice(&numbers.iter().cloned());\n  |        \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[isize]`,\
    \ found struct `Cloned`\n  |\n  = note: expected reference `&[isize]`\n      \
    \       found reference `&Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpwjj86xq7.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwjj86xq7.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpwjj86xq7.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpwjj86xq7.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpf_a093zj.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpf_a093zj.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpf_a093zj.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpf_a093zj.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0237etx.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl0237etx.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    while let Some(number)\
    \ = (numbers_iter.next(), numbers_iter.next()) {\n        result.push(current_number);\n\
    \        result.push(number);\n        current_number = number;\n    }\n    result.push(current_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ikz23a4.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), numbers_iter.next()) {\n\
    \   |               ^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2cbpzdx5.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2cbpzdx5.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = (numbers_iter.next_back() as Option<isize>)\
    \ {\n        if current_delimeter != 0 {\n            result.push(current_number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \        current_delimeter += 1;\n        if current_delimeter != delimeter {\n\
    \            result.push(current_number);\n            current_delimeter = 0;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `let` scrutinee expression\n  -->\
    \ /tmp/tmp0_t9zr7z.rs:11:30\n   |\n11 |     while let Some(number) = (numbers_iter.next_back()\
    \ as Option<isize>) {\n   |                              ^                   \
    \                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n11 -     while let Some(number) = (numbers_iter.next_back()\
    \ as Option<isize>) {\n11 +     while let Some(number) = numbers_iter.next_back()\
    \ as Option<isize> {\n   | \n\nerror[E0605]: non-primitive cast: `Option<&isize>`\
    \ as `Option<isize>`\n  --> /tmp/tmp0_t9zr7z.rs:11:30\n   |\n11 |     while let\
    \ Some(number) = (numbers_iter.next_back() as Option<isize>) {\n   |         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq2q2icms.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq2q2icms.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpq2q2icms.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmplk6n00tp.rs:9:69\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = Vec::new();\n    let mut current_delimeter\
    \ = delimeter;\n    let mut current_number = numbers_iter.next();\n    while let\
    \ Some(number) = {\n        current.push(number);\n        if current_delimeter\
    \ == 0 {\n            result.push(current);\n            current = Vec::new();\n\
    \            current_delimeter = delimeter;\n            current_number = numbers_iter.next();\n\
    \        } else {\n            current_delimeter--;\n        }\n    }\n    result.push(current);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpvpicw8sk.rs:20:32\n\
    \   |\n20 |             current_delimeter--;\n   |                           \
    \     ^ expected expression\n\nerror: expected `{`, found `result`\n  --> /tmp/tmpvpicw8sk.rs:23:5\n\
    \   |\n12 |       while let Some(number) = {\n   |  _____-----_-\n   | |     |\n\
    \   | |     while parsing the body of this `while` expression\n13 | |        \
    \ current.push(number);\n14 | |         if current_delimeter == 0 {\n15 | |  \
    \           result.push(current);\n...  |\n21 | |         }\n22 | |     }\n  \
    \ | |_____- this `while` condition successfully parsed\n23 |       result.push(current);\n\
    \   |       ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n23 |     { result.push(current); }\n   |     +                       +\n\
    \nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpab6gvvgp.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpab6gvvgp.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpab6gvvgp.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpab6gvvgp.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpkl56z09a.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpt7vfse26.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpt7vfse26.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpt7vfse26.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpocuvmu6x.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpocuvmu6x.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpocuvmu6x.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpocuvmu6x.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa9at4907.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpa9at4907.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp0fqpy1v2.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp3al1ps62.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers_clone.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 0]`,\n right: `[]`', /tmp/tmpxbxr81go.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n        result.push(delimeter);\n\
    \    }\n    result.extend(numbers_iter);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7agyvj9z.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^ expected\
    \ enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |         result.push(Some(delimeter));\n   |                     +++++\
    \         +\n\nerror[E0277]: the trait bound `Vec<Option<isize>>: Extend<isize>`\
    \ is not satisfied\n  --> /tmp/tmp7agyvj9z.rs:13:12\n   |\n13 |     result.extend(numbers_iter);\n\
    \   |            ^^^^^^ the trait `Extend<isize>` is not implemented for `Vec<Option<isize>>`\n\
    \   |\n   = help: the following other types implement trait `Extend<A>`:\n   \
    \          <Vec<T, A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7agyvj9z.rs:14:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<Option<isize>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgmh9135r.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         result.push(Some(number));\n   |                     +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgmh9135r.rs:13:23\n\
    \   |\n9  |     let mut last_number = numbers_iter.next();\n   |             \
    \              ------------------- expected due to this value\n...\n13 |     \
    \    last_number = number;\n   |                       ^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n13 |         last_number = Some(number);\n   |                       +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgmh9135r.rs:16:5\n \
    \  |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpftpc0gx_.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpftpc0gx_.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpftpc0gx_.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpftpc0gx_.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ = delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpmktyan77.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpukiq3hu4.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpukiq3hu4.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpukiq3hu4.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    while let Some(item) = numbers_iter.next() {\n   \
    \     result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmcfsdobk.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmcfsdobk.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(numbers_clone.len() - 1, delimeter);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 0]`,\n right: `[]`', /tmp/tmpnodkzoua.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu_zp7izx.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpu_zp7izx.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzra2p_5.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzra2p_5.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        if current_delimeter\
    \ == 0 {\n            result.push(number);\n            current_delimeter = delimeter;\n\
    \        } else {\n            result.push(current_number);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4u3qn6u9.rs:16:25\n   |\n\
    16 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found integer\n   |                         help: consider borrowing here: `&current_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4u3qn6u9.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next();\n\
    \    while let Some(current_number) = current_number {\n        result.push(current_number);\n\
    \        if let Some(next_number) = numbers_iter.next() {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe1ql00m0.rs:13:25\n   |\n\
    13 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe1ql00m0.rs:16:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp851p5_ft.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp851p5_ft.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp851p5_ft.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp851p5_ft.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = Vec::new();\n    while let Some(item)\
    \ = numbers_iter.next() {\n        current.push(item);\n        result.push(current);\n\
    \        current = Vec::new();\n    }\n    result.push(current);\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_kk6xyf3.rs:16:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<&isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfp0469zt.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfp0469zt.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mpnu9uc.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0mpnu9uc.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmx30xog.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcmx30xog.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.insert(0,\
    \ delimeter);\n    numbers.insert(0, delimeter);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmpjk83reso.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpg0mks91n.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp_tmaza59.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp_tmaza59.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp_tmaza59.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp_tmaza59.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpa_rcmg_l.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpa_rcmg_l.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpa_rcmg_l.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpa_rcmg_l.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    let mut current_numbers_len = 0;\n    let mut current_delimeter_len\
    \ = 0;\n    while current_numbers_len < numbers.len() {\n        if current_delimeter_len\
    \ == delimeter {\n            result.push(numbers_iter.next());\n            current_numbers_len\
    \ += 1;\n            current_delimeter_len = 0;\n            current_number +=\
    \ 1;\n        } else {\n            result.push(current_number);\n           \
    \ current_delimeter_len += 1;\n            current_numbers_len += 1;\n       \
    \     current_delimeter = delimeter;\n            current_number = numbers_iter.next();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqki16cga.rs:20:25\n   |\n\
    20 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqki16cga.rs:24:30\n   |\n9  |     let mut current_number = 0;\n   |\
    \                              - expected due to this value\n...\n24 |       \
    \      current_number = numbers_iter.next();\n   |                           \
    \   ^^^^^^^^^^^^^^^^^^^ expected integer, found enum `Option`\n   |\n   = note:\
    \ expected type `{integer}`\n              found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqki16cga.rs:27:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n27 |     result\n   |     ^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<Option<&isize>>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp11iv53s8.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp11iv53s8.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp48nii57t.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp48nii57t.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp48nii57t.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp48nii57t.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpj658ww4j.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    let mut\
    \ result = Vec::new();\n    for n in numbers {\n        result.push((*numbers)[..n].join(\"\
    \"));\n        numbers = &numbers[n..];\n    }\n    result.push((*numbers)[..].join(\"\
    \"));\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp4uftt8to.rs:10:21\n   |\n10 |         result.push((*numbers)[..n].join(\"\
    \"));\n   |                     ^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `RangeTo<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n \
    \            <RangeTo<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeTo<isize>>` for `[isize]`\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmp4uftt8to.rs:11:20\n   |\n11 |         numbers = &numbers[n..];\n   |\
    \                    ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeFrom<isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n     \
    \        <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because of\
    \ the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4uftt8to.rs:11:19\n   |\n7  |\
    \     let mut numbers = numbers.to_vec();\n   |                       ----------------\
    \ expected due to this value\n...\n11 |         numbers = &numbers[n..];\n   |\
    \                   ^^^^^^^^^^^^^ expected struct `Vec`, found reference\n   |\n\
    \   = note: expected struct `Vec<isize>`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n11 -         numbers = &numbers[n..];\n\
    11 +         numbers = numbers[n..];\n   | \n\nerror[E0599]: the method `join`\
    \ exists for slice `[isize]`, but its trait bounds were not satisfied\n  --> /tmp/tmp4uftt8to.rs:13:32\n\
    \   |\n13 |     result.push((*numbers)[..].join(\"\"));\n   |                \
    \                ^^^^ method cannot be called on `[isize]` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_owned();\n    numbers.insert(0,\
    \ delimeter);\n    numbers.insert(0, delimeter);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmp25qzrufi.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        result.push(last_number);\n       \
    \ result.push(number);\n        last_number = number;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpabg80dsy.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.insert(0,\
    \ delimeter);\n    numbers.insert(0, delimeter);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmp_nxuzvm5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    while let Some(number) = numbers_iter.next() {\n \
    \       result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76yxeq48.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp76yxeq48.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpa2bno4fg.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpa2bno4fg.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpa2bno4fg.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpa2bno4fg.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpumxgqk4f.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpi82bad1a.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp9ojp0_t5.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp9ojp0_t5.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp9ojp0_t5.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp9ojp0_t5.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            result.push(last_delimeter);\n\
    \            last_delimeter = delimeter;\n        } else {\n            result.push(number);\n\
    \            last_delimeter = delimeter;\n        }\n        last_number = number;\n\
    \    }\n    result.push(last_delimeter);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfucac1iw.rs:16:25\n   |\n\
    16 |             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             result.push(*number);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    while i < numbers.len() {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n        i += 2;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3pbj1bh.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv3pbj1bh.rs:16:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmp1y67p66p.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp_r75ruz_.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbs5ul94_.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbs5ul94_.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxoi0jha6.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         result.push(Some(number));\n   |                     +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxoi0jha6.rs:13:23\n\
    \   |\n9  |     let mut last_number = numbers_iter.next();\n   |             \
    \              ------------------- expected due to this value\n...\n13 |     \
    \    last_number = number;\n   |                       ^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n13 |         last_number = Some(number);\n   |                       +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxoi0jha6.rs:16:5\n \
    \  |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2j8mh4h.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut current_number = 0;\n    let mut\
    \ current_delimeter = delimeter;\n    let mut current_number = numbers_iter.next();\n\
    \    while current_number.is_some() {\n        result.push(current_number.unwrap());\n\
    \        current_number = numbers_iter.next();\n    }\n    while current_delimeter\
    \ > 0 {\n        result.push(current_delimeter);\n        current_delimeter =\
    \ numbers_iter.next().unwrap();\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp2c5i1qqq.rs:18:49\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = Vec::new();\n    loop {\n  \
    \      match numbers_iter.next() {\n            Some(number) => {\n          \
    \      current.push(number);\n                if current.len() == 2 {\n      \
    \              result.push(current);\n                    current = Vec::new();\n\
    \                }\n            }\n            None => break,\n        }\n   \
    \ }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfg6w1b94.rs:23:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n23 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<&isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(numbers_clone.len(), 0);\n    numbers_clone.iter().cloned().zip(numbers_clone.iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpemndokba.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpr15ir9wc.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpr15ir9wc.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpr15ir9wc.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpr15ir9wc.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpmk8hrl51.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n        if current_delimeter == 0 {\n            result.push(number);\n \
    \           current_delimeter = delimeter;\n        } else {\n            result.push(current_number);\n\
    \            result.push(number);\n            current_delimeter = 0;\n      \
    \  }\n        current_number += number;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ujis4_y.rs:11:15\n   |\n\
    11 |     while let Some(number) = (numbers_iter.next(), numbers_iter.next()) {\n\
    \   |               ^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next();\n\
    \    while let Some(current_number) = (numbers_iter.next(), current_number) {\n\
    \        result.push(current_number);\n        result.push(delimeter);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprobcdl43.rs:10:15\n   |\n\
    10 |     while let Some(current_number) = (numbers_iter.next(), current_number)\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^   -------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    let mut current_number = 0;\n    while let Some(current_number)\
    \ = (numbers_iter.next(), numbers_iter.next()) {\n        result.push(current_number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vuewgbm.rs:10:15\n   |\n\
    10 |     while let Some(current_number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.truncate(numbers_clone.len()\
    \ - 1);\n    numbers_clone.extend(vec![delimeter; numbers_clone.len()]);\n   \
    \ numbers_clone.extend(numbers);\n    numbers_clone\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpj81j64uf.rs:8:28\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while current_number != Some(0)\
    \ {\n        result.push(current_number);\n        result.push(current_delimeter);\n\
    \        current_number = numbers_iter.next().unwrap();\n        current_delimeter\
    \ = delimeter;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Option<{integer}>`\n  --> /tmp/tmpz_kuqlu4.rs:11:26\n\
    \   |\n11 |     while current_number != Some(0) {\n   |                      \
    \    ^^ no implementation for `&isize == Option<{integer}>`\n   |\n   = help:\
    \ the trait `PartialEq<Option<{integer}>>` is not implemented for `&isize`\n \
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \        f32\n             f64\n             i128\n             i16\n        \
    \     i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_kuqlu4.rs:13:21\n\
    \   |\n13 |         result.push(current_delimeter);\n   |                    \
    \ ^^^^^^^^^^^^^^^^^\n   |                     |\n   |                     expected\
    \ `&isize`, found `isize`\n   |                     help: consider borrowing here:\
    \ `&current_delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz_kuqlu4.rs:17:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < numbers.len() {\n  \
    \      result.push(numbers[i]);\n        result.push(delimeter);\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpw_798_dj.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = {\n   \
    \     let mut number = last_number;\n        last_number = numbers_iter.next().unwrap();\n\
    \        result.push(number);\n        last_delimeter += 1;\n        if last_delimeter\
    \ > numbers.len() {\n            result.push(last_number);\n            last_delimeter\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmpbhnghuys.rs:21:5\n \
    \  |\n11 |       while let Some(number) = {\n   |  _____-----_-\n   | |     |\n\
    \   | |     while parsing the body of this `while` expression\n12 | |        \
    \ let mut number = last_number;\n13 | |         last_number = numbers_iter.next().unwrap();\n\
    14 | |         result.push(number);\n...  |\n19 | |         }\n20 | |     }\n\
    \   | |_____- this `while` condition successfully parsed\n21 |       result\n\
    \   |       ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n21 |     { result }\n   |     +        +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut current = delimeter;\n    loop\
    \ {\n        if numbers_iter.next().is_none() {\n            break;\n        }\n\
    \        result.push(current);\n        current = numbers_iter.next().unwrap();\n\
    \    }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpxhpy4g1j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp8kdys98g.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmptr6o79bx.rs:9:5\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |             |      |\n  |     |             |      immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.any() || delimeter >\
    \ 0 {\n        if numbers_iter.any() {\n            result.push(numbers_iter.next().unwrap());\n\
    \        }\n        if delimeter > 0 {\n            result.push(delimeter);\n\
    \        }\n        delimeter = 0;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpe6wjykjx.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ || delimeter > 0 {\n     |                        ^^^- supplied 0 arguments\n\
    \     |                        |\n     |                        expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpe6wjykjx.rs:10:25\n\
    \     |\n10   |         if numbers_iter.any() {\n     |                      \
    \   ^^^- supplied 0 arguments\n     |                         |\n     |      \
    \                   expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplt1eyf77.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = delimeter;\n    loop {\n   \
    \     match numbers_iter.next() {\n            Some(number) => {\n           \
    \     result.push(number);\n                current = delimeter;\n           \
    \ }\n            None => break,\n        }\n        result.push(current);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph2oxa7vt.rs:18:21\n   |\n\
    18 |         result.push(current);\n   |                     ^^^^^^^\n   |   \
    \                  |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&current`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph2oxa7vt.rs:20:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    let mut current_number = numbers_iter.next();\n    while current_number.is_some()\
    \ {\n        if current_delimeter == 0 {\n            result.push(current_number.unwrap());\n\
    \            current_delimeter = delimeter;\n        } else {\n            result.push(current_number.unwrap());\n\
    \            result.push(current_delimeter);\n            current_delimeter =\
    \ 0;\n        }\n        current_number = numbers_iter.next();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3dd208d.rs:18:25\n   |\n\
    18 |             result.push(current_delimeter);\n   |                       \
    \  ^^^^^^^^^^^^^^^^^\n   |                         |\n   |                   \
    \      expected `&isize`, found `isize`\n   |                         help: consider\
    \ borrowing here: `&current_delimeter`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt3dd208d.rs:23:5\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                                               \
    \           ---------- expected `Vec<isize>` because of return type\n...\n23 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsh5bblnj.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsh5bblnj.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp_oet12nm.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            result.push(last_delimeter);\n\
    \            last_delimeter = delimeter;\n        } else {\n            result.push(number);\n\
    \            last_delimeter = delimeter;\n        }\n        last_number = number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdxf9duak.rs:16:25\n   |\n\
    16 |             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             result.push(*number);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl48uni5c.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpl48uni5c.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7754fe3h.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7754fe3h.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfs3f5hf7.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpfs3f5hf7.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpfs3f5hf7.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpfs3f5hf7.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpadzbdjrb.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         result.push(Some(number));\n   |                     +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpadzbdjrb.rs:13:23\n\
    \   |\n9  |     let mut last_number = numbers_iter.next();\n   |             \
    \              ------------------- expected due to this value\n...\n13 |     \
    \    last_number = number;\n   |                       ^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n13 |         last_number = Some(number);\n   |                       +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpadzbdjrb.rs:16:5\n \
    \  |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpykyqunxl.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpykyqunxl.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptr0t33jf.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptr0t33jf.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.truncate(numbers_clone.len()\
    \ - 1);\n    numbers_clone.extend(vec![delimeter, delimeter]);\n    numbers_clone.extend(numbers);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpcj7y9ycj.rs:8:28\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    let mut current_numbers_iter = numbers_iter.next();\n    while\
    \ let Some(number) = current_numbers_iter {\n        result.push(number);\n  \
    \      current_delimeter += 1;\n        current_numbers_iter = numbers_iter.next();\n\
    \        if current_delimeter > numbers.len() {\n            result.push(number);\n\
    \            current_delimeter = 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdpbisg5q.rs:16:32\n   |\n\
    16 |         if current_delimeter > numbers.len() {\n   |                    \
    \            ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n16 |         if current_delimeter > numbers.len().try_into().unwrap() {\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpbisg5q.rs:21:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        if current_delimeter\
    \ == 0 {\n            result.push(number);\n            current_delimeter = delimeter;\n\
    \        } else {\n            result.push(current_number);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm_nn_4b.rs:16:25\n   |\n\
    16 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found integer\n   |                         help: consider borrowing here: `&current_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgm_nn_4b.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpdjwi6hv8.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpdjwi6hv8.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpdjwi6hv8.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpdjwi6hv8.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = {\n   \
    \     let mut delimeter = last_delimeter;\n        last_delimeter = delimeter;\n\
    \        result.push(last_number);\n        last_number = number;\n    }\n   \
    \ result.push(last_number);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmpax7n8p6q.rs:17:5\n \
    \  |\n11 |       while let Some(number) = {\n   |  _____-----_-\n   | |     |\n\
    \   | |     while parsing the body of this `while` expression\n12 | |        \
    \ let mut delimeter = last_delimeter;\n13 | |         last_delimeter = delimeter;\n\
    14 | |         result.push(last_number);\n15 | |         last_number = number;\n\
    16 | |     }\n   | |_____- this `while` condition successfully parsed\n17 |  \
    \     result.push(last_number);\n   |       ^^^^^^ expected `{`\n   |\nhelp: try\
    \ placing this code inside a block\n   |\n17 |     { result.push(last_number);\
    \ }\n   |     +                           +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpisbk7cdd.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpisbk7cdd.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            result.push(last_delimeter);\n\
    \            last_delimeter = delimeter;\n        } else {\n            result.push(number);\n\
    \            last_delimeter = last_number;\n            last_number = number;\n\
    \        }\n    }\n    result.push(last_delimeter);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptnpiy23_.rs:16:25\n   |\n\
    16 |             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             result.push(*number);\n   |                         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptnpiy23_.rs:17:30\n   |\n10 |     let mut last_delimeter\
    \ = delimeter;\n   |                              --------- expected due to this\
    \ value\n...\n17 |             last_delimeter = last_number;\n   |           \
    \                   ^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |             last_delimeter = *last_number;\n\
    \   |                              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n        if current_delimeter == 0 {\n            result.push(number);\n \
    \           current_delimeter = delimeter;\n        } else {\n            result.push(current_number);\n\
    \            result.push(current_delimeter);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj8c0t4ru.rs:11:15\n   |\n\
    11 |     while let Some(number) = (numbers_iter.next(), numbers_iter.next()) {\n\
    \   |               ^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5jgd3_r.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpd5jgd3_r.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp3e07h67m.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    let mut last_number = numbers_iter.next();\n    while\
    \ let Some(number) = last_number {\n        result.push(number);\n        last_number\
    \ = numbers_iter.next();\n        if last_number.is_none() {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppzo4kt24.rs:14:25\n   |\n\
    14 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppzo4kt24.rs:17:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq_j_l1k.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfq_j_l1k.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number != last_number {\n            result.push(last_number);\n  \
    \          result.push(last_delimeter);\n            last_number = number;\n \
    \           last_delimeter = delimeter;\n        } else {\n            last_delimeter\
    \ += 1;\n        }\n    }\n    result.push(last_number);\n    result\n}\n\nfn\
    \ main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpe9gyn_29.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6graj1x3.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6graj1x3.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpl6trtr9t.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next();\n\
    \    while let Some(current_number) = {\n        result.push(current_number);\n\
    \        if let Some(next_number) = {\n            result.push(delimeter);\n \
    \           result.push(next_number);\n        }\n        current_number = numbers_iter.next();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `current_number`\n  --> /tmp/tmpgoxb05vy.rs:16:9\n\
    \   |\n12 |         if let Some(next_number) = {\n   |         -- this `if` expression\
    \ has a condition, but no block\n...\n16 |         current_number = numbers_iter.next();\n\
    \   |         ^^^^^^^^^^^^^^ expected `{`\n   |\nhelp: try placing this code inside\
    \ a block\n   |\n16 |         { current_number = numbers_iter.next(); }\n   |\
    \         +                                       +\n\nerror: expected `{`, found\
    \ `result`\n  --> /tmp/tmpgoxb05vy.rs:18:5\n   |\n10 |       while let Some(current_number)\
    \ = {\n   |  _____-----_-\n   | |     |\n   | |     while parsing the body of\
    \ this `while` expression\n11 | |         result.push(current_number);\n12 | |\
    \         if let Some(next_number) = {\n13 | |             result.push(delimeter);\n\
    ...  |\n16 | |         current_number = numbers_iter.next();\n17 | |     }\n \
    \  | |_____- this `while` condition successfully parsed\n18 |       result\n \
    \  |       ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n18 |     { result }\n   |     +        +\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7aeacsr.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj7aeacsr.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmps_wr6i9w.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmps_wr6i9w.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmps_wr6i9w.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmps_wr6i9w.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while current_number != delimeter {\n        if current_delimeter\
    \ == 0 {\n            result.push(numbers_iter.next());\n        } else {\n  \
    \          result.push(current_number);\n            result.push(numbers_iter.next());\n\
    \        }\n        current_delimeter = current_delimeter + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp30ifqj7t.rs:15:25\n   |\n\
    15 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp30ifqj7t.rs:20:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n20 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.truncate(numbers_clone.len()\
    \ / 2);\n    numbers_clone.extend(vec![delimeter; numbers_clone.len()]);\n   \
    \ numbers_clone.extend(numbers_clone.iter().cloned());\n    numbers_clone\n}\n\
    \nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmpd4qcj12y.rs:10:5\n   |\n10 |     numbers_clone.extend(numbers_clone.iter().cloned());\n\
    \   |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^\n   |     |    \
    \         |      |\n   |     |             |      immutable borrow occurs here\n\
    \   |     |             immutable borrow later used by call\n   |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfdxqmaql.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfdxqmaql.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp303tkwkj.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp303tkwkj.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp303tkwkj.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpmh_gf8wt.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpi8vrgpok.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpi8vrgpok.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpi8vrgpok.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    let mut numbers_iter\
    \ = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[21, 22, 19, 18]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpbupfg3ph.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmph_4rxh4g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmph_4rxh4g.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmph_4rxh4g.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmph_4rxh4g.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpjeh9ube8.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpjeh9ube8.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpjeh9ube8.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpjeh9ube8.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next();\n\
    \    while let Some(current_number) = (numbers_iter.next(), current_number) {\n\
    \        result.push(current_number);\n        result.push(delimeter);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_3mbslsy.rs:10:15\n   |\n\
    10 |     while let Some(current_number) = (numbers_iter.next(), current_number)\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^   -------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        if current_delimeter\
    \ == 0 {\n            result.push(number);\n            current_delimeter = 1;\n\
    \        } else {\n            result.push(delimeter);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa_7nrrke.rs:16:25\n   |\n\
    16 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa_7nrrke.rs:21:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpsqahxcxh.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut current = Vec::new();\n    while\
    \ let Some(next) = numbers_iter.next() {\n        current.push(next);\n      \
    \  result.push(delimeter);\n        result.push(current);\n        current = Vec::new();\n\
    \    }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3c9m79od.rs:13:21\n   |\n\
    13 |         result.push(current);\n   |                     ^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3c9m79od.rs:16:17\n\
    \   |\n16 |     result.push(current);\n   |                 ^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp7rc4lx2g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp7rc4lx2g.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp7rc4lx2g.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    while let Some(number)\
    \ = (numbers_iter.next_back().unwrap()) {\n        result.push(number);\n    \
    \    if current_number != number {\n            result.push(delimeter);\n    \
    \    }\n        current_number = number;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `let` scrutinee expression\n  -->\
    \ /tmp/tmpc26ym9s6.rs:10:30\n   |\n10 |     while let Some(number) = (numbers_iter.next_back().unwrap())\
    \ {\n   |                              ^                                 ^\n \
    \  |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n10 -     while let Some(number) = (numbers_iter.next_back().unwrap()) {\n\
    10 +     while let Some(number) = numbers_iter.next_back().unwrap() {\n   | \n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc26ym9s6.rs:10:15\n   |\n10 |\
    \     while let Some(number) = (numbers_iter.next_back().unwrap()) {\n   |   \
    \            ^^^^^^^^^^^^   ----------------------------------- this expression\
    \ has type `&isize`\n   |               |\n   |               expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<_>`\n\nerror[E0277]: can't compare `{integer}` with `&_`\n  -->\
    \ /tmp/tmpc26ym9s6.rs:12:27\n   |\n12 |         if current_number != number {\n\
    \   |                           ^^ no implementation for `{integer} == &_`\n \
    \  |\n   = help: the trait `PartialEq<&_>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc26ym9s6.rs:13:25\n\
    \   |\n13 |             result.push(delimeter);\n   |                        \
    \ ^^^^^^^^^\n   |                         |\n   |                         expected\
    \ reference, found `isize`\n   |                         help: consider borrowing\
    \ here: `&delimeter`\n   |\n   = note: expected reference `&_`\n             \
    \      found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc26ym9s6.rs:15:26\n\
    \   |\n9  |     let mut current_number = 0;\n   |                            \
    \  - expected due to this value\n...\n15 |         current_number = number;\n\
    \   |                          ^^^^^^ expected"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12nlm09z.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp12nlm09z.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n        if current_delimeter == 0 {\n            result.push(number);\n \
    \           current_delimeter = delimeter;\n        } else {\n            result.push(current_number);\n\
    \            result.push(number);\n            current_delimeter = 0;\n      \
    \  }\n        current_number += number;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbinigs3q.rs:11:15\n   |\n\
    11 |     while let Some(number) = (numbers_iter.next(), numbers_iter.next()) {\n\
    \   |               ^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7rifjrnr.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7rifjrnr.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpje4enosj.rs:9:47\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpjadlbebl.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.truncate(numbers_clone.len()\
    \ - 1);\n    numbers_clone.extend(vec![delimeter, delimeter]);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp699w0uqr.rs:8:28\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpcah2xqjj.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpcah2xqjj.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpcah2xqjj.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpcah2xqjj.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while let Some(next_number) =\
    \ numbers_iter.next() {\n        result.push(current_number);\n        result.push(current_delimeter);\n\
    \        result.push(next_number);\n        current_number = next_number;\n  \
    \      current_delimeter += delimeter;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mzdewe8.rs:13:21\n   |\n\
    13 |         result.push(current_delimeter);\n   |                     ^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&current_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3mzdewe8.rs:18:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    for number in numbers_iter.by_ref() {\n        result.push(number);\n\
    \        if numbers_iter.next().is_some() {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu4e6stis.rs:12:25\n   |\n\
    12 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu4e6stis.rs:15:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n15 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(current_number);\n        result.push(current_delimeter);\n\
    \        result.push(number);\n        current_number = number;\n        current_delimeter\
    \ += delimeter;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxuk1tlam.rs:13:21\n   |\n\
    13 |         result.push(current_delimeter);\n   |                     ^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&current_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxuk1tlam.rs:18:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(0) {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpgrbsx1qz.rs:10:41\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = delimeter;\n    loop {\n   \
    \     if numbers_iter.next().is_none() {\n            break;\n        }\n    \
    \    result.push(current);\n        current = numbers_iter.next().unwrap();\n\
    \    }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3htwxpvq.rs:15:19\n   |\n\
    9  |     let mut current = delimeter;\n   |                       --------- expected\
    \ due to this value\n...\n15 |         current = numbers_iter.next().unwrap();\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         current = *numbers_iter.next().unwrap();\n\
    \   |                   +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ = delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ei1794x.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5ei1794x.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9nqwsdz.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    loop {\n        if current_delimeter == 0 {\n            result.push(current_number);\n\
    \            current_delimeter = delimeter;\n            current_number = 0;\n\
    \        } else {\n            result.push(current_number);\n            current_delimeter--;\n\
    \            current_number = numbers_iter.next().unwrap();\n        }\n     \
    \   if current_delimeter == 0 {\n            break;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmprtk70dcb.rs:18:32\n\
    \   |\n18 |             current_delimeter--;\n   |                           \
    \     ^ expected expression\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpop901am0.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpop901am0.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpg868e63f.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpg868e63f.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpg868e63f.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpg868e63f.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpylpx1_0m.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpylpx1_0m.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpylpx1_0m.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpylpx1_0m.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp8jq3e5w1.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp8jq3e5w1.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp8jq3e5w1.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp8jq3e5w1.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp5ksl_ta.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp5ksl_ta.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpvz10bq1u.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = delimeter;\n    loop {\n   \
    \     if numbers_iter.next().is_none() {\n            break;\n        }\n    \
    \    result.push(current);\n        current = numbers_iter.next().unwrap();\n\
    \    }\n    result.push(current);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5wwn20m.rs:15:19\n   |\n\
    9  |     let mut current = delimeter;\n   |                       --------- expected\
    \ due to this value\n...\n15 |         current = numbers_iter.next().unwrap();\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         current = *numbers_iter.next().unwrap();\n\
    \   |                   +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ = delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpifg2k2f4.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpifg2k2f4.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    let mut current_number = numbers_iter.next();\n    while current_number.is_some()\
    \ {\n        result.push(current_number.unwrap());\n        current_number = numbers_iter.next();\n\
    \    }\n    while current_delimeter > 0 {\n        result.push(current_delimeter);\n\
    \        current_delimeter = delimeter;\n        current_number = numbers_iter.next();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c3pkk81.rs:17:21\n   |\n\
    17 |         result.push(current_delimeter);\n   |                     ^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&current_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1c3pkk81.rs:21:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    loop {\n        if current_delimeter == delimeter {\n            result.push(current_number);\n\
    \            current_delimeter = 0;\n            current_number = 0;\n       \
    \ } else {\n            result.push(current_number);\n            current_delimeter\
    \ = current_delimeter + 1;\n            current_number = numbers_iter.next().unwrap();\n\
    \        }\n        if current_number == 0 {\n            break;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy3htwvk8.rs:19:30\n   |\n\
    9  |     let mut current_number = 0;\n   |                              - expected\
    \ due to this value\n...\n19 |             current_number = numbers_iter.next().unwrap();\n\
    \   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |  \
    \           current_number = *numbers_iter.next().unwrap();\n   |            \
    \                  +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpmqj85cjv.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpmqj85cjv.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpmqj85cjv.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpmqj85cjv.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmprfkxgnxw.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmprfkxgnxw.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmprfkxgnxw.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmprfkxgnxw.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        if current_delimeter\
    \ == 0 {\n            result.push(number);\n            current_delimeter = delimeter;\n\
    \        } else {\n            result.push(current_number);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3l4ph8rh.rs:16:25\n   |\n\
    16 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found integer\n   |                         help: consider borrowing here: `&current_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3l4ph8rh.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    loop {\n    \
    \    if current_number == 0 {\n            result.push(numbers_iter.next().unwrap());\n\
    \            current_number = 1;\n        } else {\n            result.push(delimeter);\n\
    \            result.push(numbers_iter.next().unwrap());\n            current_number\
    \ = 0;\n        }\n        if numbers_iter.next().is_none() {\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxf9e51s7.rs:15:25\n   |\n\
    15 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxf9e51s7.rs:23:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.extend_from_slice(&[delimeter]);\n\
    \    numbers_clone.extend_from_slice(&numbers);\n    numbers_clone\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmp1s681izq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    let mut current_delimeter_pos = 0;\n    let mut current_delimeter_len\
    \ = 0;\n    while current_number != delimeter {\n        if current_number !=\
    \ 0 {\n            result.push(current_number);\n        }\n        if current_delimeter_pos\
    \ == 0 {\n            current_delimeter_pos = current_delimeter_len;\n       \
    \ }\n        current_delimeter_len += 1;\n        if current_delimeter_len ==\
    \ delimeter {\n            result.push(current_delimeter);\n            current_delimeter_len\
    \ = 0;\n            current_delimeter_pos += 1;\n        }\n        current_number\
    \ = numbers_iter.next().unwrap();\n    }\n    if current_delimeter_len != 0 {\n\
    \        result.push(current_delimeter);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmypoqc6w.rs:26:26\n   |\n\
    9  |     let mut current_number = 0;\n   |                              - expected\
    \ due to this value\n...\n26 |         current_number = numbers_iter.next().unwrap();\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |  \
    \       current_number = *numbers_iter.next().unwrap();\n   |                \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpl1oxwf15.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpl1oxwf15.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpl1oxwf15.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpl1oxwf15.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = vec![];\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while let Some(current_number)\
    \ = {\n        let mut current_result = vec![];\n        while let Some(current_number)\
    \ = {\n            current_result.push(current_number);\n            if current_delimeter\
    \ == 0 {\n                break;\n            }\n            current_delimeter\
    \ -= 1;\n        }\n        result.push(current_result);\n        current_number\
    \ = numbers_iter.next().unwrap();\n        current_delimeter = delimeter;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmpqfr0dnf9.rs:20:9\n \
    \  |\n13 |           while let Some(current_number) = {\n   |  _________-----_-\n\
    \   | |         |\n   | |         while parsing the body of this `while` expression\n\
    14 | |             current_result.push(current_number);\n15 | |             if\
    \ current_delimeter == 0 {\n16 | |                 break;\n17 | |            \
    \ }\n18 | |             current_delimeter -= 1;\n19 | |         }\n   | |_________-\
    \ this `while` condition successfully parsed\n20 |           result.push(current_result);\n\
    \   |           ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside\
    \ a block\n   |\n20 |         { result.push(current_result); }\n   |         +\
    \                              +\n\nerror: expected `{`, found `result`\n  -->\
    \ /tmp/tmpqfr0dnf9.rs:24:5\n   |\n11 |       while let Some(current_number) =\
    \ {\n   |  _____-----_-\n   | |     |\n   | |     while parsing the body of this\
    \ `while` expression\n12 | |         let mut current_result = vec![];\n13 | |\
    \         while let Some(current_number) = {\n14 | |             current_result.push(current_number);\n\
    ...  |\n22 | |         current_delimeter = delimeter;\n23 | |     }\n   | |_____-\
    \ this `while` condition successfully parsed\n24 |       result\n   |       ^^^^^^\
    \ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n24 | \
    \    { result }\n   |     +        +\n\nerror: aborting due to 2 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    while let Some(current_number)\
    \ = (numbers_iter.next(), numbers_iter.next()) {\n        result.push(current_number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcds2fkq.rs:10:15\n   |\n\
    10 |     while let Some(current_number) = (numbers_iter.next(), numbers_iter.next())\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^   ------------------------------------------\
    \ this expression has type `(Option<&isize>, Option<&isize>)`\n   |          \
    \     |\n   |               expected tuple, found enum `Option`\n   |\n   = note:\
    \ expected tuple `(Option<&isize>, Option<&isize>)`\n               found enum\
    \ `Option<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number != last_number {\n            result.push(last_number);\n  \
    \          last_number = number;\n            last_delimeter = delimeter;\n  \
    \      }\n        last_delimeter += 1;\n        result.push(last_delimeter);\n\
    \    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw3pzxvb_.rs:18:21\n   |\n\
    18 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw3pzxvb_.rs:21:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    numbers.insert(0,\
    \ delimeter);\n    numbers.insert(0, delimeter);\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmpemnlnftg.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpqzt6niih.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpqzt6niih.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpqzt6niih.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpqzt6niih.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while let Some(number) = {\n\
    \        let mut next_number = numbers_iter.next().unwrap();\n        if current_delimeter\
    \ == delimeter {\n            result.push(current_number);\n            current_number\
    \ = next_number;\n            current_delimeter = 0;\n        } else {\n     \
    \       result.push(current_number);\n            current_number = number;\n \
    \           current_delimeter = delimeter;\n        }\n    }\n    result.push(current_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmpkzl5viga.rs:23:5\n \
    \  |\n11 |       while let Some(number) = {\n   |  _____-----_-\n   | |     |\n\
    \   | |     while parsing the body of this `while` expression\n12 | |        \
    \ let mut next_number = numbers_iter.next().unwrap();\n13 | |         if current_delimeter\
    \ == delimeter {\n14 | |             result.push(current_number);\n...  |\n21\
    \ | |         }\n22 | |     }\n   | |_____- this `while` condition successfully\
    \ parsed\n23 |       result.push(current_number);\n   |       ^^^^^^ expected\
    \ `{`\n   |\nhelp: try placing this code inside a block\n   |\n23 |     { result.push(current_number);\
    \ }\n   |     +                              +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjpf6tr0y.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjpf6tr0y.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdp7fldbw.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdp7fldbw.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        if current_delimeter == 0 {\n            current_delimeter = delimeter;\n\
    \        } else {\n            result.push(current_delimeter);\n            current_delimeter\
    \ = 0;\n        }\n        current_number += 1;\n        if current_number ==\
    \ numbers.len() {\n            result.push(0);\n            current_number = 0;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbth8wxg.rs:16:25\n   |\n\
    16 |             result.push(current_delimeter);\n   |                       \
    \  ^^^^^^^^^^^^^^^^^\n   |                         |\n   |                   \
    \      expected `&isize`, found `isize`\n   |                         help: consider\
    \ borrowing here: `&current_delimeter`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppbth8wxg.rs:21:25\n   |\n21 |             result.push(0);\n   |    \
    \                     ^\n   |                         |\n   |                \
    \         expected `&isize`, found integer\n   |                         help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppbth8wxg.rs:25:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp4bgbbp4r.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp4bgbbp4r.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp4bgbbp4r.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp4bgbbp4r.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    loop {\n        if current_number == 0 {\n            result.push(current_delimeter);\n\
    \        }\n        result.push(current_number);\n        if current_delimeter\
    \ == 0 {\n            current_delimeter = numbers_iter.next().unwrap();\n    \
    \    } else {\n            current_delimeter = numbers_iter.next().unwrap();\n\
    \        }\n        current_number += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywqnlkyn.rs:17:33\n   |\n\
    10 |     let mut current_delimeter = delimeter;\n   |                        \
    \         --------- expected due to this value\n...\n17 |             current_delimeter\
    \ = numbers_iter.next().unwrap();\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n17 |             current_delimeter = *numbers_iter.next().unwrap();\n \
    \  |                                 +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpywqnlkyn.rs:19:33\n   |\n10 |     let mut current_delimeter = delimeter;\n\
    \   |                                 --------- expected due to this value\n...\n\
    19 |             current_delimeter = numbers_iter.next().unwrap();\n   |     \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |        \
    \     current_delimeter = *numbers_iter.next().unwrap();\n   |               \
    \                  +\n\nwarning: unreachable expression\n  --> /tmp/tmpywqnlkyn.rs:23:5\n\
    \   |\n11 | /     loop {\n12 | |         if current_number == 0 {\n13 | |    \
    \         result.push(current_delimeter);\n14 | |         }\n...  |\n21 | |  \
    \       current_number += 1;\n22 | |     }\n   | |_____- any code following this\
    \ expression is unreachable\n23 |       result\n   |       ^^^^^^ unreachable\
    \ expression\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror:\
    \ aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut result = Vec::new();\n    for number in numbers {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp_vb84sz0.rs:7:43\n     |\n7    |     let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n     |                \
    \                           ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp_vb84sz0.rs:7:52\n   |\n7  |       let mut numbers\
    \ = numbers.into_iter().cloned().collect::<Vec<_>>();\n   |                  \
    \                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpfqsbgbck.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpewji45qu.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpewji45qu.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpewji45qu.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpewji45qu.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpbr3u2khk.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpbr3u2khk.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpbr3u2khk.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpbr3u2khk.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = 0;\n    while let Some(number) = numbers_iter.next() {\n        if current_delimeter\
    \ == 0 {\n            result.push(number);\n            current_delimeter = delimeter;\n\
    \        } else {\n            result.push(current_number);\n            result.push(number);\n\
    \            current_delimeter = 0;\n        }\n        current_number += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb3y305_s.rs:16:25\n   |\n\
    16 |             result.push(current_number);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found integer\n   |                         help: consider borrowing here: `&current_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb3y305_s.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwo___ori.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwo___ori.rs:13:23\n   |\n9  |  \
    \   let mut last_number = numbers_iter.next();\n   |                         \
    \  ------------------- expected due to this value\n...\n13 |         last_number\
    \ = number;\n   |                       ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplnzpvgfq.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplnzpvgfq.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(item) = numbers_iter.next() {\n\
    \        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpetcldchm.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpetcldchm.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpldwcj3lv.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpldwcj3lv.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpldwcj3lv.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpldwcj3lv.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ = delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps1kjzmis.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps1kjzmis.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers = numbers.to_vec();\n    let mut\
    \ result = Vec::new();\n    for i in 0..numbers.len() - 1 {\n        result.push(numbers[i]);\n\
    \        result.push(delimeter);\n        result.push(numbers[i + 1]);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmphdt3lxxs.rs:9:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpnlhwekm_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpxi3_brqk.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3s6t44dq.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3s6t44dq.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut current_number = 0;\n    let mut\
    \ last_number = numbers_iter.next();\n    while let Some(number) = {\n       \
    \ if number == delimeter {\n            result.push(current_number);\n       \
    \     current_number = 0;\n            last_number = numbers_iter.next();\n  \
    \      } else {\n            current_number += number;\n        }\n    }\n   \
    \ result.push(current_number);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmp6ilnjn70.rs:20:5\n \
    \  |\n11 |       while let Some(number) = {\n   |  _____-----_-\n   | |     |\n\
    \   | |     while parsing the body of this `while` expression\n12 | |        \
    \ if number == delimeter {\n13 | |             result.push(current_number);\n\
    14 | |             current_number = 0;\n...  |\n18 | |         }\n19 | |     }\n\
    \   | |_____- this `while` condition successfully parsed\n20 |       result.push(current_number);\n\
    \   |       ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n20 |     { result.push(current_number); }\n   |     +                 \
    \             +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp7zb7p58u.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n \
    \   while let Some(number) = last_number {\n        result.push(number);\n   \
    \     last_number = numbers_iter.next();\n    }\n    result.push(last_number);\n\
    \    result.extend_from_slice(&numbers_iter);\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx09ioadm.rs:14:17\n   |\n\
    14 |     result.push(last_number);\n   |                 ^^^^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n   |\n   = note: expected reference `&isize`\n\
    \                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx09ioadm.rs:15:30\n   |\n15 |     result.extend_from_slice(&numbers_iter);\n\
    \   |                              ^^^^^^^^^^^^^ expected slice `[&isize]`, found\
    \ struct `std::slice::Iter`\n   |\n   = note: expected reference `&[&isize]`\n\
    \              found reference `&std::slice::Iter<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx09ioadm.rs:16:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp7q66u12d.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp7q66u12d.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp7q66u12d.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp7q66u12d.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut current_number = 0;\n    let mut\
    \ current_delimeter = delimeter;\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    while current_number != Some(0) {\n        result.push(current_number);\n\
    \        current_number = numbers_iter.next().unwrap();\n        if current_delimeter\
    \ == delimeter {\n            current_delimeter = 0;\n            result.push(current_delimeter);\n\
    \        } else {\n            result.push(current_delimeter);\n            current_delimeter\
    \ = delimeter;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ezr5zud.rs:12:29\n   |\n\
    12 |     while current_number != Some(0) {\n   |                             ^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<{integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n    }\n    result.extend(numbers_iter);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Vec<Option<isize>>: Extend<isize>` is not\
    \ satisfied\n  --> /tmp/tmp6jbwke9x.rs:12:12\n   |\n12 |     result.extend(numbers_iter);\n\
    \   |            ^^^^^^ the trait `Extend<isize>` is not implemented for `Vec<Option<isize>>`\n\
    \   |\n   = help: the following other types implement trait `Extend<A>`:\n   \
    \          <Vec<T, A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6jbwke9x.rs:13:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<Option<isize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current_number = 0;\n    let mut current_delimeter\
    \ = delimeter;\n    let mut current_result = Vec::new();\n    while current_number\
    \ != numbers_iter.next() {\n        result.push(current_result);\n        current_result.push(current_number);\n\
    \        current_number += current_delimeter;\n        current_delimeter += delimeter;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `{integer}` with `Option<&isize>`\n  --> /tmp/tmph4gqfkk3.rs:12:26\n\
    \   |\n12 |     while current_number != numbers_iter.next() {\n   |          \
    \                ^^ no implementation for `{integer} == Option<&isize>`\n   |\n\
    \   = help: the trait `PartialEq<Option<&isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph4gqfkk3.rs:18:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    while i < numbers.len() {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n        i += 2;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmple87ruop.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmple87ruop.rs:16:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.insert(0,\
    \ delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp8h31hj_y.rs:9:5\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |             |      |\n  |     |             |      immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut i = 0;\n    while i < numbers.len() {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n        i += 2;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg84h9tzl.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg84h9tzl.rs:16:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpawhlka2f.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected enum\
    \ `Option`, found `isize`\n   |\n   = note: expected enum `Option<isize>`\n  \
    \            found type `isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         result.push(Some(number));\n   |                     +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpawhlka2f.rs:13:23\n\
    \   |\n9  |     let mut last_number = numbers_iter.next();\n   |             \
    \              ------------------- expected due to this value\n...\n13 |     \
    \    last_number = number;\n   |                       ^^^^^^ expected enum `Option`,\
    \ found `isize`\n   |\n   = note: expected enum `Option<isize>`\n            \
    \  found type `isize`\nhelp: try wrapping the expression in `Some`\n   |\n13 |\
    \         last_number = Some(number);\n   |                       +++++      +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpawhlka2f.rs:16:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n16 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<Option<isize>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphxwy1zuz.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmplawkzdw2.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmphjttbr2o.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmphjttbr2o.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmphjttbr2o.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmphjttbr2o.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.truncate(numbers_clone.len()\
    \ / 2);\n    numbers_clone.extend(vec![delimeter, delimeter]);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmpnpoh0icp.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    while let Some(number) = numbers_iter.next() {\n\
    \        result.push(number);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptp0nvy2h.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptp0nvy2h.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
    \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n    let\
    \ mut result = Vec::new();\n    let mut current = Vec::new();\n    loop {\n  \
    \      if numbers_iter.next().is_none() {\n            break;\n        }\n   \
    \     current.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(current.pop());\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf6xqr9aa.rs:16:21\n   |\n\
    16 |         result.push(current.pop());\n   |                     ^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
