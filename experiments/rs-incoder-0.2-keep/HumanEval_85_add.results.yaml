name: HumanEval_85_add
language: rust
results:
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odds =\
    \ Vec::new();\n    for &i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n\
    \        } else {\n            odds.push(i);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7x6etd8b.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcs5y2hcd.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptnmt9wc_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2_jf0nph.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpw1ewc60b.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxacx8psi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    let mut odds = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            evens += n;\n        } else\
    \ {\n            odds += n;\n        }\n    }\n    evens + odds\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvoacuyzg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnr3aoq13.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz6zh59m3.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptitr_5gg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpu7v_qudx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpucpvaexh.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpunnwb6il.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2ytzxlbe.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpsojlnbm5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ el in lst {\n        if el % 2 == 0 {\n            even += el;\n        } else\
    \ {\n            odd += el;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptlvf9io6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp26n6v5tc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpq6wfjcat.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6lw4w9dz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzpnkzfuz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuxao2s3c.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpd_ldgvsu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmplz_kxsnn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcy1_h2lg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6j6dv6yq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvpags_n1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8u9guj7m.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbhjhfhdm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpulwkwjp9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            even += n;\n        } else\
    \ {\n            odd += n;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp0py_pg_p.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_vjnzvs0.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmps3md4euq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22ji4gn4.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp78ep25nm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm1ii5m4p.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfizrejpn.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2qvjfog0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp821653q1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwll_479.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpczv68wmu.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpibyuj_7a.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu97s698s.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbv60gcp2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpqvomieyu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2eo754sf.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph3hdconh.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp4jelesu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ el in lst {\n        if el % 2 == 0 {\n            even += el;\n        } else\
    \ {\n            odd += el;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpia7aggou.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpny9a4gzh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjr9_k6i0.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmppx_7m_em.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkafb1vqj.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyeglt4y0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo2zxms53.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            even += n;\n        } else\
    \ {\n            odd += n;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpweimjfq8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpftbp_gsy.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpw4sri1cc.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptg6gmxqb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpltw70usp.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1s2ztmki.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcn74x71k.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp5q3a4x62.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmprpbg62fd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc90crjiq.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuvsgw0o4.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzfap62bi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7lcpj74.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpf58bo5at.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpy1t_djx4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmprq9qwouo.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp3qehc8k3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmphqgzjzhn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpustlqcj0.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8lux6ahb.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg3jq57rq.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpi6tutzvh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ph7da2e.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpllsxf9wj.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp9vj5g81w.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyj083uwl.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpconefi1a.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp26t3y8pz.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpal8d9l7f.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptexi_gq2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpe817aywn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxxvu7h21.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmphlptwigf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp73g01tzh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpfksum0w3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptr9owvrm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpucjwvw0o.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += i;\n       \
    \ } else {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp7jpastij.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5ma6aie5.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp328vv5_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2lloj654.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4ji9zffn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpx0rh75bu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm01dzc7p.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv9cg86o3.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += i;\n       \
    \ } else {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpuhv5scvp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpv32px9_h.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph6nc7gma.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr7h51lem.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ ele in lst {\n        if ele % 2 == 0 {\n            even += ele;\n        }\
    \ else {\n            odd += ele;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptde7eocn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoufucuns.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz84rig8s.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgksxa0dd.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv6akf0si.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpqhykxvnu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc4vk15zz.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmgarkorx.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgobf3jfc.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for x in lst {\n       \
    \ if x % 2 == 0 {\n            evens += x;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpopc4u077.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvz00t3e6.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvd1_2vc7.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzoneacew.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz4mtzn_j.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpatmw4agn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwei3qnu3.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpc2skv2sy.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmps_ml_qo1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpklyrphvm.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for &i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n  \
    \      } else {\n            odds.push(i);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1efczk96.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp28xndrps.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz4js35b3.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp0any3c2t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz4b6n_a0.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpzm6eieq1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnz_w0vb8.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp5vp80c22.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6tkdvehg.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyu6sugop.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp06dptnbn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4kzorc8u.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmdaj4bqr.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmir08kw_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp1r22n6ss.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxlsh5_34.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp3zlfiu5j.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n   \
    \     } else {\n            odds.push(x);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2xodsr1l.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphxxuupgb.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += i;\n       \
    \ } else {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp461hhspx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_2gdrgdq.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    for &i in lst {\n      \
    \  if i % 2 == 0 {\n            evens += i;\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp419q9ey2.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpbfu0h4ot.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmphrgoipxp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp94a2jc78.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm8uzkd1o.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpdh9jxc1g.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpsz57xo6v.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzejnbvei.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4m8l9lsa.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpsc1nsnr1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptdcc0x9i.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ ele in lst {\n        if ele % 2 == 0 {\n            even += ele;\n        }\
    \ else {\n            odd += ele;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp10x32agt.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp77uatnfw.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpwbhqcr9c.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += i;\n       \
    \ } else {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpnndnkioo.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgivxfo7d.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpw8uz6hjz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgxax4azw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1x3a_nl.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyr37t0ak.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1olezt66.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmperqcj2h0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpk4u3nelc.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp7ac7st3p.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4li5g5tj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkledk1ec.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpwo2hk1wv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4cm177ay.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpoyxny0z5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj259nvrp.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprvjw70my.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ el in lst {\n        if el % 2 == 0 {\n            even += el;\n        } else\
    \ {\n            odd += el;\n        }\n    }\n    even + odd\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpa8zn9ak6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6u_nhca7.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            even += i;\n       \
    \ } else {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptxv5eo26.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp1l7ynlvi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptya5i8ji.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpseexqd69.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp05hskxmu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6n_c0win.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7litsked.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            even += x;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp2ueevkyi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplkv0gyik.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb3p62ny2.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = vec![];\n    let mut odds = vec![];\n\
    \    for i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n   \
    \     } else {\n            odds.push(i);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpzj72etu6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpf4ln23vn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcqrh_vqm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy3qscv_o.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter() {\n  \
    \      if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp961_nn0x.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `93`,\n right: `88`', /tmp/tmpe_hd6mvv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut odds =\
    \ Vec::new();\n    for ele in lst {\n        if ele % 2 == 0 {\n            evens.push(ele);\n\
    \        } else {\n            odds.push(ele);\n        }\n    }\n    evens.iter().cloned().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4v2lr0e8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3n1zacps.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpmmuw1gxr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoha1ijnc.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut evens = 0;\n    let mut odds = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            evens += i;\n        } else\
    \ {\n            odds += i;\n        }\n    }\n    evens + odds\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ci2knnk.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    for &i in lst {\n       \
    \ if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkom802ad.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5yx3zptw.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ x in lst {\n        if x % 2 == 0 {\n            even += x;\n        } else\
    \ {\n            odd += x;\n        }\n    }\n    even + odd\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpntrwmmq0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
