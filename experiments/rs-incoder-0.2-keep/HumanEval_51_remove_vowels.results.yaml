name: HumanEval_51_remove_vowels
language: rust
results:
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp10j6m30s.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp_eodtt9a.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmp_eodtt9a.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut new_text = text;\n    for vowel in vowels {\n        new_text = new_text.replace(&vowel,\
    \ \"\");\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmpb13fqbki.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0277]:\
    \ expected a `Fn<(char,)>` closure, found `std::ops::Range<char>`\n   --> /tmp/tmpb13fqbki.rs:17:37\n\
    \    |\n17  |         new_text = new_text.replace(&vowel, \"\");\n    |      \
    \                       ------- ^^^^^^ expected an `Fn<(char,)>` closure, found\
    \ `std::ops::Range<char>`\n    |                             |\n    |        \
    \                     required by a bound introduced by this call\n    |\n   \
    \ = help: the trait `Fn<(char,)>` is not implemented for `std::ops::Range<char>`\n\
    \    = help: the following other types implement trait `Pattern<'a>`:\n      \
    \        &'b String\n              &'b [char; N]\n              &'b [char]\n \
    \             &'b str\n              &'c &'b str\n              [char; N]\n  \
    \            char\n              pattern::MultiCharEqPattern<C>\n    = note: required\
    \ because of the requirements on the impl of `FnOnce<(char,)>` for `&std::ops::Range<char>`\n\
    \    = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `&std::ops::Range<char>`\nnote: required by a bound in `str::<impl str>::replace`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpj087_1_q.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp95016hl7.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpy9n40toa.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpe4zu0ilf.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpe4zu0ilf.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpcw_d8z5a.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpj3fadmea.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp9crz2jm1.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp39hzu_l6.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmph1o212td.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmph1o212td.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(ch) {\n            result.push(*ch);\n        } else {\n   \
    \         result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_dicgoxy.rs:17:28\n   |\n\
    17 |         if vowels.contains(ch) {\n   |                            ^^\n  \
    \ |                            |\n   |                            expected `&char`,\
    \ found `char`\n   |                            help: consider borrowing here:\
    \ `&ch`\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp_dicgoxy.rs:18:25\n\
    \   |\n18 |             result.push(*ch);\n   |                         ^^^\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3mf8jiwy.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpv5lnstmt.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !is_vowel(ch) {\n            result.push(ch);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpezrui8e_.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpok9gi8ie.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmpzhbzaj1b.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzhbzaj1b.rs:17:29\n   |\n17 |         if !vowels.contains(&ch)\
    \ {\n   |                             ^^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpt3gpj_6w.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp5wtdbk7w.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .collect::<String>()\n        .join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp19g4_qnd.rs:16:10\n   |\n16 |         .join(\"\")\n   |\
    \          ^^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpoz81jcbf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpj1mlarus.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp49n3xg8o.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp49n3xg8o.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpekh0olrs.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_carriage_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_carriage_return())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_carriage_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_carriage_return())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpx3qa16nl.rs:53:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n53\
    \ |         .filter(|c| !c.is_ascii\n   |                ^ unclosed delimiter\n\
    54 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `is_ascii_letter`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpx3qa16nl.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpx3qa16nl.rs:18:24\n   |\n18 |  \
    \       .filter(|c| !c.is_ascii_symbol())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_newline` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpx3qa16nl.rs:21:24\n   |\n21 |         .filter(|c| !c.is_ascii_newline())\n\
    \   |                        ^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_linefeed`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpx3qa16nl.rs:22:24\n\
    \   |\n22 |         .filter(|c| !c.is_ascii_linefeed())\n   |                \
    \        ^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no method\
    \ named `is_ascii_return` found for reference `&char` in the current scope\n \
    \ --> /tmp/tmpx3qa16nl.rs:23:24\n   |\n23 |         .filter(|c| !c.is_ascii_return())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_formfeed`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpx3qa16nl.rs:24:24\n\
    \   |\n24 |         .filter(|c| !c.is_ascii_formfeed())\n   |                \
    \        ^^^^^^^^^^^^^^^^^ method not found in `&char`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ ch in text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n     \
    \       result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2eha7r6f.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpvhwpug1u.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpa4ldtl61.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpa4ldtl61.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpm3g3nhp5.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmp5vjc8t2z.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5vjc8t2z.rs:17:29\n   |\n17 |         if !vowels.contains(&ch)\
    \ {\n   |                             ^^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmplu5m48mq.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmp83taafcf.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83taafcf.rs:17:29\n   |\n17 |         if !vowels.contains(&c)\
    \ {\n   |                             ^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_carriage_return())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_horizontal_space())\n\
    \        .filter(|c| !c.is_ascii_vertical_space())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_ascii_letter())\n        .filter(|c| !c.is_ascii_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_ascii_symbol())\n        .filter(|c| !c.is_ascii_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_ascii_control())\n        .filter(|c| !c.is_ascii_ascii_print())\n\
    \        .filter(|c| !c.is_ascii_ascii_graph())\n        .filter(|c| !c.is_ascii_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_ascii_horizontal_tab())\n        .filter(|c|\
    \ !c.is_ascii_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_ascii_carriage_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_linefeed())\n        .filter(|c| !c.is_ascii_ascii_horizontal_space())\n\
    \        .filter(|c| !c.is_ascii_ascii_vertical_space())\n        .filter(|c|\
    \ !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp_sth0lh0.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmp_sth0lh0.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_print`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp_sth0lh0.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_ascii_print())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_graph` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmp_sth0lh0.rs:22:24\n   |\n22 |  \
    \       .filter(|c| !c.is_ascii_graph())\n   |                        ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_newline` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp_sth0lh0.rs:23:24\n   |\n23 |         .filter(|c| !c.is_ascii_newline())\n\
    \   |                        ^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_horizontal_tab`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp_sth0lh0.rs:24:24\n\
    \   |\n24 |         .filter(|c| !c.is_ascii_horizontal_tab())\n   |          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]:\
    \ no method named `is_ascii_vertical_tab` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp_sth0lh0.rs:25:24\n   |\n25 |         .filter(|c| !c.is_ascii_vertical_tab())\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a simil"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmptw8gvkt5.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptw8gvkt5.rs:17:29\n   |\n17 |         if !vowels.contains(&c)\
    \ {\n   |                             ^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(0);\n \
    \   vowels.insert(1);\n    vowels.insert(2);\n    vowels.insert(3);\n    vowels.insert(4);\n\
    \    vowels.insert(5);\n    vowels.insert(6);\n    vowels.insert(7);\n    vowels.insert(8);\n\
    \    vowels.insert(9);\n    vowels.insert(10);\n    vowels.insert(11);\n    vowels.insert(12);\n\
    \    vowels.insert(13);\n    vowels.insert(14);\n    vowels.insert(15);\n    vowels.insert(16);\n\
    \    vowels.insert(17);\n    vowels.insert(18);\n    vowels.insert(19);\n    vowels.insert(20);\n\
    \    vowels.insert(21);\n    vowels.insert(22);\n    vowels.insert(23);\n    vowels.insert(24);\n\
    \    vowels.insert(25);\n    vowels.insert(26);\n    vowels.insert(27);\n    vowels.insert(28);\n\
    \    vowels.insert(29);\n    vowels.insert(30);\n    vowels.insert(31);\n    vowels.insert(32);\n\
    \    vowels.insert(33);\n    vowels.insert(34);\n    vowels.insert(35);\n    vowels.insert(36);\n\
    \    vowels.insert(37);\n    vowels.insert(38);\n    vowels.insert(39);\n    vowels.insert(40);\n\
    \    vowels.insert(41);\n    vowels.insert(42);\n    vowels.insert(43);\n    vowels.insert(44);\n\
    \    vowels.insert(45);\n    vowels.insert(46);\n    vowels.insert(47);\n    vowels.insert(48);\n\
    \    vowels.insert(49);\n    vowels.insert(50);\n    vowels.insert(51);\n    vowels.insert(52);\n\
    \    vowels.insert(53);\n    vowels.insert(54);\n    vowels.insert(55);\n    vowels.insert(56);\n\
    \    vowels.insert(57);\n    vowels.insert(58);\n    vowels.insert(59);\n    vowels.insert(60);\n\
    \    vowels.insert(61);\n    vowels.insert(62);\n    vowels.insert(63);\n    vowels.insert(64);\n\
    \    vowels.insert(65);\n    vowels.insert(66);\n    vowels.insert(67);\n    vowels.insert(68);\n\
    \    vowels.insert(69);\n    vowels.insert(70);\n    vowels.insert(71);\n    vowels.insert(72);\n\
    \    vowels.insert(73);\n    vowels.\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp0qj51oo9.rs:89:1\n   |\n89\
    \ | }\n   | ^\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmp0qj51oo9.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmplp3p4kbd.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbl5ym6ym.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpp_2n61z0.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(ch) {\n            result.push(ch);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj4m4oinm.rs:17:29\n   |\n\
    17 |         if !vowels.contains(ch) {\n   |                             ^^\n\
    \   |                             |\n   |                             expected\
    \ `&char`, found `char`\n   |                             help: consider borrowing\
    \ here: `&ch`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(&ch) {\n            result.push(ch);\n        } else {\n   \
    \         result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpnf9lxc_r.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp1hfhq5nv.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp1hfhq5nv.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch)\
    \ {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpo29t7mwj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpzazyd6vb.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(b'a');\n\
    \    vowels.insert(b'e');\n    vowels.insert(b'i');\n    vowels.insert(b'o');\n\
    \    vowels.insert(b'u');\n    vowels.insert(b'A');\n    vowels.insert(b'E');\n\
    \    vowels.insert(b'I');\n    vowels.insert(b'O');\n    vowels.insert(b'U');\n\
    \    text.chars().filter(|c| vowels.contains(c)).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpbsrfp7mv.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(b'a');\n\
    \    vowels.insert(b'e');\n    vowels.insert(b'i');\n    vowels.insert(b'o');\n\
    \    vowels.insert(b'u');\n    vowels.insert(b'A');\n    vowels.insert(b'E');\n\
    \    vowels.insert(b'I');\n    vowels.insert(b'O');\n    vowels.insert(b'U');\n\
    \    text.chars().filter(|c| vowels.contains(c)).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp7lfr84ry.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpk_w3zo0o.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpk_w3zo0o.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpt_u1ek79.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpt_u1ek79.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmppn4e2yp5.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punct())\n        .filter(|c| !c.is_whitespace())\n   \
    \     .filter(|c| !c.is_ascii_letter())\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp1pog9m_c.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punct`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp1pog9m_c.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punct())\n   |                        ^^^^^^^^\
    \ method not found in `&char`\n\nerror[E0599]: no method named `is_ascii_letter`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp1pog9m_c.rs:19:24\n\
    \   |\n19 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_cr())\n        .filter(|c| !c.is_ascii_lf())\n\
    \        .filter(|c| !c.is_ascii_v())\n        .filter(|c| !c.is_ascii_u())\n\
    \        .filter(|c| !c.is_ascii_x())\n        .filter(|c| !c.is_ascii_ascii_dot())\n\
    \        .filter(|c| !c.is_ascii_ascii_dash())\n        .filter(|c| !c.is_ascii_ascii_underscore())\n\
    \        .filter(|c| !c.is_ascii_ascii_plus())\n        .filter(|c| !c.is_ascii_ascii_asterisk())\n\
    \        .filter(|c| !c.is_ascii_ascii_percent())\n        .filter(|c| !c.is_ascii_ascii_parenleft())\n\
    \        .filter(|c| !c.is_ascii_ascii_parenright())\n        .filter(|c| !c.is_ascii_ascii_tilde())\n\
    \        .filter(|c| !c.is_ascii_ascii_exclamation())\n        .filter(|c| !c.is_ascii_ascii_question())\n\
    \        .filter(|c| !c.is_ascii_ascii_at())\n        .filter(|c| !c.is_ascii_ascii_numbersign())\n\
    \        .filter(|c| !c.is_ascii_ascii_dollar())\n        .filter(|c| !c.is_ascii_ascii_percent())\n\
    \        .filter(|c| !c.is_ascii_ascii_ampersand())\n        .filter(|c| !c.is_ascii_ascii_apostrophe())\n\
    \        .\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp5eb5xmbe.rs:54:1\n   |\n54\
    \ | }\n   | ^\n\nerror[E0599]: no method named `is_ascii_letter` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmp5eb5xmbe.rs:17:24\n   |\n17 |  \
    \       .filter(|c| !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_symbol` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp5eb5xmbe.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_newline`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp5eb5xmbe.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_ascii_newline())\n   |                 \
    \       ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_linefeed` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmp5eb5xmbe.rs:22:24\n\
    \   |\n22 |         .filter(|c| !c.is_ascii_linefeed())\n   |                \
    \        ^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no method\
    \ named `is_ascii_return` found for reference `&char` in the current scope\n \
    \ --> /tmp/tmp5eb5xmbe.rs:23:24\n   |\n23 |         .filter(|c| !c.is_ascii_return())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_formfeed`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp5eb5xmbe.rs:24:24\n\
    \   |\n24 |         .filter(|c| !c.is_ascii_formfeed())\n   |                \
    \        ^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no method\
    \ named `is_ascii_backspace` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmp5eb5xmbe.rs:25:24\n   |\n25 |         .filter(|c| !c.is_ascii_backspace())\n\
    \   |                        ^^^^^^^^^^^^^^^^^^ help: there is an associate"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3ugqyfpc.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp4kxanlgg.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp4kxanlgg.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmp4kxanlgg.rs:19:24\n\
    \   |\n19 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_uppercase())\n     \
    \   .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n     \
    \   .filter(|c| !c.is_ascii())\n        .filter(|c| !c.is_punctuation())\n   \
    \     .filter(|c| !c.is_whitespace())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpoy_f78es.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpoy_f78es.rs:18:24\n\
    \   |\n18 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmpoy_f78es.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpoy_f78es.rs:24:24\n   |\n24 |  \
    \       .filter(|c| !c.is_ascii_symbol())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpho9wa46w.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_alphabetic())\n    \
    \    .filter(|c| !c.is_vowel())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpc816_z58.rs:15:24\n   |\n15 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_carriage_return())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_backspace())\n        .filter(|c| !c.is_ascii_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_exclamation_mark())\n\
    \        .filter(|c| !c.is_ascii_ascii_quotation_mark())\n        .filter(|c|\
    \ !c.is_ascii_ascii_apostrophe())\n        .filter(|c| !c.is_ascii_ascii_single_quote())\n\
    \        .filter(|c| !c.is_ascii_ascii_double_quote())\n        .filter(|c| !c.is_ascii_ascii_grave())\n\
    \        .filter(|c| !c.is_ascii_ascii_question_mark())\n        .filter(|c| !c.is_ascii_ascii_ascii_ascii_colon())\n\
    \        .filter(|c| !c.is_ascii_ascii_ascii_semicolon())\n        .filter(|c|\
    \ !c.is_ascii_ascii_ascii_ascii_comma())\n        .filter(|c| !c.is_ascii_ascii_ascii_ascii_period())\n\
    \        .filter(|c| !c.is_ascii_ascii_ascii_ascii_slash())\n        .filter(|c|\
    \ !c.is_ascii_ascii_ascii_ascii_question_mark())\n        .filter(|c| !c.is_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpm3gwkqr7.rs:45:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n45\
    \ |         .filter(|c| !c.is_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_ascii_asc...\n\
    \   |                ^ unclosed delimiter\n46 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpm3gwkqr7.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpm3gwkqr7.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_print`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpm3gwkqr7.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_ascii_print())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_graph` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpm3gwkqr7.rs:22:24\n   |\n22 |  \
    \       .filter(|c| !c.is_ascii_graph())\n   |                        ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_newline` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpm3gwkqr7.rs:23:24\n   |\n23 |         .filter(|c| !c.is_ascii_newline())\n\
    \   |                        ^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_horizontal_tab`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpm"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpwvpp578b.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpwvpp578b.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !vowels.contains(&ch.to_string()) {\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2amttsq.rs:16:29\n   |\n\
    16 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ ch in text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n     \
    \       result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd3x874xj.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpd2zd2o82.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_shift_jis())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extension())\n        .filter(|c| !c.is_ascii_shift_jis_extended_a())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_b())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_c())\n        .filter(|c| !c.is_ascii_shift_jis_extended_d())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_e())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_f())\n        .filter(|c| !c.is_ascii_shift_jis_extended_g())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_h())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_i())\n        .filter(|c| !c.is_ascii_shift_jis_extended_j())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_k())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_l())\n        .filter(|c| !c.is_ascii_shift_jis_extended_m())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_n())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_o())\n        .filter(|c| !c.is_ascii_shift_jis_extended_p())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_q())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_r())\n        .filter(|c| !c.is_ascii_shift_jis_extended_s())\n\
    \        .filter(|c| !c.is_ascii_shift_jis_extended_t())\n        .filter(|c|\
    \ !c.is_ascii_shift_jis_extended_\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpafg4orao.rs:48:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n48\
    \ |         .filter(|c| !c.is_ascii_shift_jis_extended_\n   |                ^\
    \ unclosed delimiter\n49 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]:\
    \ no method named `is_ascii_letter` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpafg4orao.rs:17:24\n   |\n17 |         .filter(|c| !c.is_ascii_letter())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpafg4orao.rs:18:24\n\
    \   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_print` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpafg4orao.rs:21:24\n   |\n21 |  \
    \       .filter(|c| !c.is_ascii_print())\n   |                        ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_graph` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpafg4orao.rs:22:24\n   |\n22 |         .filter(|c| !c.is_ascii_graph())\n\
    \   |                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_newline`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpafg4orao.rs:23:24\n\
    \   |\n23 |         .filter(|c| !c.is_ascii_newline())\n   |                 \
    \       ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_horizontal_tab`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpafg4orao.rs:24:24\n\
    \   |\n24 |         .filter(|c| !c.is_ascii_horizontal_tab())\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmpcufcoq85.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcufcoq85.rs:17:29\n   |\n17 |         if !vowels.contains(&ch)\
    \ {\n   |                             ^^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmph8y96ob_.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpy5n9q5hm.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_uppercase())\n     \
    \   .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpbflqudvv.rs:57:1\n\
    \   |\n57 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpbflqudvv.rs:56:16\n   |\n12 | fn remove_vowels(text: String)\
    \ -> String {\n   |                                          - closing delimiter\
    \ possibly meant for this\n...\n56 |         .filter(|c| !\n   |             \
    \   ^ unclosed delimiter\n57 | }\n   | ^ mismatched closing delimiter\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpaof0t5md.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpaof0t5md.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp5gvhzhdw.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpotkvdnpm.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp_kog3c65.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmplaltzn2d.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n \
    \       .collect::<String>()\n        .join('')\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpdd9qjh5f.rs:16:16\n   |\n\
    16 |         .join('')\n   |                ^ empty character literal\n\nerror[E0599]:\
    \ no method named `is_ascii_letter` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpdd9qjh5f.rs:14:24\n   |\n14 |         .filter(|c| !c.is_ascii_letter())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpdd9qjh5f.rs:16:10\n\
    \   |\n16 |         .join('')\n   |          ^^^^ method not found in `String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp8x91iu44.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmphizctkqx.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3nd686ym.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpt04qq__2.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpee5emj8h.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmpe8ayau1g.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe8ayau1g.rs:17:29\n   |\n17 |         if !vowels.contains(&c)\
    \ {\n   |                             ^^ expected struct `std::ops::Range`, found\
    \ `char`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n     \
    \         found reference `&char`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpo60kebsz.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp5fdvcoia.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(&ch) {\n            result.push(*ch);\n        } else {\n  \
    \          result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmphvi9d3yk.rs:18:25\n\
    \   |\n18 |             result.push(*ch);\n   |                         ^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpb1ct33jw.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmps6jxgr_q.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp1qu1fops.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_line_break())\n\
    \        .filter(|c| !c.is_ascii_control_character())\n        .filter(|c| !c.is_ascii_printable())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpr09z4gjn.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpr09z4gjn.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_line_break`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpr09z4gjn.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_line_break())\n   |              \
    \          ^^^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no\
    \ method named `is_ascii_control_character` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpr09z4gjn.rs:21:24\n   |\n21 |         .filter(|c|\
    \ !c.is_ascii_control_character())\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_control`\n\
    \nerror[E0599]: no method named `is_ascii_printable` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpr09z4gjn.rs:22:24\n   |\n22 |         .filter(|c|\
    \ !c.is_ascii_printable())\n   |                        ^^^^^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `is_ascii_control`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_tab())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_paragraph())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_tab())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_paragraph())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_tab())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_backspace())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_paragraph())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_tab())\n\
    \        .filter(|c| !c.is_ascii_linefeed())\n        .filter(|c| !c.is_ascii_return\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpduxzh2z4.rs:54:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n54\
    \ |         .filter(|c| !c.is_ascii_return\n   |                ^ unclosed delimiter\n\
    55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `is_ascii_letter`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpduxzh2z4.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpduxzh2z4.rs:18:24\n   |\n18 |  \
    \       .filter(|c| !c.is_ascii_symbol())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_print` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpduxzh2z4.rs:21:24\n   |\n21 |         .filter(|c| !c.is_ascii_print())\n\
    \   |                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_graph`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpduxzh2z4.rs:22:24\n\
    \   |\n22 |         .filter(|c| !c.is_ascii_graph())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_newline` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpduxzh2z4.rs:23:24\n   |\n23 |  \
    \       .filter(|c| !c.is_ascii_newline())\n   |                        ^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_horizontal_tab` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpduxzh2z4.rs:24:24\n   |\n24 |         .filter(|c|\
    \ !c.is_ascii_horizontal_tab())\n   |                     "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpbxjkpsnv.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpn9vqylg2.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpn9vqylg2.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp9cyijzco.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp9cyijzco.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpg4odsjk3.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpisl43sl7.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpd3na3xw9.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpbe_pepo4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_vowel())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpfrq_ypw8.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_horizontal_tab())\n\
    \        .filter(|c| !c.is_ascii_vertical_tab())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpkgyu8zd9.rs:54:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n54\
    \ |         .filter(|c| !c.is_ascii_\n   |                ^ unclosed delimiter\n\
    55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `is_ascii_letter`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpkgyu8zd9.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpkgyu8zd9.rs:18:24\n   |\n18 |  \
    \       .filter(|c| !c.is_ascii_symbol())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_print` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpkgyu8zd9.rs:21:24\n   |\n21 |         .filter(|c| !c.is_ascii_print())\n\
    \   |                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_graph`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpkgyu8zd9.rs:22:24\n\
    \   |\n22 |         .filter(|c| !c.is_ascii_graph())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_newline` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpkgyu8zd9.rs:23:24\n   |\n23 |  \
    \       .filter(|c| !c.is_ascii_newline())\n   |                        ^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_horizontal_tab` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpkgyu8zd9.rs:24:24\n   |\n24 |         .filter(|c|\
    \ !c.is_ascii_horizontal_tab())\n   |                        ^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp3pe96fih.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    for ch in text.chars() {\n        if !vowels.contains(&ch)\
    \ {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmplv8u4rb5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpu1n77v_3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpoio2tdo8.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmptg328z59.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n \
    \       .collect::<String>()\n        .join('')\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmp03gc_6qb.rs:16:16\n   |\n\
    16 |         .join('')\n   |                ^ empty character literal\n\nerror[E0599]:\
    \ no method named `is_ascii_letter` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp03gc_6qb.rs:14:24\n   |\n14 |         .filter(|c| !c.is_ascii_letter())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp03gc_6qb.rs:16:10\n\
    \   |\n16 |         .join('')\n   |          ^^^^ method not found in `String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmppp0xr0u4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp3d994x9t.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp3d994x9t.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpjc_a1w4o.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwmjj2pwa.rs:16:29\n   |\n\
    16 |         if !vowels.contains(&c) {\n   |                             ^^ expected\
    \ struct `std::ops::Range`, found `char`\n   |\n   = note: expected reference\
    \ `&std::ops::Range<char>`\n              found reference `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_vowel())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpe_qx2eaf.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpiqu6e0_4.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpiqu6e0_4.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpkldwocav.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpfcp2ulm3.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_line_break())\n\
    \        .filter(|c| !c.is_ascii_control_character())\n        .filter(|c| !c.is_ascii_printable())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpador1me0.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpador1me0.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_line_break`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpador1me0.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_line_break())\n   |              \
    \          ^^^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no\
    \ method named `is_ascii_control_character` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpador1me0.rs:21:24\n   |\n21 |         .filter(|c|\
    \ !c.is_ascii_control_character())\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_control`\n\
    \nerror[E0599]: no method named `is_ascii_printable` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpador1me0.rs:22:24\n   |\n22 |         .filter(|c|\
    \ !c.is_ascii_printable())\n   |                        ^^^^^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `is_ascii_control`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpaaprxkpr.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut new_text = String::new();\n    for\
    \ ch in text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n     \
    \       new_text.push(ch);\n        }\n    }\n    new_text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_faiekaw.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpg_jw_iq9.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpmv_5bucf.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3319j8e3.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch.to_string()) {\n            result.push(ch);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `std::ops::Range<char>: Ord` is not satisfied\n\
    \   --> /tmp/tmpp54y65sz.rs:14:12\n    |\n14  |     vowels.sort();\n    |    \
    \        ^^^^ the trait `Ord` is not implemented for `std::ops::Range<char>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp54y65sz.rs:17:29\n   |\n17 |         if !vowels.contains(&ch.to_string())\
    \ {\n   |                             ^^^^^^^^^^^^^^^ expected struct `std::ops::Range`,\
    \ found struct `String`\n   |\n   = note: expected reference `&std::ops::Range<char>`\n\
    \              found reference `&String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_newline())\n        .filter(|c| !c.is_ascii_linefeed())\n\
    \        .filter(|c| !c.is_ascii_return())\n        .filter(|c| !c.is_ascii_formfeed())\n\
    \        .filter(|c| !c.is_ascii_carriage_return())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.is_ascii_formfeed())\n        .filter(|c| !c.is_ascii_backspace())\n\
    \        .filter(|c| !c.is_ascii_horizontal_tab())\n        .filter(|c| !c.is_ascii_vertical_tab())\n\
    \        .filter(|c| !c.\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `)`\n  --> /tmp/tmp4jn46hhy.rs:54:1\n   |\n54\
    \ | }\n   | ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp4jn46hhy.rs:53:16\n\
    \   |\n12 | fn remove_vowels(text: String) -> String {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n53\
    \ |         .filter(|c| !c.\n   |                ^ unclosed delimiter\n54 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `is_ascii_letter`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp4jn46hhy.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0599]: no method named `is_ascii_symbol` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmp4jn46hhy.rs:18:24\n   |\n18 |  \
    \       .filter(|c| !c.is_ascii_symbol())\n   |                        ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_newline` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmp4jn46hhy.rs:21:24\n   |\n21 |         .filter(|c| !c.is_ascii_newline())\n\
    \   |                        ^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_linefeed`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp4jn46hhy.rs:22:24\n\
    \   |\n22 |         .filter(|c| !c.is_ascii_linefeed())\n   |                \
    \        ^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no method\
    \ named `is_ascii_return` found for reference `&char` in the current scope\n \
    \ --> /tmp/tmp4jn46hhy.rs:23:24\n   |\n23 |         .filter(|c| !c.is_ascii_return())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_formfeed`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmp4jn46hhy.rs:24:24\n\
    \   |\n24 |         .filter(|c| !c.is_ascii_formfeed())\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpg44loco6.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpg5un_pmr.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpg5un_pmr.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror[E0599]: no method named `is_ascii_letter` found\
    \ for reference `&char` in the current scope\n  --> /tmp/tmpg5un_pmr.rs:19:24\n\
    \   |\n19 |         .filter(|c| !c.is_ascii_letter())\n   |                  \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpffmllo49.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp61qjv97o.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp2zx1qy1n.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpwtt3kc34.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpwih5if71.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n \
    \       .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_control_character())\n\
    \        .filter(|c| !c.is_ascii_printable())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpz8661q86.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpz8661q86.rs:19:24\n   |\n19 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_control_character`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpz8661q86.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_control_character())\n   |       \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii_control`\n\nerror[E0599]: no method named `is_ascii_printable`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpz8661q86.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_ascii_printable())\n   |               \
    \         ^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_ascii_control`\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpb1_gq7p7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_line_break())\n\
    \        .filter(|c| !c.is_ascii_control_character())\n        .filter(|c| !c.is_ascii_printable())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpdktzjnod.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpdktzjnod.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_line_break`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpdktzjnod.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_line_break())\n   |              \
    \          ^^^^^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror[E0599]: no\
    \ method named `is_ascii_control_character` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpdktzjnod.rs:21:24\n   |\n21 |         .filter(|c|\
    \ !c.is_ascii_control_character())\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_control`\n\
    \nerror[E0599]: no method named `is_ascii_printable` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpdktzjnod.rs:22:24\n   |\n22 |         .filter(|c|\
    \ !c.is_ascii_printable())\n   |                        ^^^^^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `is_ascii_control`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2jglhetr.rs:16:29\n   |\n\
    16 |         if !vowels.contains(&c) {\n   |                             ^^ expected\
    \ struct `std::ops::Range`, found `char`\n   |\n   = note: expected reference\
    \ `&std::ops::Range<char>`\n              found reference `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(ch) {\n            result.push(ch);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfqky4og5.rs:17:29\n   |\n\
    17 |         if !vowels.contains(ch) {\n   |                             ^^\n\
    \   |                             |\n   |                             expected\
    \ `&char`, found `char`\n   |                             help: consider borrowing\
    \ here: `&ch`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmps_8cev5z.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut new_text = text;\n    for vowel in vowels.iter() {\n        new_text\
    \ = new_text.replace(vowel, \"\");\n    }\n    new_text\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n   --> /tmp/tmpg5n10tms.rs:17:37\n\
    \    |\n17  |         new_text = new_text.replace(vowel, \"\");\n    |       \
    \                      ------- ^^^^^ expected an `Fn<(char,)>` closure, found\
    \ `char`\n    |                             |\n    |                         \
    \    required by a bound introduced by this call\n    |\n    = help: the trait\
    \ `Fn<(char,)>` is not implemented for `char`\n    = note: required because of\
    \ the requirements on the impl of `FnOnce<(char,)>` for `&char`\n    = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `&char`\nnote:\
    \ required by a bound in `str::<impl str>::replace`\nhelp: consider dereferencing\
    \ here\n    |\n17  |         new_text = new_text.replace(*vowel, \"\");\n    |\
    \                                     +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp6kawlitt.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmppk6vs6jh.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp9rkrk4om.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpa0jrr8tl.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n \
    \       .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_control_character())\n\
    \        .filter(|c| !c.is_ascii_printable())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpyljybp82.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpyljybp82.rs:19:24\n   |\n19 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_control_character`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpyljybp82.rs:20:24\n\
    \   |\n20 |         .filter(|c| !c.is_ascii_control_character())\n   |       \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii_control`\n\nerror[E0599]: no method named `is_ascii_printable`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpyljybp82.rs:21:24\n\
    \   |\n21 |         .filter(|c| !c.is_ascii_printable())\n   |               \
    \         ^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_ascii_control`\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(0);\n \
    \   vowels.insert(1);\n    vowels.insert(2);\n    vowels.insert(3);\n    vowels.insert(4);\n\
    \    vowels.insert(5);\n    vowels.insert(6);\n    vowels.insert(7);\n    vowels.insert(8);\n\
    \    vowels.insert(9);\n    vowels.insert(10);\n    vowels.insert(11);\n    vowels.insert(12);\n\
    \    vowels.insert(13);\n    vowels.insert(14);\n    vowels.insert(15);\n    vowels.insert(16);\n\
    \    vowels.insert(17);\n    vowels.insert(18);\n    vowels.insert(19);\n    vowels.insert(20);\n\
    \    vowels.insert(21);\n    vowels.insert(22);\n    vowels.insert(23);\n    vowels.insert(24);\n\
    \    vowels.insert(25);\n    vowels.insert(26);\n    vowels.insert(27);\n    vowels.insert(28);\n\
    \    vowels.insert(29);\n    vowels.insert(30);\n    vowels.insert(31);\n    vowels.insert(32);\n\
    \    vowels.insert(33);\n    vowels.insert(34);\n    vowels.insert(35);\n    vowels.insert(36);\n\
    \    vowels.insert(37);\n    vowels.insert(38);\n    vowels.insert(39);\n    vowels.insert(40);\n\
    \    vowels.insert(41);\n    vowels.insert(42);\n    vowels.insert(43);\n    vowels.insert(44);\n\
    \    vowels.insert(45);\n    vowels.insert(46);\n    vowels.insert(47);\n    vowels.insert(48);\n\
    \    vowels.insert(49);\n    vowels.insert(50);\n    vowels.insert(51);\n    vowels.insert(52);\n\
    \    vowels.insert(53);\n    vowels.insert(54);\n    vowels.insert(55);\n    vowels.insert(56);\n\
    \    vowels.insert(57);\n    vowels.insert(58);\n    vowels.insert(59);\n    vowels.insert(60);\n\
    \    vowels.insert(61);\n    vowels.insert(62);\n    vowels.insert(63);\n    vowels.insert(64);\n\
    \    vowels.insert(65);\n    vowels.insert(66);\n    vowels.insert(67);\n    vowels.insert(68);\n\
    \    vowels.insert(69);\n    vowels.insert(70);\n    vowels.insert(71);\n    vowels.insert(72);\n\
    \    vowels.insert(73);\n    vowels.\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpcblgyafl.rs:89:1\n   |\n89\
    \ | }\n   | ^\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpcblgyafl.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpfsfds679.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp6lq_61c0.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpjxvur1ug.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp87x7pgm3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpq91nx3es.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpnpgn48sw.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmppb56lzyp.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp5ykiguim.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_vowel())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpcupwiuyr.rs:14:24\n   |\n14 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpu4518ga9.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpt5drrr24.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpcmj8d680.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpmsg1w7q_.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpb8o8gxri.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'A'..'Z'];\n    let mut result\
    \ = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch)\
    \ {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxe_4uzrn.rs:16:29\n   |\n\
    16 |         if !vowels.contains(&ch) {\n   |                             ^^^\
    \ expected struct `std::ops::Range`, found `char`\n   |\n   = note: expected reference\
    \ `&std::ops::Range<char>`\n              found reference `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch.to_lowercase()) {\n            result.push(ch);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt9oh6zby.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_lowercase()) {\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \   |\n   = note: expected reference `&char`\n              found reference `&ToLowercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpjvr4ural.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| c.is_alphabetic())\n    \
    \    .filter(|c| !c.is_vowel())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpprycpfjb.rs:15:24\n   |\n15 |         .filter(|c|\
    \ !c.is_vowel())\n   |                        ^^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp2ik3hbpe.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpxgji0jnf.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(b'a');\n\
    \    vowels.insert(b'e');\n    vowels.insert(b'i');\n    vowels.insert(b'o');\n\
    \    vowels.insert(b'u');\n    vowels.insert(b'A');\n    vowels.insert(b'E');\n\
    \    vowels.insert(b'I');\n    vowels.insert(b'O');\n    vowels.insert(b'U');\n\
    \n    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(ch) {\n            result.push(ch);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpv236n9cp.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp2aegamf6.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(b'a');\n\
    \    vowels.insert(b'e');\n    vowels.insert(b'i');\n    vowels.insert(b'o');\n\
    \    vowels.insert(b'u');\n    vowels.insert(b'y');\n    text.chars().filter(|c|\
    \ vowels.contains(c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpptg5dlx6.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3cjfnjo_.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmphkiwyvln.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(ch) {\n            result.push(ch);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzcofwuu5.rs:17:29\n   |\n\
    17 |         if !vowels.contains(ch) {\n   |                             ^^\n\
    \   |                             |\n   |                             expected\
    \ `&char`, found `char`\n   |                             help: consider borrowing\
    \ here: `&ch`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_uppercase())\n    \
    \    .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n    \
    \    .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpkfl4mnzb.rs:16:24\n    |\n16  |         .filter(|c| !c.is_digit())\n\
    \    |                        ^^^^^^^^- supplied 0 arguments\n    |          \
    \              |\n    |                        expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `is_punctuation`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpkfl4mnzb.rs:17:24\n\
    \   |\n17 |         .filter(|c| !c.is_punctuation())\n   |                   \
    \     ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii_punctuation`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpy3rgc72v.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmps2b0g6jn.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert(b'a');\n\
    \    vowels.insert(b'e');\n    vowels.insert(b'i');\n    vowels.insert(b'o');\n\
    \    vowels.insert(b'u');\n\n    let mut result = String::new();\n    for c in\
    \ text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpi3v8dzp3.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !is_vowel(ch) {\n            result.push(ch);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp1h6xpa1j.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if vowels.contains(&ch.to_lowercase()) {\n            result.push(*ch);\n\
    \        } else {\n            result.push(ch);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl8x9wxla.rs:16:28\n   |\n\
    16 |         if vowels.contains(&ch.to_lowercase()) {\n   |                  \
    \          ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n  \
    \ |\n   = note: expected reference `&char`\n              found reference `&ToLowercase`\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpl8x9wxla.rs:17:25\n\
    \   |\n17 |             result.push(*ch);\n   |                         ^^^\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpkce13dw0.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpwobvx3sz.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpo04o45a7.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpt_27nso_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpiesbicdj.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpiesbicdj.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ ch in text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n     \
    \       result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl082z8kx.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpn4b6zh55.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpnvfsizic.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpfcevqosw.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpiaq1y1pa.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpo3bjoblv.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpevmv2359.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    vowels.sort();\n    let mut result = String::new();\n    for\
    \ ch in text.chars() {\n        if !vowels.contains(&ch.to_lowercase()) {\n  \
    \          result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmkwy9g1.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_lowercase()) {\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \   |\n   = note: expected reference `&char`\n              found reference `&ToLowercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpfdr72ukh.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp9oplvsvt.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpdogsko6r.rs:14:1\n   |\n14 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpdogsko6r.rs:13:26\n   |\n12 | fn remove_vowels(text: String) -> String\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n13 |     let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ '...\n   |                          ^ unclosed delimiter\n14 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpkgcsn6d2.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprdy7o8e6.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp3sbfhfkp.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ vowels.contains(ch) {\n            result.push(*ch);\n        } else {\n   \
    \         result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3lmcr4lc.rs:17:28\n   |\n\
    17 |         if vowels.contains(ch) {\n   |                            ^^\n  \
    \ |                            |\n   |                            expected `&char`,\
    \ found `char`\n   |                            help: consider borrowing here:\
    \ `&ch`\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp3lmcr4lc.rs:18:25\n\
    \   |\n18 |             result.push(*ch);\n   |                         ^^^\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpiuthydjo.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpn2z84zm8.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no\
    \ method named `is_ascii_symbol` found for reference `&char` in the current scope\n\
    \  --> /tmp/tmpn2z84zm8.rs:18:24\n   |\n18 |         .filter(|c| !c.is_ascii_symbol())\n\
    \   |                        ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpwhlrulf8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpfrlu65an.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpczc7o0e1.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp89coxghm.rs:14:22\n\
    \   |\n14 |         .filter(|c| !is_vowel(c))\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpycbdp47r.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars()\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpfgu0_r9m.rs:17:24\n   |\n17 |         .filter(|c|\
    \ !c.is_ascii_letter())\n   |                        ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch.to_string()) {\n            result.push(ch);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfixbkwoy.rs:17:29\n   |\n\
    17 |         if !vowels.contains(&ch.to_string()) {\n   |                    \
    \         ^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   = note:\
    \ expected reference `&char`\n              found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpw0anlfij.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp9mogtx3t.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(c)).collect()\n   |        \
    \                      ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
