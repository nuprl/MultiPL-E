name: HumanEval_28_concatenate
language: rust
results:
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmp4d8wv9zr.rs:7:48\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmp4d8wv9zr.rs:7:53\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\n  = note: string concatenation requires an owned `String` on the left\n\
    help: create an owned `String` from a string reference\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s.to_owned() + s)\n  |                                          \
    \          +++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0415.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc + &s;\n        acc\n    })\n}\n\nfn main() {\n    let candidate\
    \ = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpp92lipzd.rs:7:41\n\
    \  |\n7 |     strings.iter().fold(String::new(), |mut acc, s| {\n  |         \
    \                                ----^^^\n  |                                \
    \         |\n  |                                         help: remove this `mut`\n\
    \  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use of moved\
    \ value: `acc`\n --> /tmp/tmpp92lipzd.rs:9:9\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut acc, s| {\n  |                                         ------- move occurs\
    \ because `acc` has type `String`, which does not implement the `Copy` trait\n\
    8 |         acc + &s;\n  |         --- value moved here\n9 |         acc\n  |\
    \         ^^^ value used here after move\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut s, s|\
    \ s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmpe2jps3u1.rs:7:48\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                ^ used\
    \ as parameter more than once\n\nerror[E0369]: cannot add `&String` to `&String`\n\
    \ --> /tmp/tmpe2jps3u1.rs:7:53\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s + s)\n  |                                                   - ^\
    \ - &String\n  |                                                   | |\n  |  \
    \                                                 | `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                                                   &String\n\
    \  |\n  = note: string concatenation requires an owned `String` on the left\n\
    help: create an owned `String` from a string reference\n  |\n7 |     strings.iter().fold(String::new(),\
    \ |mut s, s| s.to_owned() + s)\n  |                                          \
    \          +++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0415.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(String::from).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(String::from).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ {\n        acc + s.to_string();\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqm_vhr65.rs:8:15\n  |\n8 |\
    \         acc + s.to_string();\n  |               ^^^^^^^^^^^^^\n  |         \
    \      |\n  |               expected `&str`, found struct `String`\n  |      \
    \         help: consider borrowing here: `&s.to_string()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::new(), |mut acc, s|\
    \ acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n\
    /// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
