name: HumanEval_15_string_sequence
language: rust
results:
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp02w6yk5e.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp2qgp5661.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp82m8yjee.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2gnyklx1.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmp2gnyklx1.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplm79wnwr.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpuwpk2jof.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpw5ic6nh4.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3w8yhggo.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpk48bn0w8.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp_npawmz5.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp_43ed2ab.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpc09ko4_o.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp5myl2yt7.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_8_bw0y0.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1y8i36bt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpw2dgixer.rs:7:20\n  |\n7 |     format!(\"{} \", 0..=n).join(\" \"\
    )\n  |                    ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpw2dgixer.rs:7:27\n  |\n\
    7 |     format!(\"{} \", 0..=n).join(\" \")\n  |                           ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpbbxim4z9.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp7nz7mr1m.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5url7d4.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkzy2qvzs.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp938zdq_c.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).to_string()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2qwidynx.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpp157ixji.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmptq0zvvb9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_eg2gkew.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_zcq10nb.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpsfyu7ok_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkntswp4f.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_9bynclp.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n).to_string()\n\
    \  |                    ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpz6781ot6.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmplrfa1yyu.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpueuyxu31.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplrq812vx.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp94h6cv3e.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp95vd736d.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpi_rqik6i.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpr76deg0_.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0j43brve.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpe9yi3egs.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpdlkbofqy.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxscczqxj.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpxscczqxj.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmppki88zso.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpgvac6h4k.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpp4mhxizd.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp5bfgiy2c.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpblxngu6m.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpyfwd2eyn.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpnnd0rt_g.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmppex0p9fm.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxsqrrxs2.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpy_htdvug.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpzxmckiox.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3l0_9k7z.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptpysgc4u.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr86nj79a.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkm10ucyv.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp39p5zjbu.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpa1rqpuk7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpvnq0i_en.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp6makvutu.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpv_30vy80.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpkin6cvwx.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr2x8_gni.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp4ujt1ns1.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwai379kt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpizp6pgtp.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpvpm4qlg9.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpbb6i1059.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmplgx15i_v.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n).to_string()\n\
    \  |                    ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpahrj7lil.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp03dl3tzv.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw553ikb6.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmplj_vh770.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpoocgdeo9.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpa2skhjgb.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpifkc2qz7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpdwsztnkl.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpvkkgq2x4.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpsmlcjax3.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpa1sb3q6e.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp50zv_w9z.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpf8b_8obt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp091yet5n.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpisnhok68.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpnbql3d5v.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp6_fex9yg.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpf0a25k5o.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpgjcpmen_.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n).to_string()\n\
    \  |                    ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpbc_y6inn.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpzihnr9ez.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n).to_string()\n\
    \  |                    ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpv4vnr7ol.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpgve2k8ny.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpoxsl14xb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpkuh4a2ux.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpu83y25ez.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpze3wh82_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptn2_9qo2.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpsqc4m2s4.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxu5yztxa.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp5_8d3nqs.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpoyhik7sv.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpor_q8cix.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpxavlp7pa.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp2pyx3ck3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp__8nnzcs.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpa5gy85fc.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpytczkt7b.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).to_string()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp9ard34zd.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmppqkl5r_d.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).to_string()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpmy9q00iw.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmppw4y_ypp.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpgqomzkb8.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpo27opthi.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp7ornvfv0.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp46sq8vn4.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw7u67wik.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn9my47tf.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpi3ilj2n2.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpm5yaswrh.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpd0nsa6ed.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn7s1fvvb.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpeod8jqc2.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpabk355uo.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2zchqxlo.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpf13q8t9n.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpbik27mz5.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpfky8vcim.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp37ovm3qk.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxwugnm4k.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpckvawr3o.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpla8flf9i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpj0in8qpc.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmppxlfvqww.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpqfbplndk.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmparo6wgcg.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ernep9x.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpll9rw8i4.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpjwn4h4he.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw5mmrgtn.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpe_vqshkl.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpbmu_bjds.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpt_2plyel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpx56b7t1z.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpe2b3ck0s.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpjkusdcv9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp8z86akd6.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpgr_u2bsb.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpgr_u2bsb.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp55sb8krd.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpqpz43kar.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpcytxlc3d.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpctm_gwq5.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpgb2z6i8u.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_lh_oiu_.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n).to_string()\n\
    \  |                    ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpcpupxst6.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp8gpkyhpv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpl_895dyo.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpaz465tyl.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpca7oya8z.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp7wjd56mf.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpi1486026.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpbsif1tol.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpajfsx91q.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp0ehf_lap.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkejm1bpc.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpvjx_hdy3.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmplt73mj3a.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmplt73mj3a.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpk499i_us.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptc51er19.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).to_string()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpknc7cin_.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp7cpzw97p.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp4gtecyoc.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpxfsij63c.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpb3vuo0vc.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpyqfwn7eh.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp9frvrl53.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpmyoouk_4.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<Vec<_>>().join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp8a33dy8o.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpp93o34xa.rs:7:20\n  |\n7 |     format!(\"{} \", 0..=n).join(\" \"\
    )\n  |                    ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpp93o34xa.rs:7:27\n  |\n\
    7 |     format!(\"{} \", 0..=n).join(\" \")\n  |                           ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpc9x4fo5r.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpr6km4bay.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpgd36tf6d.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpuvvwchil.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxl72tnro.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp0uy9oxvb.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmplebd_i1a.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptgyi7dhw.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpg4u4mf1a.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpsbdrlk4j.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpv4ytscoj.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpjy0wi9r1.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpfv5idzfz.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp0otzpdgt.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp_hzme6ma.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpqxsid_62.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\
    \ \", n.to_string())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpoi28_i70.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , (0..n).collect::<String>())\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp8wqn2sqf.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmphctjgk4j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmphctjgk4j.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp6abx2h3h.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n)\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmps36_qvro.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..n).to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpix65skep.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
