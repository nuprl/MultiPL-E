name: HumanEval_101_words_string
language: rust
results:
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8qlgmq9b.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp4k60s0mm.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4k60s0mm.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_fb_z2_9.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_fb_z2_9.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpla1ih567.rs:10:15\n   |\n10 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpla1ih567.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    while !s.is_empty() {\n        let mut word\
    \ = String::from(\"\");\n        let mut is_space = false;\n        while !s.is_empty()\
    \ {\n            let c = s.chars().next().unwrap();\n            if c == ',' {\n\
    \                break;\n            }\n            if !is_space {\n         \
    \       word.push(c);\n            }\n            if c == '.' {\n            \
    \    break;\n            }\n            if c == '!' {\n                break;\n\
    \            }\n            if c == '?' {\n                break;\n          \
    \  }\n            if c == ';' {\n                break;\n            }\n     \
    \       if c == '-' {\n                break;\n            }\n            if c\
    \ == '_' {\n                break;\n            }\n            if c == '/' {\n\
    \                break;\n            }\n            if c == '\\\\' {\n       \
    \         break;\n            }\n            if c == '+' {\n                break;\n\
    \            }\n            if c == '*' {\n                break;\n          \
    \  }\n            if c == '?' {\n                break;\n            }\n     \
    \       if c == '|' {\n                break;\n            }\n            if c\
    \ == '>' {\n                break;\n            }\n            if c == '<' {\n\
    \                break;\n            }\n            if c == '=' {\n          \
    \      break;\n            }\n            if c == '^' {\n                break;\n\
    \            }\n            if c == '&' {\n                break;\n          \
    \  }\n            if c == '!' {\n                break;\n            }\n     \
    \       if c == '~' {\n                break;\n            }\n            if c\
    \ == '`' {\n                break;\n            }\n            if c == '-' {\n\
    \                break;\n            }\n            if c == '_' {\n          \
    \      break;\n            }\n            if c == '/' {\n                break;\n\
    \            }\n            if c == '\\\\' {\n                break;\n       \
    \     }\n            if c == '+' {\n                break;\n            }\n  \
    \          if c == '*' {\n                break;\n            }\n            if\
    \ c == '?' {\n                break;\n            }\n            if c == '|' {\n\
    \                break;\n            }\n            if c == '>' {\n          \
    \      break;\n            }\n            if c == '<' {\n                break;\n\
    \            }\n            if c == '=' {\n                break;\n          \
    \  }\n            if c == '^' {\n                break;\n            }\n     \
    \       if c == '&' {\n                break;\n            }\n            if c\
    \ == '!' {\n                break;\n            }\n            if c == '~' {\n\
    \                break;\n            }\n            if c == '`' {\n          \
    \      break;\n            }\n            if c == '-' {\n                break;\n\
    \            }\n            if c == '_' {\n                break;\n          \
    \  }\n            if c == '/' {\n                break;\n            }\n     \
    \       if c == '\\\\' {\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpu_mq5l2v.rs:148:3\n\
    \    |\n6   | fn words_string(s: String) -> Vec<String> {\n    |             \
    \                              - unclosed delimiter\n...\n9   |     while !s.is_empty()\
    \ {\n    |                         - unclosed delimiter\n...\n12  |         while\
    \ !s.is_empty() {\n    |                             - unclosed delimiter\n...\n\
    137 |             if c == '\\\\' {\n    |                          - this delimiter\
    \ might not be properly closed...\n138 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n148 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpu_mq5l2v.rs:9:5\n    |\n6   |   fn words_string(s: String)\
    \ -> Vec<String> {\n    |                                 ----------- expected\
    \ `Vec<String>` because of return type\n...\n9   | /     while !s.is_empty() {\n\
    10  | |         let mut word = String::from(\"\");\n11  | |         let mut is_space\
    \ = false;\n12  | |         while !s.is_empty() {\n...   |\n147 | |     assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    148 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected\
    \ struct `Vec<String>`\n            found unit type `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmppdvpb11r.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppdvpb11r.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut delimiters = vec![\".\", \",\", \"\
    ?\", \"!\"];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec![];\n    let mut delimiters_set = vec![];\n    let mut delimiters_set\
    \ = vec!\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `(`, `[`, or `{`, found `}`\n  --> /tmp/tmppk0om823.rs:58:1\n\
    \   |\n57 |     let mut delimiters_set = vec!\n   |                          \
    \        - expected one of `(`, `[`, or `{`\n58 | }\n   | ^ unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += &c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpyvdavdl0.rs:16:13\n   |\n16 |             current_word\
    \ += &c.to_string();\n   |             ------------^^^^^^^^^^^^^^^^^^\n   |  \
    \           |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyvdavdl0.rs:22:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n22 |     words\n   |     ^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    while let Some(word) = splits.pop()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpm8cdjb09.rs:9:35\n  |\n9 |     while let\
    \ Some(word) = splits.pop() {\n  |                                   ^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpliua5p18.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpliua5p18.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpliua5p18.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp2ksugnvu.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2ksugnvu.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxjzl1cw5.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpojvqhk4u.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpojvqhk4u.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp13jinkjs.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp13jinkjs.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp13jinkjs.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpj9aqtr4g.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpj9aqtr4g.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj9aqtr4g.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words.clone_from(&mut words);\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpb692x0go.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb692x0go.rs:11:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n11 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpl2fo5h5m.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl2fo5h5m.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push_back(current);\n            current = \"\";\n \
    \       } else {\n            current += &c.to_string();\n        }\n    }\n \
    \   if current.is_empty() {\n        words.push_back(current);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpwv7ihemd.rs:14:19\n   |\n14 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwv7ihemd.rs:17:13\n\
    \   |\n17 |             current += &c.to_string();\n   |             -------^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpwv7ihemd.rs:21:15\n   |\n21 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0368, E0599.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace().collect::<Vec<String>>();\n    words.sort_unstable();\n\
    \    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpyzp4tdki.rs:8:42\n     |\n8  \
    \  |     let mut words = s.split_whitespace().collect::<Vec<String>>();\n    \
    \ |                                          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphamz_tp7.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpdqbve3xb.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdqbve3xb.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpn872jtpo.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn872jtpo.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp0p_vnpdf.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0p_vnpdf.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        words.push(split.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp9u5hmy1s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while !words.is_empty() {\n     \
    \   words.push(words.split_whitespace().to_owned());\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp2_l928c4.rs:9:18\n  |\n9 |     while !words.is_empty()\
    \ {\n  |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `push` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmp2_l928c4.rs:10:15\n   |\n10 |         words.push(words.split_whitespace().to_owned());\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `split_whitespace` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmp2_l928c4.rs:10:26\n   |\n10 |         words.push(words.split_whitespace().to_owned());\n\
    \   |                          ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2_l928c4.rs:12:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n12 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp9zvxkskm.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp9zvxkskm.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9zvxkskm.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push_back(current);\n            current = \"\";\n \
    \       } else {\n            current += &c.to_string();\n        }\n    }\n \
    \   if current.is_empty() {\n        words.push_back(current);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpv2f76eiw.rs:14:19\n   |\n14 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpv2f76eiw.rs:17:13\n\
    \   |\n17 |             current += &c.to_string();\n   |             -------^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpv2f76eiw.rs:21:15\n   |\n21 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0368, E0599.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut split = false;\n    let mut i =\
    \ 0;\n    while i < s.len() {\n        if s.is_whitespace() {\n            i +=\
    \ 1;\n            continue;\n        }\n        if s.is_ascii_alphanumeric() {\n\
    \            i += 1;\n            continue;\n        }\n        if s.is_ascii_letter()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_digit()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_upper()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_lower()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_whitespace()\
    \ {\n            i += 1;\n            continue;\n        }\n        if s.is_ascii_symbol()\
    \ {\n            i += 1;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpxqq55oof.rs:140:3\n\
    \    |\n6   | fn words_string(s: String) -> Vec<String> {\n    |             \
    \                              - unclosed delimiter\n...\n11  |     while i <\
    \ s.len() {\n    |                       - unclosed delimiter\n...\n128 |    \
    \     if s.is_ascii_symbol() {\n    |                                - this delimiter\
    \ might not be properly closed...\n129 |             i += 1;\n130 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n140 | }\n    |\
    \   ^\n\nerror[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpxqq55oof.rs:12:14\n   |\n12 |         if\
    \ s.is_whitespace() {\n   |              ^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `split_ascii_whitespace`\n\nerror[E0599]: no method\
    \ named `is_ascii_alphanumeric` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpxqq55oof.rs:16:14\n   |\n16 |         if s.is_ascii_alphanumeric()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^ method not found in `String`\n\n\
    error[E0599]: no method named `is_ascii_letter` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpxqq55oof.rs:20:14\n   |\n20 |         if s.is_ascii_letter()\
    \ {\n   |              ^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_ascii`\n\nerror[E0599]: no method named `is_ascii_digit`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpxqq55oof.rs:24:14\n\
    \   |\n24 |         if s.is_ascii_digit() {\n   |              ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]:\
    \ no method named `is_ascii_punctuation` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpxqq55oof.rs:28:14\n   |\n28 |         if s.is_ascii_punctuation()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `is_ascii_symbol` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpxqq55oof.rs:32:14\n   |\n32 |         if s.is_ascii_symbol() {\n\
    \   |     "
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while let Some(word) = words.pop()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjpnd2k80.rs:9:34\n  |\n9 |     while let\
    \ Some(word) = words.pop() {\n  |                                  ^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `push` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpjpnd2k80.rs:10:15\n\
    \   |\n10 |         words.push(word);\n   |               ^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpnd2k80.rs:12:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    12 |     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    let mut current_word = \"\"\
    ;\n    for word in word_list {\n        if !current_word.contains(&word) {\n \
    \           words.push(current_word);\n            current_word = word;\n    \
    \    } else {\n            current_word += &word;\n        }\n    }\n    words.push(current_word);\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpc4yyq6cl.rs:15:13\n   |\n15 |             current_word\
    \ += &word;\n   |             ------------^^^^^^^^^\n   |             |\n   |\
    \             cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc4yyq6cl.rs:19:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n19 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp6ya7cmf_.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6ya7cmf_.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ','\
    \ || c == ' ') {\n            j = j + 1;\n        }\n        words.push(s.split_whitespace().take(j\
    \ - i).collect::<Vec<String>>());\n        i = j;\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpotaaw4ox.rs:15:53\n     |\n15\
    \   |         words.push(s.split_whitespace().take(j - i).collect::<Vec<String>>());\n\
    \     |                                                     ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpotaaw4ox.rs:18:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    18 |     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpkqqvabfm.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkqqvabfm.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpfd8rpo5m.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpfd8rpo5m.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ','\
    \ || c == ' ') {\n            j += 1\n        }\n        words.push(s.split_whitespace().collect::<Vec<_>>());\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12pkjeos.rs:18:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n18 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmp7n719n1h.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp7n719n1h.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpk27_b9p3.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk27_b9p3.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while !words.is_empty() {\n     \
    \   words.push(words.remove(0));\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpxankrgpf.rs:9:18\n  |\n9 |     while !words.is_empty()\
    \ {\n  |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `push` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpxankrgpf.rs:10:15\n   |\n10 |         words.push(words.remove(0));\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `remove` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmpxankrgpf.rs:10:26\n   |\n10 |         words.push(words.remove(0));\n\
    \   |                          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxankrgpf.rs:12:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n12 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpr3kfvlwr.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr3kfvlwr.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp9rt8e2ay.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9rt8e2ay.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|&word| !word.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp5ixvwama.rs:9:11\n  |\n9 |     words.retain(|&word|\
    \ !word.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5ixvwama.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut current = String::new();\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push_back(current);\n            current = String::new();\n\
    \        } else {\n            current.push_str(&c.to_string());\n        }\n\
    \    }\n    words.push_back(current);\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpvz551t15.rs:14:19\n   |\n14 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpvz551t15.rs:20:11\n   |\n20 |     words.push_back(current);\n \
    \  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmptk4mbd5c.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmptk4mbd5c.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptk4mbd5c.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpphwakso9.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpphwakso9.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpyuf3ru2s.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyuf3ru2s.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_mcgs37b.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_mcgs37b.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp9kp1aino.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9kp1aino.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpghpqsm40.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpghpqsm40.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpd4_irkql.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd4_irkql.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpworva9zi.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpworva9zi.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            current = \"\";\n        } else {\n            current +=\
    \ &c.to_string();\n        }\n        if current.is_empty() {\n            continue;\n\
    \        }\n        words.push(current);\n        current = \"\";\n    }\n   \
    \ words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmph_tfsv9y.rs:16:13\n   |\n16 |             current += &c.to_string();\n\
    \   |             -------^^^^^^^^^^^^^^^^^^\n   |             |\n   |        \
    \     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmph_tfsv9y.rs:24:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n24 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c == ',' || c\
    \ == ' ' {\n            current.push_str(&current);\n            current = \"\"\
    ;\n        } else {\n            current.push_str(&c.to_string());\n        }\n\
    \    }\n    current.push_str(&current);\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmp9h45cisa.rs:11:21\n   |\n11 |             current.push_str(&current);\n\
    \   |                     ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_str` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmp9h45cisa.rs:14:21\n   |\n14 |             current.push_str(&c.to_string());\n\
    \   |                     ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_str` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmp9h45cisa.rs:17:13\n   |\n17 |     current.push_str(&current);\n\
    \   |             ^^^^^^^^ method not found in `&str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s.chars().any(|c| c.is_whitespace()) {\n            i += 1;\n    \
    \        continue;\n        }\n        let mut word = String::from(s.as_str());\n\
    \        i += 1;\n        while i < s.len() {\n            if s.chars().any(|c|\
    \ !c.is_whitespace()) {\n                break;\n            }\n            i\
    \ += 1;\n        }\n        words.push(word);\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"Hi\", \"my\", \"name\", \"is\", \"John\"]`', /tmp/tmp1cwdo6xu.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp8u2cjase.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8u2cjase.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmprevsqvr_.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmprevsqvr_.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprevsqvr_.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpg4t7pb55.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg4t7pb55.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpqmmfrd6e.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqmmfrd6e.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    while !splits.is_empty() {\n   \
    \     words.push(splits.next());\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmphsolelap.rs:9:19\n  |\n9 |     while !splits.is_empty()\
    \ {\n  |                   ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphsolelap.rs:12:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n12 |     words\n\
    \   |     ^^^^^ expected struct `String`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<Option<&str>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmprqkss91b.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprqkss91b.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s.is_empty() {\n            break;\n        }\n        let mut j =\
    \ i;\n        while j < s.len() {\n            if s.chars().any(|c| c == ',' ||\
    \ c == ' ') {\n                break;\n            }\n            j = j + 1;\n\
    \        }\n        words.push_back(s.split_whitespace().collect::<Vec<_>>());\n\
    \        i = j;\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpsaujgkf8.rs:21:15\n   |\n21 |         words.push_back(s.split_whitespace().collect::<Vec<_>>());\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ','\
    \ || c == ' ') {\n            j = j + 1;\n        }\n        let word = s.split_whitespace().take(j\
    \ - i).collect::<Vec<_>>();\n        i += j;\n        words.push(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpszszv6we.rs:19:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n19 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp72gsg7gm.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp72gsg7gm.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpw8a4u0ex.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpw8a4u0ex.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw8a4u0ex.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp1l9nrnil.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp1l9nrnil.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1l9nrnil.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn7lk27p.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while !words.is_empty() {\n     \
    \   words.push(words.clone());\n        words.clear();\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpfkx5komw.rs:9:18\n  |\n9 |     while !words.is_empty()\
    \ {\n  |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `push` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpfkx5komw.rs:10:15\n   |\n10 |         words.push(words.clone());\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `clear` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmpfkx5komw.rs:11:15\n   |\n11 |         words.clear();\n   |    \
    \           ^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfkx5komw.rs:13:5\n   |\n6  | fn words_string(s: String)\
    \ -> Vec<String> {\n   |                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n13 |     words\n   |     ^^^^^ expected struct\
    \ `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `SplitWhitespace<'_>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps5r33nrw.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().all(|c| !c.is_whitespace())\
    \ {\n            j = j + 1;\n        }\n        let mut word = String::from(s.split_whitespace().collect::<Vec<_>>());\n\
    \        words.push_back(word);\n        i = j;\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<Vec<&str>>` is not satisfied\n\
    \  --> /tmp/tmp18saj_lq.rs:15:24\n   |\n15 |         let mut word = String::from(s.split_whitespace().collect::<Vec<_>>());\n\
    \   |                        ^^^^^^^^^^^^ the trait `From<Vec<&str>>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current\
    \ scope\n  --> /tmp/tmp18saj_lq.rs:16:15\n   |\n16 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpl5um4gfw.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpl5um4gfw.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    while let Some(word) = splits.pop()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp_u3y43yy.rs:9:35\n  |\n9 |     while let\
    \ Some(word) = splits.pop() {\n  |                                   ^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c == ','\
    \ || c == ' ' {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += &c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmp1p2jx8p4.rs:16:13\n   |\n16 |             current_word\
    \ += &c.to_string();\n   |             ------------^^^^^^^^^^^^^^^^^^\n   |  \
    \           |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1p2jx8p4.rs:22:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n22 |     words\n   |     ^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut word: String;\n    while !s.is_empty()\
    \ {\n        word = s.split_whitespace()[0];\n        words = words.insert(0,\
    \ word);\n        s = s.split_whitespace()[1];\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmp3h_o1ktz.rs:11:16\n   |\n11 |         word = s.split_whitespace()[0];\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3h_o1ktz.rs:12:17\n   |\n7  |     let mut words = vec![];\n   |\
    \                     ------ expected due to this value\n...\n12 |         words\
    \ = words.insert(0, word);\n   |                 ^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n \
    \          found unit type `()`\n\nerror[E0608]: cannot index into a value of\
    \ type `SplitWhitespace<'_>`\n  --> /tmp/tmp3h_o1ktz.rs:13:13\n   |\n13 |    \
    \     s = s.split_whitespace()[1];\n   |             ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpa6noo978.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa6noo978.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpxlejy1e5.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxlejy1e5.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmphqrp_3op.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphqrp_3op.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpyfwt3ybt.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyfwt3ybt.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppffdgklv.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmppffdgklv.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppffdgklv.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpgr_18b88.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgr_18b88.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpxup317fk.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpxup317fk.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxup317fk.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmph19sbx4n.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmph19sbx4n.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph19sbx4n.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ','\
    \ || c == ' ') {\n            j = j + 1;\n        }\n        let mut word = s.split_whitespace().nth(j).unwrap();\n\
    \        words.push_back(word);\n        i = j;\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpsjm5gnu1.rs:16:15\n   |\n16 |         words.push_back(word);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpe7bkiltb.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe7bkiltb.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_iec26ch.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtyq0jw8.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c == ',' || c\
    \ == ' ' {\n            current.push_str(&current);\n            current = \"\"\
    ;\n        } else {\n            current.push_str(&c.to_string());\n        }\n\
    \    }\n    current.push_str(&current);\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpp_5uzpvk.rs:11:21\n   |\n11 |             current.push_str(&current);\n\
    \   |                     ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_str` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmpp_5uzpvk.rs:14:21\n   |\n14 |             current.push_str(&c.to_string());\n\
    \   |                     ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_str` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmpp_5uzpvk.rs:17:13\n   |\n17 |     current.push_str(&current);\n\
    \   |             ^^^^^^^^ method not found in `&str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpybe0hfps.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpybe0hfps.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3o1qzomk.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmps7qfw1mc.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmps7qfw1mc.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps7qfw1mc.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpanbsmihi.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpanbsmihi.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpn00q2ym1.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn00q2ym1.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        words.push(split.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpfuwu22co.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj56qajv1.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0z1xyfr.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmphw7fmynr.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphw7fmynr.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpowcasajl.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpowcasajl.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmps8zap13m.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps8zap13m.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp4g0ji5zl.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4g0ji5zl.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3wgyadp.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += &c.to_string();\n        }\n    }\n    if\
    \ current.is_empty() {\n        words.push(current);\n    }\n    words\n}\n\n\
    fn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmppl5caozo.rs:17:13\n   |\n17 |             current += &c.to_string();\n\
    \   |             -------^^^^^^^^^^^^^^^^^^\n   |             |\n   |        \
    \     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppl5caozo.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpapzkeh5p.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpapzkeh5p.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpapzkeh5p.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpu_1ds8nl.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu_1ds8nl.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1b9s4vkt.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpk4pbhmkd.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk4pbhmkd.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    while let Some(word) = splits.pop()\
    \ {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp41ozu9cx.rs:9:35\n  |\n9 |     while let\
    \ Some(word) = splits.pop() {\n  |                                   ^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp1op6dmiv.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp1op6dmiv.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1op6dmiv.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut split = false;\n    let mut word\
    \ = \"\";\n    while !s.is_empty() {\n        if s.is_whitespace() {\n       \
    \     split = true;\n            words.push_back(word);\n            word = \"\
    \";\n        } else {\n            word += s.as_str();\n        }\n        s =\
    \ String::from(s.trim_end());\n    }\n    words.push_back(word);\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpcepotgxv.rs:12:14\n   |\n12 |         if\
    \ s.is_whitespace() {\n   |              ^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `split_ascii_whitespace`\n\nerror[E0599]: no method\
    \ named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpcepotgxv.rs:14:19\n\
    \   |\n14 |             words.push_back(word);\n   |                   ^^^^^^^^^\
    \ method not found in `Vec<_>`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `&str`\n  --> /tmp/tmpcepotgxv.rs:17:13\n   |\n17\
    \ |             word += s.as_str();\n   |             ----^^^^^^^^^^^^^^\n   |\
    \             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpcepotgxv.rs:21:11\n   |\n21 |     words.push_back(word);\n   |\
    \           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0368, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpf2subftw.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpf2subftw.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf2subftw.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp4o4qtnew.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp4o4qtnew.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4o4qtnew.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp00mqcm81.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp00mqcm81.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while !words.is_empty() {\n     \
    \   words.push(words.remove(0));\n    }\n    return words;\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmptrwzxus7.rs:9:18\n  |\n9 |     while !words.is_empty()\
    \ {\n  |                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `push` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmptrwzxus7.rs:10:15\n   |\n10 |         words.push(words.remove(0));\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `remove` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmptrwzxus7.rs:10:26\n   |\n10 |         words.push(words.remove(0));\n\
    \   |                          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptrwzxus7.rs:12:12\n   |\n6  |\
    \ fn words_string(s: String) -> Vec<String> {\n   |                          \
    \     ----------- expected `Vec<String>` because of return type\n...\n12 |   \
    \  return words;\n   |            ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut delimiters = vec![];\n    let mut\
    \ delimiter = String::from(\",\");\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == delimiter {\n            delimiters.push(delimiter);\n\
    \            delimiter = String::from(\",\");\n        } else {\n            delimiters.push(delimiter);\n\
    \            delimiter = String::from(\" \");\n        }\n        i += 1;\n  \
    \  }\n    delimiters.push(delimiter);\n    for delimiter in delimiters {\n   \
    \     let mut words = s.split_whitespace().collect::<Vec<String>>();\n       \
    \ words.dedup();\n        words.push(\"\");\n        words.dedup();\n        words.push(\"\
    \");\n        words.dedup();\n        words.push(\"\");\n        words.dedup();\n\
    \        words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.dedup();\n        words.push(\"\");\n        words.dedup();\n \
    \       words.push(\"\");\n        words.dedup();\n        words.push(\"\");\n\
    \        words.\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvd355mst.rs:106:3\n\
    \    |\n6   | fn words_string(s: String) -> Vec<String> {\n    |             \
    \                              - unclosed delimiter\n...\n23  |     for delimiter\
    \ in delimiters {\n    |                                 - this delimiter might\
    \ not be properly closed...\n...\n96  | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n106 | }\n    |   ^\n\nerror: unexpected token:\
    \ `}`\n  --> /tmp/tmpvd355mst.rs:96:1\n   |\n96 | }\n   | ^\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvd355mst.rs:13:12\n\
    \   |\n13 |         if s[i] == delimiter {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&str`\n    --> /tmp/tmpvd355mst.rs:24:46\n\
    \     |\n24   |         let mut words = s.split_whitespace().collect::<Vec<String>>();\n\
    \     |                                              ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvd355mst.rs:26:20\n\
    \   |\n26 |         words.push(\"\");\n   |                    ^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                    |\n   |       \
    \             expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  -"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15sz7i9e.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        words.push(split.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmpz67il0nc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut delimiters = vec![];\n    let mut\
    \ current_delimiter = String::from(\"\");\n    while !s.is_empty() {\n       \
    \ let mut delimiter = String::from(\"\");\n        while !s.is_empty() && s.chars().any(|c|\
    \ c == ',' || c == ' ') {\n            delimiter = s.chars().next().unwrap();\n\
    \        }\n        delimiters.push(delimiter);\n        s = s.trim_end().trim_start();\n\
    \    }\n    for delimiter in delimiters {\n        let mut current_word = String::from(\"\
    \");\n        while !s.is_empty() && s.chars().any(|c| c == delimiter) {\n   \
    \         current_word = current_word.to_owned() + s.chars().next().unwrap();\n\
    \            s = s.trim_end().trim_start();\n        }\n        words.push(current_word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyzvo6mm.rs:14:25\n   |\n\
    12 |         let mut delimiter = String::from(\"\");\n   |                   \
    \          ---------------- expected due to this value\n13 |         while !s.is_empty()\
    \ && s.chars().any(|c| c == ',' || c == ' ') {\n14 |             delimiter = s.chars().next().unwrap();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                         |\n   |               \
    \          expected struct `String`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmyzvo6mm.rs:17:13\n   |\n8  |     let mut s = String::from(s);\n\
    \   |                 --------------- expected due to this value\n...\n17 |  \
    \       s = s.trim_end().trim_start();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |             |\n  \
    \ |             expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmyzvo6mm.rs:21:55\n   |\n21 |         while !s.is_empty()\
    \ && s.chars().any(|c| c == delimiter) {\n   |                               \
    \                        ^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmyzvo6mm.rs:22:54\n   |\n22 |  \
    \           current_word = current_word.to_owned() + s.chars().next().unwrap();\n\
    \   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyzvo6mm.rs:23:17\n\
    \   |\n8  |     let mut s = String::from(s);\n   |                 ---------------\
    \ expected due to this value\n...\n23 |             s = s.trim_end().trim_start();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                 |\n   |                 expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    while let Some(word) = splits.next()\
    \ {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjzm7kkny.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpyddpukzq.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyddpukzq.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphax3957u.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpziuzz69i.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpziuzz69i.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpoyz2s_mh.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpoyz2s_mh.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    let mut current_is_space = false;\n    for c in\
    \ s.chars() {\n        if c.is_whitespace() {\n            current_is_space =\
    \ true;\n        } else {\n            if current_is_space {\n               \
    \ current.push_str(&c.to_string());\n            } else {\n                current.push_str(&c.to_ascii_lowercase());\n\
    \                words.push(current);\n                current = \"\";\n     \
    \           current_is_space = false;\n            }\n        }\n    }\n    words.push(current);\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmp1z40frzm.rs:15:25\n   |\n15 |             \
    \    current.push_str(&c.to_string());\n   |                         ^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0599]: no method named `push_str` found\
    \ for reference `&str` in the current scope\n  --> /tmp/tmp1z40frzm.rs:17:25\n\
    \   |\n17 |                 current.push_str(&c.to_ascii_lowercase());\n   | \
    \                        ^^^^^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1z40frzm.rs:25:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n25 |     words\n   |     ^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() {\n            if s.chars().any(|c|\
    \ c == ',' || c == ' ') {\n                break;\n            }\n           \
    \ j = j + 1;\n        }\n        let word = s.split_whitespace().collect::<Vec<_>>();\n\
    \        words.extend_from_slice(&word);\n        i = j;\n    }\n    words\n}\n\
    \nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl7c_yule.rs:22:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n22 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1_x_62a.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s[j] == ' ' {\n        \
    \    j = j + 1;\n        }\n        let mut word = String::from(&s[i .. j]);\n\
    \        i += j - i;\n        words.push(word);\n    }\n    words\n}\n\nfn main()\
    \ {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpegv3c91v.rs:12:30\n\
    \   |\n12 |         while j < s.len() && s[j] == ' ' {\n   |                 \
    \             ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpb3qd8et8.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb3qd8et8.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut current_word = \"\";\n    for c in s.chars() {\n        if c == ','\
    \ || c == ' ' {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpfq4doyp9.rs:16:13\n   |\n16 |             current_word\
    \ += c.to_string();\n   |             ------------^--^^^^^^^^^^^^^^\n   |    \
    \         |            |\n   |             |            `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n   |             cannot use `+=` on type\
    \ `&str`\n   |\n   = note: string concatenation requires an owned `String` on\
    \ the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfq4doyp9.rs:22:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    22 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgwa1a8cc.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp169_yf4_.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpc4jw4yw8.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpc4jw4yw8.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrvi5cpm.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut current = String::new();\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push_back(current);\n            current.clear();\n\
    \        } else {\n            current.push_str(&c.to_string());\n        }\n\
    \    }\n    if current.is_empty() {\n        words.push_back(current);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpxu1_gmju.rs:14:19\n   |\n14 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpxu1_gmju.rs:21:15\n   |\n21 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        words.push(word);\n    }\n    return words;\n}\n\nfn main() {\n \
    \   let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpxappqczz.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxappqczz.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        words.push(split.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Hi,\", \"my\", \"name\", \"is\", \"John\"]`,\n right: `[\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]`', /tmp/tmp669r4dz1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splitter = s.split_whitespace();\n    while let Some(word) = splitter.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5y1yay8s.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp2gzjh4v1.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2gzjh4v1.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpkwv82uj5.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkwv82uj5.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut delimiters = vec![];\n    let mut\
    \ current_delimiter = String::from(\"\");\n    let mut current_word = String::from(\"\
    \");\n    while !s.is_empty() {\n        if s.is_empty() {\n            break;\n\
    \        }\n        if s.chars().any(|c| c == ',' || c == ' ') {\n           \
    \ delimiters.push(current_delimiter);\n            current_delimiter = String::from(\"\
    \");\n        }\n        if s.chars().any(|c| c == '.') {\n            delimiters.push(current_delimiter);\n\
    \            current_delimiter = String::from(\"\");\n        }\n        if s.chars().any(|c|\
    \ c == '!') {\n            delimiters.push(current_delimiter);\n            current_delimiter\
    \ = String::from(\"\");\n        }\n        if s.chars().any(|c| c == '?') {\n\
    \            delimiters.push(current_delimiter);\n            current_delimiter\
    \ = String::from(\"\");\n        }\n        if s.chars().any(|c| c == '.' || c\
    \ == '!' || c == '?') {\n            delimiters.push(current_delimiter);\n   \
    \         current_delimiter = String::from(\"\");\n        }\n        if s.chars().any(|c|\
    \ c == '.' || c == '!' || c == '?' || c == '.' || c == '!' || c == '?') {\n  \
    \          delimiters.push(current_delimiter);\n            current_delimiter\
    \ = String::from(\"\");\n        }\n        if s.chars().any(|c| c == '.' || c\
    \ == '!' || c == '?' || c == '.' || c == '!' || c == '?' || c == '.' || c == '!'\
    \ || c == '?') {\n            delimiters.push(current_delimiter);\n          \
    \  current_delimiter = String::from(\"\");\n        }\n        if s.chars().any(|c|\
    \ c == '.' || c == '!' || c == '?' || c == '.' || c == '!' || c == '?' || c ==\
    \ '.' || c == '!' || c == '?' || c == '.' || c == '!' || c == '?') {\n       \
    \     delimiters.push(current_delimiter);\n            current_delimiter = String::from(\"\
    \");\n        }\n        if s.chars().any(|c| c == '.' || c == '!' || c == '?'\
    \ || c == '.' || c == '!' || c == '?' || c == '.' || c == '!' || c == '?' || c\
    \ == '.' || c == '!' || c == '?' || c == '.' || c == '!' || c == '?') {\n    \
    \        delimiters.push(current_delimiter);\n            current_delimiter =\
    \ String::from(\"\");\n        }\n        if s.chars().any(|c| c == '.' || c ==\
    \ '!' || \n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmps0cmpdhp.rs:63:3\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n12 |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n53 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    63 | }\n   |   ^\n\nerror: expected expression, found `)`\n  --> /tmp/tmps0cmpdhp.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmps0cmpdhp.rs:52:25\n   |\n6  | fn words_string(s: String)\
    \ -> Vec<String> {\n   |                                           - closing delimiter\
    \ possibly meant for this\n...\n52 |         if s.chars().any(|c| c == '.' ||\
    \ c == '!' || \n   |                         ^ unclosed delimiter\n53 | }\n  \
    \ | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmps0cmpdhp.rs:6:31\n\
    \  |\n6 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6h3kpxb4.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpn5ayskuw.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpn5ayskuw.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn5ayskuw.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpbnr770r6.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbnr770r6.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpzd53_hbm.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzd53_hbm.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprtgaozgm.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpr0pg4i6i.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr0pg4i6i.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpdjos4eit.rs:16:13\n   |\n16 |             current_word\
    \ += c.to_string();\n   |             ------------^--^^^^^^^^^^^^^^\n   |    \
    \         |            |\n   |             |            `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n   |             cannot use `+=` on type\
    \ `&str`\n   |\n   = note: string concatenation requires an owned `String` on\
    \ the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdjos4eit.rs:22:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    22 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpdsr84imp.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpdsr84imp.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdsr84imp.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp5rw7h7qs.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp5rw7h7qs.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5rw7h7qs.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut split = false;\n    while !s.is_empty()\
    \ {\n        if s.is_whitespace() {\n            split = true;\n        } else\
    \ {\n            if !split {\n                words.push(s);\n            }\n\
    \            split = false;\n        }\n        s = String::from(s.trim_end());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_whitespace` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpmb47gd09.rs:11:14\n   |\n11 |         if\
    \ s.is_whitespace() {\n   |              ^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `split_ascii_whitespace`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdk9k2c2d.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpsxh2y2dy.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpsxh2y2dy.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsxh2y2dy.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        words.push_back(split.to_string());\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpw1d_30wx.rs:10:15\n   |\n10 |         words.push_back(split.to_string());\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpyts8rsvn.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyts8rsvn.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7aw7k4b4.rs:10:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n10 |\
    \     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpg1rpqonp.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg1rpqonp.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpbqo47xhh.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbqo47xhh.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmngevzsg.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpy061ttn9.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy061ttn9.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp1fwq03dn.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmp1fwq03dn.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1fwq03dn.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push_back(current);\n            current = \"\";\n \
    \       } else {\n            current += &c.to_string();\n        }\n    }\n \
    \   if current.is_empty() {\n        words.push_back(current);\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpzzcoe3ur.rs:14:19\n   |\n14 |             words.push_back(current);\n\
    \   |                   ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpzzcoe3ur.rs:17:13\n\
    \   |\n17 |             current += &c.to_string();\n   |             -------^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpzzcoe3ur.rs:21:15\n   |\n21 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0368, E0599.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|x| !x.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpyvzlto7b.rs:9:11\n  |\n9 |     words.retain(|x|\
    \ !x.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyvzlto7b.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpivz0sqzv.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpivz0sqzv.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c == ','\
    \ || c == ' ' {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpzgblsuaa.rs:16:13\n   |\n16 |             current_word\
    \ += c.to_string();\n   |             ------------^--^^^^^^^^^^^^^^\n   |    \
    \         |            |\n   |             |            `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n   |             cannot use `+=` on type\
    \ `&str`\n   |\n   = note: string concatenation requires an owned `String` on\
    \ the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzgblsuaa.rs:22:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    22 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgqwmok89.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmplw2ieork.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplw2ieork.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpav1b4404.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpav1b4404.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpav1b4404.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            current = \"\";\n        } else {\n            current.push_str(&c.to_string());\n\
    \        }\n        if current.is_empty() {\n            continue;\n        }\n\
    \        words.push_back(current);\n        current = \"\";\n    }\n    words\n\
    }\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpsflk2chc.rs:16:21\n   |\n16 |             current.push_str(&c.to_string());\n\
    \   |                     ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmpsflk2chc.rs:21:15\n   |\n21 |         words.push_back(current);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmphvglnz6z.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphvglnz6z.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|w| !w.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp3ih8t_38.rs:9:11\n  |\n9 |     words.retain(|w|\
    \ !w.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3ih8t_38.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp405y7old.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp9a2ed66u.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9a2ed66u.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += &c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmppw7rcvld.rs:16:13\n   |\n16 |             current_word\
    \ += &c.to_string();\n   |             ------------^^^^^^^^^^^^^^^^^^\n   |  \
    \           |\n   |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppw7rcvld.rs:22:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n22 |     words\n   |     ^^^^^ expected\
    \ struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpb6ci820n.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb6ci820n.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpoqqnlmkc.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoqqnlmkc.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for s in splits {\n        words.push_back(s);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpr3m32178.rs:10:15\n   |\n10 |         words.push_back(s);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qc8_0ob.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        if\
    \ split.is_empty() {\n            continue;\n        }\n        words.push(split);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfthygvvh.rs:15:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpiyrculo5.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiyrculo5.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    if current.is_empty()\
    \ {\n        words.push(current);\n    }\n    words\n}\n\nfn main() {\n    let\
    \ candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name\
    \ is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpwijyba5d.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwijyba5d.rs:23:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n23 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.retain(|&word| !word.is_empty());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpvgolr6g2.rs:9:11\n  |\n9 |     words.retain(|&word|\
    \ !word.is_empty());\n  |           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvgolr6g2.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkfx11wfn.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    while let Some(word) = words.pop()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpkw5yvln7.rs:9:34\n  |\n9 |     while let\
    \ Some(word) = words.pop() {\n  |                                  ^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `push` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpkw5yvln7.rs:10:15\n\
    \   |\n10 |         words.push(word);\n   |               ^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkw5yvln7.rs:12:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    12 |     words\n   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbtp8bjtx.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpou9mqvg3.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpou9mqvg3.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp63jtm6ci.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp63jtm6ci.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            current = \"\";\n        }\n        current.push_str(&c.to_string());\n\
    \        if current.is_empty() {\n            continue;\n        }\n        words.push_back(current);\n\
    \        current = \"\";\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpc2a37ypz.rs:16:17\n   |\n16 |         current.push_str(&c.to_string());\n\
    \   |                 ^^^^^^^^ method not found in `&str`\n\nerror[E0599]: no\
    \ method named `push_back` found for struct `Vec<_>` in the current scope\n  -->\
    \ /tmp/tmpc2a37ypz.rs:20:15\n   |\n20 |         words.push_back(current);\n  \
    \ |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp67gsfkyk.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpjpphjj7h.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjpphjj7h.rs:12:5\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     words\n   |     ^^^^^ expected\
    \ struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut delimiters = vec![];\n    let mut\
    \ current_delimiter = String::from(\"\");\n    let mut current_word = String::from(\"\
    \");\n    while !s.is_empty() {\n        if s.is_empty() {\n            break;\n\
    \        }\n        let mut delimiter = String::from(\"\");\n        let mut word_start\
    \ = String::from(\"\");\n        let mut word_end = String::from(\"\");\n    \
    \    let mut word_delimiter = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n        let mut word_delimiter_index = String::from(\"\
    \");\n        let mut word_delimiter_index = String::from(\"\");\n        let\
    \ mut word_delimiter_index = String::from(\"\");\n        let mut word_delimiter_index\
    \ = String::from(\"\");\n\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwhvgmcfy.rs:68:3\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \                           - unclosed delimiter\n...\n12 |     while !s.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n58 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    68 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwhvgmcfy.rs:6:31\n\
    \  |\n6 | fn words_string(s: String) -> Vec<String> {\n  |    ------------   \
    \            ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<String>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp2_zm2qnl.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2_zm2qnl.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            current = \"\";\n        } else {\n            current +=\
    \ c.to_ascii_lowercase();\n        }\n        if current.is_empty() {\n      \
    \      continue;\n        }\n        words.push(current);\n        current = \"\
    \";\n    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n \
    \   assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmp9bxan7mu.rs:16:13\n   |\n16 |             current += c.to_ascii_lowercase();\n\
    \   |             -------^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |             |\n   |\
    \             cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9bxan7mu.rs:24:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n24 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for split in splits {\n        if\
    \ split.is_empty() {\n            continue;\n        }\n        words.push(split);\n\
    \    }\n    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7kel_0_5.rs:15:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n15 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpt6z3t360.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt6z3t360.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpjp21adbq.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjp21adbq.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp248f2j9p.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp248f2j9p.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmprs8l6kk7.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprs8l6kk7.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current_word = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current_word.len() > 0 {\n                words.push(current_word);\n\
    \                current_word = \"\";\n            }\n        } else {\n     \
    \       current_word += c.to_string();\n        }\n    }\n    if current_word.len()\
    \ > 0 {\n        words.push(current_word);\n    }\n    words\n}\n\nfn main() {\n\
    \    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi,\
    \ my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmps70j_e1b.rs:16:13\n   |\n16 |             current_word\
    \ += c.to_string();\n   |             ------------^--^^^^^^^^^^^^^^\n   |    \
    \         |            |\n   |             |            `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n   |             cannot use `+=` on type\
    \ `&str`\n   |\n   = note: string concatenation requires an owned `String` on\
    \ the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps70j_e1b.rs:22:5\n\
    \   |\n6  | fn words_string(s: String) -> Vec<String> {\n   |                \
    \               ----------- expected `Vec<String>` because of return type\n...\n\
    22 |     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.clone_from_slice(words.as_slice());\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `clone_from_slice` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpq9b5jnrh.rs:9:11\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |           ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `as_slice` found for struct `SplitWhitespace` in\
    \ the current scope\n --> /tmp/tmpq9b5jnrh.rs:9:34\n  |\n9 |     words.clone_from_slice(words.as_slice());\n\
    \  |                                  ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq9b5jnrh.rs:10:5\n   |\n6  | fn\
    \ words_string(s: String) -> Vec<String> {\n   |                             \
    \  ----------- expected `Vec<String>` because of return type\n...\n10 |     words\n\
    \   |     ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut current = \"\";\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ {\n            if current.is_empty() {\n                continue;\n        \
    \    }\n            words.push(current);\n            current = \"\";\n      \
    \  } else {\n            current += c.to_string();\n        }\n    }\n    words.push(current);\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmp9768gi2p.rs:17:13\n   |\n17 |             current += c.to_string();\n\
    \   |             -------^--^^^^^^^^^^^^^^\n   |             |       |\n   | \
    \            |       `+` cannot be used to concatenate a `&str` with a `String`\n\
    \   |             cannot use `+=` on type `&str`\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp9768gi2p.rs:21:5\n   |\n6  | fn words_string(s: String) -> Vec<String>\
    \ {\n   |                               ----------- expected `Vec<String>` because\
    \ of return type\n...\n21 |     words\n   |     ^^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `Vec<String>`\n             \
    \ found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut splits = s.split_whitespace();\n    for word in splits {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl8mbmzcv.rs:12:12\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     return words;\n   |            ^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = vec![];\n   \
    \ let mut s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ','\
    \ || c == ' ') {\n            j = j + 1;\n        }\n        let word = s.split_whitespace().take(j\
    \ - i).collect::<Vec<_>>();\n        i += j;\n        words.push(word);\n    }\n\
    \    words\n}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
    Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
    name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
    One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9mhypw08.rs:19:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n19 |\
    \     words\n   |     ^^^^^ expected struct `String`, found struct `Vec`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<&str>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;\n}\n\nfn main() {\n    let candidate = words_string;\n\
    \    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"\
    John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five,\
    \ six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
    three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\"\
    )]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"\
    Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"\
    One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"\
    ahmed\"), String::from(\"gamal\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp95gzrhh6.rs:10:15\n   |\n10 |         words.push(word);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp95gzrhh6.rs:12:12\n   |\n6  | fn words_string(s:\
    \ String) -> Vec<String> {\n   |                               ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     return words;\n   |    \
    \        ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// words_string(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n/// words_string(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\
    fn words_string(s: String) -> Vec<String> {\n    let mut words = Vec::new();\n\
    \    let mut word_list = s.split_whitespace();\n    while let Some(word) = word_list.next()\
    \ {\n        words.push(word);\n    }\n    words\n}\n\nfn main() {\n    let candidate\
    \ = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
    is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One,\
    \ two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
    two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"\
    ), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
    )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
    \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\"\
    )), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"\
    ), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_78818og.rs:12:5\n   |\n\
    6  | fn words_string(s: String) -> Vec<String> {\n   |                       \
    \        ----------- expected `Vec<String>` because of return type\n...\n12 |\
    \     words\n   |     ^^^^^ expected struct `String`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
