name: HumanEval_146_specialFilter
language: rust
results:
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 0 {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp5nyr7auz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpy2h9verk.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpc1rdzs38.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4rp6svje.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpp3knjt65.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 2 == 1 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1vb2m9j2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpv1tv9s6a.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp1_qeaojo.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 != 1 && n % 2 != 3\
    \ {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi_7cx_df.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpc_pxg_2y.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbleq6dgx.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 2 == 1 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpp_cu0cva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt573im9a.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 0 {\n            if n % 10 ==\
    \ 1 {\n                if n % 100 == 0 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpd5h44qpr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkrly3e6v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       cnt += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n    \
    \        cnt += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n   \
    \         cnt += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n  \
    \          cnt += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n \
    \           cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp9byneua1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_dhy54eu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpg4u6094d.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4s3hdolw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpafhu27lf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkkl7_h7n.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpfv01q_6x.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmph90846qf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 0 {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpkypqi2lx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvlptxo2p.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpusxru84u.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 {\n            cnt += 1;\n    \
    \        if n % 2 == 1 {\n                cnt += 1;\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmppaovxtdq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvyjz0xcl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp11uh8psd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpcytqbhuo.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 2 == 1 {\n                    counter += 1;\n\
    \                }\n            }\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp137l8m17.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 10 == 3 && n % 10 ==\
    \ 7 && n % 10 == 9 {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpi8316vg3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpp04w0pmu.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmps1dy_3cf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5igpwxsm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpgj75twla.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpiphjm1_u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8bf0yrx8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 3 == 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuugcre_b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1\
    \ && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n        }\n    }\n \
    \   return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptm9pr1bq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpfj4iejnz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0g2cv9jt.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt08ic0tz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4lmgcso4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \            if num % 2 == 0 {\n                if num % 2 == 1 {\n          \
    \          count += 1;\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplj4fzsep.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmppios_d_y.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpp73h8nwf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpy4nrccl4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1\
    \ && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n        }\n    }\n \
    \   return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq56_mnys.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1b5tg33s.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmps4kvbcbh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt7izyohh.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpul6vyce5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp7n2qjcp7.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpg5205znv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbgf0dpo7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpknzmc76l.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 3 == 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy2pxuby9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpun0dpm0c.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                cnt += 1;\n            }\n            if num % 2 == 0 {\n\
    \                if num % 10 == 1 {\n                    cnt += 1;\n         \
    \       }\n                if num % 10 == 3 {\n                    cnt += 1;\n\
    \                }\n                if num % 10 == 5 {\n                    cnt\
    \ += 1;\n                }\n                if num % 10 == 7 {\n             \
    \       cnt += 1;\n                }\n                if num % 10 == 9 {\n   \
    \                 cnt += 1;\n                }\n            }\n        }\n   \
    \ }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8xrguk1d.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0vsrb57t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 {\n            if n % 2 == 1 {\n\
    \                cnt += 1;\n            }\n            if n % 2 == 0 {\n     \
    \           if n % 10 == 1 {\n                    cnt += 1;\n                }\n\
    \                if n % 10 == 3 {\n                    cnt += 1;\n           \
    \     }\n                if n % 10 == 5 {\n                    cnt += 1;\n   \
    \             }\n                if n % 10 == 7 {\n                    cnt +=\
    \ 1;\n                }\n                if n % 10 == 9 {\n                  \
    \  cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmphyllghzc.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpfmh7qlnt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpyxsbpeim.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp767n1dyc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpi2x4ucid.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_u0hp_ze.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8o3i15sg.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbusnzczw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num % 2 == 1 && num % 2 == 1 {\n   \
    \         if num > 10 {\n                if num % 10 == 1 && num % 10 == 3 &&\
    \ num % 10 == 7 && num % 10 == 9 {\n                    counter += 1;\n      \
    \          }\n            }\n        }\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptpc_oh_8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 3 == 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppqdkf6uy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8_d2sso5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp91qpu660.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxuvbh8ko.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzg4qydc8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1qzmqbb4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpyec9_e_8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpg6xzwmfs.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            counter += 1;\n        }\n    }\n    return counter;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqpx6hrps.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 0 && num % 2 != 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpywhici5u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvw5mdyjt.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpuogcsbrj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 0 {\n                    if num % 100 ==\
    \ 0 {\n                        if num % 1000 == 0 {\n                        \
    \    count += 1;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpo4yn0obo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpmwghk659.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2\
    \ == 1 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqmstey10.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 3 == 0 {\n                    if num % 5 == 0\
    \ {\n                        count += 1;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpye3sdm3r.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpqcr6ngic.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpe19o8wda.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4coaaol8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpwnnyl_1p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpw3vk7rr1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       cnt += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n    \
    \        cnt += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n   \
    \         cnt += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n  \
    \          cnt += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n \
    \           cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpg64etduf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpm655fpio.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 {\n            if n % 2 == 1 {\n\
    \                cnt += 1;\n            }\n            if n % 2 == 0 {\n     \
    \           cnt += 1;\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5u3qlrkm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp6a7u21uj.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpv8dw1f3r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpj43ycvto.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpv0k8r343.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpmf3y5kp6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1\
    \ && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n        }\n    }\n \
    \   return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpipnrhigf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpo7_c1apt.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpi_f5th_3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe2m65_sm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_j5_rncu.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpbtwj1bjq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 {\n            count += 1;\n  \
    \      }\n        if n % 2 == 1 {\n            count += 1;\n        }\n      \
    \  if n % 2 == 0 {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp4kkeusxd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgex6toah.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_zwcoip_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp3wda144_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp44232b5j.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num % 2 == 1 && num % 3 != 1 && num\
    \ % 5 != 1 && num % 7 != 1 && num % 9 != 1 {\n            counter += 1;\n    \
    \    }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmparaxqwjm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1\
    \ && n % 7 == 1 && n % 9 == 1 {\n            count += 1;\n        }\n    }\n \
    \   return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqj9rm02t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 3 == 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1pwt_ldl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvy1ui6ic.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num % 2 == 1 && num % 3 == 1 && num\
    \ % 5 == 1 && num % 7 == 1 && num % 9 == 1 {\n            counter += 1;\n    \
    \    }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpirxltdm7.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 0 {\n            if n % 10 ==\
    \ 1 {\n                if n % 100 == 0 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcgzeqamk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \            if num % 2 == 1 {\n                count += 1;\n            }\n \
    \           if num % 2 == 0 {\n                count += 1;\n            }\n  \
    \      }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpan700l4y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf0z97sr3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmphdqscrw3.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa8ffgghv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmplmoi91n_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 3 == 1 && n % 5 == 1\
    \ && n % 7 == 1 && n % 9 == 1 {\n            cnt += 1;\n        }\n    }\n   \
    \ cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf1lrr5_4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5oxg1_1r.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 2 == 0 {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpoyu9rqi4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpcwtiu3sp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0xodie_l.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxx4pau58.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7qe5wkzq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpca0iod05.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 0 && num % 2 != 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzbbzf62f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmprcp7ge5c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvewyzec6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpygjsvusi.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpp2oztji6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 != 1 && n % 2 != 3\
    \ {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_mtw86q0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbxhwpb_d.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp0icimc0n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5y1_wp5n.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpkw4zthvf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpis36wf3f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 0 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 1 && num % 10 == 1 {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpqn4aj609.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmeljvd0w.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       cnt += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n    \
    \        cnt += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n   \
    \         cnt += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n  \
    \          cnt += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n \
    \           cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp5hc6xicr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbv7edcc6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmp7avkmgat.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 && n % 2 == 1 {\n         \
    \   if nums[nums.len() - 1] % 2 == 1 {\n                counter += 1;\n      \
    \      }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmp1c69up1g.rs:11:16\n\
    \    |\n7   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n8   |     let mut counter = 0;\n9   |     for n\
    \ in nums {\n    |              ---- `nums` moved due to this implicit call to\
    \ `.into_iter()`\n10  |         if n % 2 == 1 && n % 2 == 1 {\n11  |         \
    \    if nums[nums.len() - 1] % 2 == 1 {\n    |                ^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n9   |     for n in &nums\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpml1oulyf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 3 == 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2cj3eka5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa4bo0wlg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpoc1bsdw9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxhg3tru6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 2 == 1 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpopnaf8x9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_3dgqjmp.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpp_4fobsl.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp22626whu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \            if num % 2 == 1 {\n                count += 1;\n            }\n \
    \           if num % 2 == 0 {\n                count += 1;\n            }\n  \
    \      }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp4qfx1po_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 2 == 1 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdsj_gjx4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxl8znbgl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpxq3maek4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5kz597su.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp84ggwe0y.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8a0id5_f.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpecuvkfn7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp47_z0dz0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpypds3xzc.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa96bwne2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbbsmiyi2.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpkflzn870.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                cnt += 1;\n            }\n            if num % 2 == 0 {\n\
    \                if num % 10 == 1 {\n                    cnt += 1;\n         \
    \       }\n                if num % 10 == 3 {\n                    cnt += 1;\n\
    \                }\n                if num % 10 == 5 {\n                    cnt\
    \ += 1;\n                }\n                if num % 10 == 7 {\n             \
    \       cnt += 1;\n                }\n                if num % 10 == 9 {\n   \
    \                 cnt += 1;\n                }\n            }\n        }\n   \
    \ }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0htql725.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 1 {\n            count += 1;\n\
    \        }\n        if n % 2 == 0 && n % 10 == 1 && n % 10 == 0 {\n          \
    \  count += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpb9u0ebbi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmplbrmo7ao.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp9ey0jpsj.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 0 {\n            if num % 10 == 1 {\n                count\
    \ += 1;\n            }\n            if num % 10 == 3 {\n                count\
    \ += 1;\n            }\n            if num % 10 == 5 {\n                count\
    \ += 1;\n            }\n            if num % 10 == 7 {\n                count\
    \ += 1;\n            }\n            if num % 10 == 9 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpv16g931_.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpgxpb2ot6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp03qggdir.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp7ynk1spa.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcdjlhcf5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpt9l19uac.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp3fu5z42z.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0l26_118.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa5jbs9og.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpa16aortu.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp85z_kgjz.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpx829keaf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 {\n            count += 1;\n        }\n  \
    \      if num % 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpdso22j1r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 1 && num % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx_4t4qs6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ || num % 10 == 9 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmplzq1j_ia.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \            if num % 2 == 1 {\n                count += 1;\n            }\n \
    \           if num % 2 == 0 {\n                count += 1;\n            }\n  \
    \      }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpocaz8tkp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmphzqkb7ea.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpzp19vx88.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp870xugyj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            count += 1;\n\
    \        }\n        if num % 2 == 0 && num % 2 != 1 {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3wmsppyh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                counter += 1;\n            }\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    counter += 1;\n\
    \                }\n                if num % 10 == 3 {\n                    counter\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       counter += 1;\n                }\n                if num % 10 == 7 {\n\
    \                    counter += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    counter += 1;\n                }\n        \
    \    }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmppdhxwwsv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for n in nums {\n        if n > 10 {\n            if n % 2 == 1 {\n\
    \                counter += 1;\n            }\n            if n % 2 == 0 {\n \
    \               if nums[nums.len() - 1] % 2 == 1 {\n                    counter\
    \ += 1;\n                }\n            }\n        }\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpt47po7m4.rs:15:20\n\
    \    |\n7   | fn specialFilter(nums: Vec<isize>) -> isize {\n    |           \
    \       ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n8   |     let mut counter = 0;\n9   |     for n\
    \ in nums {\n    |              ---- `nums` moved due to this implicit call to\
    \ `.into_iter()`\n...\n15  |                 if nums[nums.len() - 1] % 2 == 1\
    \ {\n    |                    ^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `nums`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for n in &nums {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       count += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n  \
    \          count += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15 {\n\
    \            count += 1;\n        }\n        if n % 10 == 7 && n % 100 != 17 {\n\
    \            count += 1;\n        }\n        if n % 10 == 9 && n % 100 != 19 {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmps8fp81vh.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe_9nvd00.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n % 2 == 0 && n % 2 != 1 && n % 2 != 3\
    \ {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3no2uisc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 {\n                if num % 10 == 1 {\n                    count += 1;\n \
    \               }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 || num % 10 == 7\
    \ {\n                    count += 1;\n                }\n                if num\
    \ % 10 == 9 {\n                    count += 1;\n                }\n          \
    \  }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpsne_gs7a.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            if num % 2 ==\
    \ 1 {\n                count += 1;\n            }\n            if num % 2 == 0\
    \ {\n                if num % 10 == 1 {\n                    count += 1;\n   \
    \             }\n                if num % 10 == 3 {\n                    count\
    \ += 1;\n                }\n                if num % 10 == 5 {\n             \
    \       count += 1;\n                }\n                if num % 10 == 7 {\n \
    \                   count += 1;\n                }\n                if num % 10\
    \ == 9 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpv0k5rz4q.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\n     \
    \       counter += 1;\n        }\n        if n % 10 == 3 && n % 100 != 13 {\n\
    \            counter += 1;\n        }\n        if n % 10 == 5 && n % 100 != 15\
    \ {\n            counter += 1;\n        }\n        if n % 10 == 7 && n % 100 !=\
    \ 17 {\n            counter += 1;\n        }\n        if n % 10 == 9 && n % 100\
    \ != 19 {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmptotsw5qt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
