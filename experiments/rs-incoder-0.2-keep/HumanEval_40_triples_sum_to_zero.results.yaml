name: HumanEval_40_triples_sum_to_zero
language: rust
results:
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        sum += l[i];\n\
    \        if sum == 0 {\n            triples_sum_to_zero = true;\n            break;\n\
    \        }\n        i += 1;\n    }\n    triples_sum_to_zero\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpful1yt4a.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpgr_rkhwj.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpq14ye101.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp2wcfvdyl.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpkh2fu7i0.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpxnioynwm.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for i in l {\n        if i == 0 {\n            triple = true;\n        } else\
    \ {\n            sum += i;\n            if sum == 0 {\n                triple\
    \ = true;\n                break;\n            }\n        }\n    }\n    triple\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg2z_rsg5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpfllgel5t.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gk0rmuq.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmlsyl2ff.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp_5jan4u8.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    while i < l.len() && j < l.len() && k < l.len()\
    \ {\n        sum += l[i];\n        i += 1;\n        sum += l[j];\n        j +=\
    \ 1;\n        sum += l[k];\n        k += 1;\n    }\n    sum == 0 && k == l.len()\
    \ - 1\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_d_i9snk.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmperx_yeqm.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n        if sum == 0 {\n    \
    \        triples_sum_to_zero = true;\n            break;\n        }\n    }\n \
    \   triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpga85mzk4.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb53yw3fl.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_7cnykj.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa31oclg8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = Vec::new();\n    for i in l {\n\
    \        if i > 0 && triples.iter().any(|&x| x == i) {\n            return false;\n\
    \        }\n        triples.push(i);\n    }\n    triples.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfdf2e9x9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpliwron5p.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ triples_sum_to_zero_counter = 0;\n    let mut triples_sum_to_zero_counter2 =\
    \ 0;\n    let mut triples_sum_to_zero_counter3 = 0;\n    let mut triples_sum_to_zero_counter4\
    \ = 0;\n    let mut triples_sum_to_zero_counter5 = 0;\n    let mut triples_sum_to_zero_counter6\
    \ = 0;\n    let mut triples_sum_to_zero_counter7 = 0;\n    let mut triples_sum_to_zero_counter8\
    \ = 0;\n    let mut triples_sum_to_zero_counter9 = 0;\n    let mut triples_sum_to_zero_counter10\
    \ = 0;\n    let mut triples_sum_to_zero_counter11 = 0;\n    let mut triples_sum_to_zero_counter12\
    \ = 0;\n    let mut triples_sum_to_zero_counter13 = 0;\n    let mut triples_sum_to_zero_counter14\
    \ = 0;\n    let mut triples_sum_to_zero_counter15 = 0;\n    let mut triples_sum_to_zero_counter16\
    \ = 0;\n    let mut triples_sum_to_zero_counter17 = 0;\n    let mut triples_sum_to_zero_counter18\
    \ = 0;\n    let mut triples_sum_to_zero_counter19 = 0;\n    let mut triples_sum_to_zero_counter20\
    \ = 0;\n    let mut triples_sum_to_zero_counter21 = 0;\n    let mut triples_sum_to_zero_counter22\
    \ = 0;\n    let mut triples_sum_to_zero_counter23 = 0;\n    let mut triples_sum_to_zero_counter24\
    \ = 0;\n    let mut triples_sum_to_zero_counter25 = 0;\n    let mut triples_sum_to_zero_counter26\
    \ = 0;\n    let mut triples_sum_to_zero_counter27 = 0;\n    let mut triples_sum_to_zero_counter28\
    \ = 0;\n    let mut triples_sum_to_zero_counter29 = 0;\n    let mut triples_sum_to_zero_counter30\
    \ = 0;\n    let mut triples_sum_to_zero_counter31 = 0;\n    let mut triples_sum_to_zero_counter32\
    \ = 0;\n    let mut triples_sum_to_zero_counter33 = 0;\n    let mut triples_sum_to_zero_counter34\
    \ = 0;\n    let mut triples_sum_to_zero_counter35 = 0;\n    let mut triples_sum_to_zero_counter36\
    \ = 0;\n    let mut triples_sum_to_zero_counter37 = 0;\n    let mut triples_sum_to_zero_counter38\
    \ = 0;\n    let mut triples_sum_to_zero_counter39 = 0;\n    let mut triples_sum_to_zero_counter40\
    \ = 0;\n    let mut triples_sum_to_zero_counter41 = 0;\n    let mut triples_sum_to_zero_counter42\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpidrn5fmn.rs:59:1\n\
    \   |\n59 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp2fcqcsdj.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoybk4jlz.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpd4s33yr4.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpysf5np0l.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp73gn35hj.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpycdexl0a.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    let mut sum\
    \ = 0;\n    for x in l {\n        sum += x;\n        triples.push((sum, sum, sum));\n\
    \    }\n    triples.iter().all(|&(_, x, _)| x == 0)\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7g74mt6l.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa12w2381.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp9wzlbdg2.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpzr4fefy5.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpn88e3exo.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpblxtglga.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgtnzb8rg.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmppg64ai3h.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl2sehugp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp3_vwj3sb.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp6ns03m6x.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for i in l {\n        if i != 0 {\n            sum += i;\n            if sum\
    \ == 0 {\n                triple = true;\n            }\n        }\n    }\n  \
    \  triple\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq9lfikvw.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    let mut sum\
    \ = 0;\n    for x in l {\n        sum += x;\n        triples.push((sum, sum, sum));\n\
    \    }\n    triples.iter().all(|&(_, x, _)| x == 0)\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppar10u6t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n        if sum == 0 {\n    \
    \        triples_sum_to_zero = true;\n            break;\n        }\n    }\n \
    \   triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_e94osv.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvy7fj3qf.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp9q6kg4g5.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_wthh0z6.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxu1c9anl.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpe4owavld.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0vhz0f0i.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for x in l {\n        if x == 0 {\n            triple = true;\n        } else\
    \ {\n            sum += x;\n        }\n        if sum == 3 {\n            return\
    \ true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp71puplv7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] > 0 {\n\
    \            sum += l[i];\n            if sum == 0 {\n                triples_sum_to_zero\
    \ = true;\n                break;\n            }\n        }\n        i += 1;\n\
    \    }\n    triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx0mw13tf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples = false;\n\
    \    for x in l {\n        if x == 0 {\n            triples = true;\n        }\
    \ else {\n            sum += x;\n        }\n        if sum == 0 {\n          \
    \  break;\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfpfcrfb5.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp9y4vrnl0.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut found = false;\n  \
    \  for &i in l {\n        sum += i;\n        if sum == 0 {\n            found\
    \ = true;\n            break;\n        }\n    }\n    found\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvgq9vwcq.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp48rerzoe.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &i in l {\n        if i != 0 {\n            sum += i;\n            if\
    \ sum == 0 {\n                triple = true;\n            }\n        }\n    }\n\
    \    triple\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_mif7xq3.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &i in l {\n        sum += i;\n        if sum == 0 {\n            triple\
    \ = true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate =\
    \ triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp417hers.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    let mut sum\
    \ = 0;\n    for x in l {\n        triples.push((x, x, x));\n        sum += x;\n\
    \    }\n    for triple in triples {\n        if triple[0] + triple[1] + triple[2]\
    \ != sum {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `(isize, isize, isize)`\n\
    \  --> /tmp/tmpyj4ojvcz.rs:22:12\n   |\n22 |         if triple[0] + triple[1]\
    \ + triple[2] != sum {\n   |            ^^^^^^^^^ help: to access tuple elements,\
    \ use: `triple.0`\n\nerror[E0608]: cannot index into a value of type `(isize,\
    \ isize, isize)`\n  --> /tmp/tmpyj4ojvcz.rs:22:24\n   |\n22 |         if triple[0]\
    \ + triple[1] + triple[2] != sum {\n   |                        ^^^^^^^^^ help:\
    \ to access tuple elements, use: `triple.1`\n\nerror[E0608]: cannot index into\
    \ a value of type `(isize, isize, isize)`\n  --> /tmp/tmpyj4ojvcz.rs:22:36\n \
    \  |\n22 |         if triple[0] + triple[1] + triple[2] != sum {\n   |       \
    \                             ^^^^^^^^^ help: to access tuple elements, use: `triple.2`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmprxy1ooj9.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpsa1r573k.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo8upxv7b.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9eex2_24.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpv5xr5n2n.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp790qmwbe.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp65thkut6.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp3ohplw2a.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n        if sum == 0 {\n    \
    \        triples_sum_to_zero = true;\n            break;\n        }\n    }\n \
    \   triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3qi1jl5g.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp71q7zh0h.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7p7r8blh.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ triples_sum_to_zero_count = 0;\n    let mut triples_sum_to_zero_sum = 0;\n \
    \   for x in l {\n        if triples_sum_to_zero_count == 3 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n        if triples_sum_to_zero_sum ==\
    \ 0 {\n            triples_sum_to_zero_sum += x;\n            triples_sum_to_zero_count\
    \ += 1;\n        } else {\n            triples_sum_to_zero_sum += x;\n       \
    \     triples_sum_to_zero_count += 1;\n            if triples_sum_to_zero_sum\
    \ == 0 {\n                triples_sum_to_zero = true;\n                break;\n\
    \            }\n        }\n    }\n    triples_sum_to_zero\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpacnj545f.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for x in l {\n        if x == 0 {\n            triple = true;\n        } else\
    \ {\n            sum += x;\n        }\n        if sum == 3 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp89u1cexc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9a_ynzp.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3hjnehh4.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples_sum_to_zero\
    \ = false;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4eevl6dy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == -1\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph3baid6u.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpak1kdgbq.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp34biaxwu.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    let mut triples_sum\
    \ = 0;\n    for &x in l {\n        if triples[triples.len() - 1][0] < x {\n  \
    \          triples.push((x, x, x));\n        } else {\n            triples_sum\
    \ += x;\n            triples[triples.len() - 1][0] += x;\n        }\n    }\n \
    \   triples_sum == 0 && triples.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgq1rganr.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0608]: cannot index\
    \ into a value of type `({integer}, {integer}, {integer})`\n  --> /tmp/tmpgq1rganr.rs:18:12\n\
    \   |\n18 |         if triples[triples.len() - 1][0] < x {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: to access tuple elements, use: `triples[triples.len() - 1].0`\n\nerror[E0608]:\
    \ cannot index into a value of type `({integer}, {integer}, {integer})`\n  -->\
    \ /tmp/tmpgq1rganr.rs:22:13\n   |\n22 |             triples[triples.len() - 1][0]\
    \ += x;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: to access tuple\
    \ elements, use: `triples[triples.len() - 1].0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfu6e56_c.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpjax7_6a2.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps77ab_bb.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = Vec::new();\n    for i in l {\n\
    \        if triples.iter().any(|&x| x == i) {\n            return true;\n    \
    \    }\n        triples.push(i);\n    }\n    triples.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3cs0ey14.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples_sum_to_zero\
    \ = false;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgp44yaxf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5dd9y033.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpogmj3mkd.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples_sum_to_zero\
    \ = false;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9updgl0j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] == l[(i\
    \ + 1) % l.len() || l[i] == l[(i + 2) % l.len() {\n            sum += l[i];\n\
    \            i += 1;\n        } else {\n            triples_sum_to_zero = triples_sum_to_zero\
    \ || sum == 0;\n            sum = 0;\n            i += 1;\n        }\n    }\n\
    \    triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `?`, `]`, or an operator, found `{`\n  -->\
    \ /tmp/tmpu5_42xkn.rs:19:52\n   |\n19 |         if l[i] == l[(i + 1) % l.len()\
    \ || l[i] == l[(i + 2) % l.len() {\n   |                                     \
    \               ^                 -^\n   |                                   \
    \                 |                 |\n   |                                  \
    \                  |                 help: `]` may belong here\n   |         \
    \                                           unclosed delimiter\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    for i in\
    \ l {\n        if l.iter().filter(|&x| x == i).count() == 3 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n    }\n    triples_sum_to_zero\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpn85xfx_a.rs:17:35\n\
    \   |\n17 |         if l.iter().filter(|&x| x == i).count() == 3 {\n   |     \
    \                              ^^ no implementation for `&isize == isize`\n  \
    \ |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp65crm7zu.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == -sum\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps1fp0wuo.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    let mut sum\
    \ = 0;\n    for &x in l {\n        triples.push((x, x, x));\n        sum += x;\n\
    \    }\n    let mut triples_sum_to_zero = false;\n    for &(x, _, _) in triples\
    \ {\n        if sum == 0 {\n            triples_sum_to_zero = true;\n        \
    \    break;\n        }\n        if sum < 0 {\n            triples_sum_to_zero\
    \ = false;\n            break;\n        }\n        sum += x;\n    }\n    triples_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2pghdhjn.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2pghdhjn.rs:22:9\n   |\n22 |     for &(x, _, _) in triples {\n\
    \   |         ^^^^^^^^^^    ------- this expression has type `Option<({integer},\
    \ {integer}, {integer})>`\n   |         |\n   |         expected tuple, found\
    \ reference\n   |\n   = note:  expected tuple `({integer}, {integer}, {integer})`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpkpjcozu5.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp10y9okuz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_y1b8g0p.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpd_vvvw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &i in l {\n        if i != 0 {\n            sum += i;\n            if\
    \ sum == 0 {\n                triple = true;\n            }\n        }\n    }\n\
    \    triple\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkd2tbwuq.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples_sum_to_zero\
    \ = false;\n    for x in l {\n        if x == 0 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n        sum += x;\n    }\n    if sum\
    \ == 0 {\n        triples_sum_to_zero = false;\n    }\n    triples_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphhla144y.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptgzhmitb.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6uuvi997.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == -sum\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnqkbabvy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpmlx4ubcn.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    for x in\
    \ l {\n        for y in triples.iter().rev() {\n            for z in triples.iter().rev()\
    \ {\n                if x + y + z == 0 {\n                    return true;\n \
    \               }\n            }\n        }\n        triples.push((x, 0, 0));\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&({integer}, {integer}, {integer})` to `isize`\n\
    \  --> /tmp/tmp25g5nlv5.rs:19:22\n   |\n19 |                 if x + y + z == 0\
    \ {\n   |                      ^ no implementation for `isize + &({integer}, {integer},\
    \ {integer})`\n   |\n   = help: the trait `Add<&({integer}, {integer}, {integer})>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp92bt8538.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] > 0 {\n\
    \            sum += l[i];\n            if sum == 0 {\n                triples_sum_to_zero\
    \ = true;\n                break;\n            }\n        }\n        i += 1;\n\
    \    }\n    triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpchv57bwz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] == 0\
    \ {\n            sum += l[i];\n            i += 1;\n        } else if sum == 0\
    \ {\n            triples_sum_to_zero = true;\n            break;\n        } else\
    \ {\n            sum += l[i];\n            i += 1;\n        }\n    }\n    triples_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx52m49j0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    for &x in\
    \ l {\n        for &mut (a, b, c) in triples.iter_mut() {\n            a += x;\n\
    \            b += x;\n            c += x;\n            if a == 0 && b == 0 &&\
    \ c == 0 {\n                return true;\n            }\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpie5inewz.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    while i < l.len() && j < l.len() && k < l.len()\
    \ {\n        sum += l[i];\n        i += 1;\n        j += 1;\n        k += 1;\n\
    \    }\n    sum == 0 && k == l.len() && j == l.len() && i == l.len()\n}\n\nfn\
    \ main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsb2t6j9m.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpvu092plh.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for x in l {\n        if x == 0 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n        sum += x;\n    }\n    if sum\
    \ == 0 {\n        triples_sum_to_zero = false;\n    }\n    triples_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph3a0km59.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkvjmj8mu.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpbgjftynn.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpdqohjfpe.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpajuah4_s.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp955w46ha.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpzakzic8o.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpr_1xvx1g.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpkv6dx693.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpk4vvp_xb.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == -1\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsh7ut8cb.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp7dex95s3.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpsdlrsexq.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpp6plgb69.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpv9wpfe24.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ixselxu.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe36fkhm9.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples = Vec::new();\n\
    \    for x in l {\n        if x == 0 {\n            triples.push(x);\n       \
    \ } else {\n            sum += x;\n            if sum == 0 {\n               \
    \ triples.push(x);\n            } else {\n                triples.push(x);\n \
    \               triples.push(-x);\n            }\n        }\n    }\n    triples.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_gdd5gxg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for x in l {\n        sum += x;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps0hua9wv.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpw1h00_h8.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz2xkx6yb.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] > 0 {\n\
    \            sum += l[i];\n            i += 1;\n        } else {\n           \
    \ if sum == 0 {\n                triples_sum_to_zero = true;\n               \
    \ break;\n            }\n            sum -= l[i];\n            i += 1;\n     \
    \   }\n    }\n    triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzxtqxzdw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmcownixw.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ triples_sum = 0;\n    let mut triples_sum_to_zero_counter = 0;\n    let mut\
    \ triples_sum_to_zero_counter2 = 0;\n    for x in l {\n        if triples_sum_to_zero_counter\
    \ == 3 {\n            triples_sum_to_zero = true;\n            break;\n      \
    \  }\n        triples_sum += x;\n        if triples_sum == 0 {\n            triples_sum_to_zero_counter++;\n\
    \        }\n        if triples_sum_to_zero_counter2 == 3 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n        triples_sum_to_zero_counter2++;\n\
    \    }\n    triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmppfu1nptx.rs:26:40\n\
    \   |\n26 |             triples_sum_to_zero_counter++;\n   |                 \
    \                       ^^ not a valid postfix operator\n   |\nhelp: use `+= 1`\
    \ instead\n   |\n26 |             { let tmp = triples_sum_to_zero_counter; triples_sum_to_zero_counter\
    \ += 1; tmp };\n   |             +++++++++++                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    26 -             triples_sum_to_zero_counter++;\n26 +             triples_sum_to_zero_counter\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmppfu1nptx.rs:32:37\n\
    \   |\n32 |         triples_sum_to_zero_counter2++;\n   |                    \
    \                 ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n32 |         { let tmp = triples_sum_to_zero_counter2; triples_sum_to_zero_counter2\
    \ += 1; tmp };\n   |         +++++++++++                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    32 -         triples_sum_to_zero_counter2++;\n32 +         triples_sum_to_zero_counter2\
    \ += 1;\n   | \n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzs33yz3_.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmphauihb9j.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp7g8a11cv.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp5p0iejz.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3gab3gk_.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6z_deq_.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmphadpw1o4.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpwqth0h1c.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpkb_7ra8l.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 || sum == -sum\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi7cjjvwj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpyn1qnjkj.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for x in l {\n        if x == 0 {\n            triple = true;\n        } else\
    \ {\n            sum += x;\n        }\n        if sum == 3 {\n            return\
    \ true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpai8rfpqr.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_pmuxogg.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpwwtikrga.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmplsr2q4jt.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpewp9lv0c.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triples_sum_to_zero\
    \ = false;\n    for &i in l {\n        sum += i;\n        if sum == 0 {\n    \
    \        triples_sum_to_zero = true;\n            break;\n        }\n    }\n \
    \   triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjdnie0pz.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsff74ytu.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpu8kvkgak.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &x in l {\n        if x == 0 {\n            triple = true;\n        }\
    \ else {\n            sum += x;\n        }\n        if sum == 3 {\n          \
    \  return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr490j7hq.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpd1284_5m.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpwextnin4.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![];\n    for i in l {\n   \
    \     for j in l {\n            for k in l {\n                if i + j + k ==\
    \ 0 {\n                    triples.push((i, j, k));\n                }\n     \
    \       }\n        }\n    }\n    triples.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp4s48j266.rs:17:18\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut triples = vec![];\n16  |     for\
    \ i in l {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n    |    \
    \          +\n\nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmp4s48j266.rs:18:22\n\
    \   |\n14 | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n   |            \
    \            - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n17 |         for j in l {\n   |                  - `l`\
    \ moved due to this implicit call to `.into_iter()`\n18 |             for k in\
    \ l {\n   |                      ^ value used here after move\n   |\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n   |\n17 |         for j in &l {\n   |                  +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    while i < l.len() {\n        sum += l[i];\n\
    \        if sum == 0 {\n            return true;\n        }\n        i += 1;\n\
    \    }\n    while j < l.len() {\n        sum += l[j];\n        if sum == 0 {\n\
    \            return true;\n        }\n        j += 1;\n    }\n    while k < l.len()\
    \ {\n        sum += l[k];\n        if sum == 0 {\n            return true;\n \
    \       }\n        k += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkm0nshg.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == -sum\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiyntwfxp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp2pdm2v2b.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![];\n    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n        triples.push((x, sum, 0));\n   \
    \ }\n    triples.sort();\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ triples_sum_to_zero_count = 0;\n    let mut triples_sum_to_zero_sum = 0;\n \
    \   for (x, sum, triple) in triples {\n        if triples_sum_to_zero_count ==\
    \ 3 {\n            triples_sum_to_zero_sum += triple;\n            triples_sum_to_zero_count\
    \ = 3;\n        }\n        if sum == 0 {\n            triples_sum_to_zero_count++;\n\
    \        }\n        if triples_sum_to_zero_count == 3 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n    }\n    triples_sum_to_zero\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpb4qzi6v7.rs:31:38\n\
    \   |\n31 |             triples_sum_to_zero_count++;\n   |                   \
    \                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n31 |             { let tmp = triples_sum_to_zero_count; triples_sum_to_zero_count\
    \ += 1; tmp };\n   |             +++++++++++                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    31 -             triples_sum_to_zero_count++;\n31 +             triples_sum_to_zero_count\
    \ += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjlqzwtyu.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1utxdow_.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    for x in\
    \ l {\n        for y in triples.iter().rev() {\n            let mut z = x + y;\n\
    \            if z == 0 {\n                triples.push((x, y, z));\n         \
    \       break;\n            }\n        }\n    }\n    triples.len() == 3\n}\n\n\
    fn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&({integer}, {integer}, {integer})` to `isize`\n\
    \  --> /tmp/tmpv30u0aqs.rs:18:27\n   |\n18 |             let mut z = x + y;\n\
    \   |                           ^ no implementation for `isize + &({integer},\
    \ {integer}, {integer})`\n   |\n   = help: the trait `Add<&({integer}, {integer},\
    \ {integer})>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv30u0aqs.rs:20:34\n   |\n20 |                 triples.push((x,\
    \ y, z));\n   |                                  ^ expected integer, found reference\n\
    \   |\n   = note:   expected type `{integer}`\n           found reference `&(isize,\
    \ {integer}, {integer})`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqjutdx0k.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm9fa6maq.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nz2ft00.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnkd97j2.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp5429gdn_.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0pgi3xrh.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = Vec::new();\n    let mut triples_sum_to_zero\
    \ = false;\n    for i in l {\n        if triples.contains(&i) {\n            triples.push(i);\n\
    \        } else {\n            triples.push(i);\n            triples_sum_to_zero\
    \ = true;\n        }\n    }\n    triples_sum_to_zero\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu26yatos.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpxsvu4gmj.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpjsrmtmbu.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpvzorw7pf.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 || sum == l.len() - 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplwuev6g5.rs:19:24\n   |\n\
    19 |     sum == 0 || sum == l.len() - 3\n   |                        ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     sum ==\
    \ 0 || sum == (l.len() - 3).try_into().unwrap()\n   |                        +\
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpa55fs5l_.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp73a9w75c.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    while i < l.len() {\n        sum += l[i];\n\
    \        if sum == 0 {\n            i += 1;\n            continue;\n        }\n\
    \        if sum < 0 {\n            i += 1;\n            continue;\n        }\n\
    \        if sum > 0 {\n            i += 1;\n            continue;\n        }\n\
    \        if j == i {\n            i += 1;\n            continue;\n        }\n\
    \        if k == i {\n            i += 1;\n            continue;\n        }\n\
    \        if l[j] == l[k] {\n            i += 1;\n            continue;\n     \
    \   }\n        if l[j] > l[k] {\n            i += 1;\n            continue;\n\
    \        }\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8ppvod2_.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp2yd2k2a_.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmptx_pjh5a.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqs_mheld.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &x in l {\n        sum += x;\n        if sum == 0 {\n            triple\
    \ = true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate =\
    \ triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbs3aro2j.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpixultzau.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = Vec::new();\n    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n        triples.push(i);\n    }\n\
    \    let mut triples_sum_to_zero = false;\n    for &i in triples {\n        if\
    \ sum == 0 {\n            triples_sum_to_zero = true;\n            break;\n  \
    \      }\n        sum += i;\n    }\n    triples_sum_to_zero\n}\n\nfn main() {\n\
    \    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3,\
    \ 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoj8cwh0n.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for x in l {\n        if x == 0 {\n            sum += x;\n        } else {\n\
    \            sum += x;\n            triple = true;\n        }\n        if sum\
    \ == 0 {\n            return triple;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_t36xju1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5whpqq_1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuzm_1vwv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] > 0 {\n\
    \            sum += l[i];\n            i += 1;\n        } else {\n           \
    \ if sum == 0 {\n                triples_sum_to_zero = true;\n            } else\
    \ {\n                triples_sum_to_zero = false;\n            }\n           \
    \ sum = 0;\n            i += 1;\n        }\n    }\n    triples_sum_to_zero\n}\n\
    \nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvc29znsc.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        sum += l[i];\n        if sum == 0 {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7c2ctyrk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ triples_sum = 0;\n    let mut triples_sum_to_zero = false;\n    for x in l {\n\
    \        if triples_sum_to_zero {\n            break;\n        }\n        if triples_sum\
    \ == 0 {\n            triples_sum_to_zero = true;\n            triples_sum = x\n\
    \        } else {\n            triples_sum += x;\n        }\n    }\n    triples_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0r0f8gse.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && triples_sum_to_zero(vec![x,\
    \ x - 1, x - 2]))\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6e68e6_1.rs:15:67\n   |\n\
    15 |     l.iter().fold(false, |acc, x| acc && triples_sum_to_zero(vec![x, x -\
    \ 1, x - 2]))\n   |                                                          \
    \         ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |     l.iter().fold(false, |acc, x| acc && triples_sum_to_zero(vec![*x,\
    \ x - 1, x - 2]))\n   |                                                      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples_sum_to_zero = false;\n    let mut\
    \ sum = 0;\n    for i in l {\n        sum += i;\n        if sum == 0 {\n     \
    \       triples_sum_to_zero = true;\n            break;\n        }\n    }\n  \
    \  triples_sum_to_zero\n}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwutad8j9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut triples = vec![(0, 0, 0)];\n    for x in\
    \ l {\n        for (i, j, k) in triples.iter().enumerate() {\n            if x\
    \ + i + j + k == 0 {\n                triples.insert(i, (x, y, z));\n        \
    \        return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmpaqvhgjq2.rs:19:39\n\
    \   |\n19 |                 triples.insert(i, (x, y, z));\n   |              \
    \                         ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `z` in this scope\n  --> /tmp/tmpaqvhgjq2.rs:19:42\n\
    \   |\n19 |                 triples.insert(i, (x, y, z));\n   |              \
    \                            ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaqvhgjq2.rs:17:13\n   |\n\
    17 |         for (i, j, k) in triples.iter().enumerate() {\n   |             ^^^^^^^^^\
    \    -------------------------- this expression has type `Option<(usize, &({integer},\
    \ {integer}, {integer}))>`\n   |             |\n   |             expected a tuple\
    \ with 2 elements, found one with 3 elements\n   |\n   = note: expected tuple\
    \ `(usize, &({integer}, {integer}, {integer}))`\n              found tuple `(_,\
    \ _, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1bzpb2xu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp18_qkwiv.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpjj1c_0ve.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp6bh_dtyq.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt2n3mcxo.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for x in l {\n        sum += x;\n        if sum == 0 {\n            triple\
    \ = true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate =\
    \ triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp09wc4cbm.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0dtpu7k.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppr6fv76x.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp_sjj3mbs.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && x.is_zero())\n\
    }\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n \
    \   assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n  \
    \  assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100,\
    \ 3, 5, -100]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpv6wytfz1.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.is_zero())\n   |                                         \
    \   ^^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut triple = false;\n \
    \   for &i in l {\n        sum += i;\n        if sum == 0 {\n            triple\
    \ = true;\n        }\n    }\n    triple\n}\n\nfn main() {\n    let candidate =\
    \ triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxiufmawc.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfn triples_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n  \
    \  assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp0ovlxlct.rs:19:17\n\
    \    |\n14  | fn triples_sum_to_zero(l: Vec<isize>) -> bool {\n    |         \
    \               - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l\
    \ {\n    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     sum == 0 && l.len() == 3\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
