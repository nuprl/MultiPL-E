name: HumanEval_65_circular_shift
language: rust
results:
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits[i as usize]);\n    }\n    s.push(*digits[shift\
    \ as usize]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpyimx1jw7.rs:12:17\n\
    \   |\n12 |         s.push(*digits[i as usize]);\n   |                 ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpyimx1jw7.rs:14:13\n   |\n14 |     s.push(*digits[shift as usize]);\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut remainder = x;\n\
    \    let mut i = shift;\n    while i > 0 {\n        if remainder >= 10 {\n   \
    \         result.push(remainder % 10);\n            remainder /= 10;\n       \
    \     i += 1;\n        } else {\n            result.push(remainder);\n       \
    \     remainder = 0;\n            i += 1;\n        }\n    }\n    if remainder\
    \ > 0 {\n        result.push(remainder);\n    }\n    result.reverse();\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjk8ww915.rs:14:25\n   |\n\
    14 |             result.push(remainder % 10);\n   |                         ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjk8ww915.rs:18:25\n\
    \   |\n18 |             result.push(remainder);\n   |                        \
    \ ^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjk8ww915.rs:24:21\n   |\n24 |         result.push(remainder);\n\
    \   |                     ^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpjk8ww915.rs:26:12\n   |\n26 |     result.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx0wkpgcm.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpx0wkpgcm.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx0wkpgcm.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s[digits.len() - shift..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplyu9hv2_.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmplyu9hv2_.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmplyu9hv2_.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplyu9hv2_.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmplyu9hv2_.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not impleme"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_digits().iter() {\n        let digit = d.unwrap();\n        let digit\
    \ = digit << shift | digit >> shift | carry;\n        carry = digit >> 31;\n \
    \       s += digit.to_string();\n    }\n    if carry != 0 {\n        s += &format!(\"\
    {}\", carry);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpwfb886uv.rs:11:17\n   |\n11 |     for &d in x.to_digits().iter()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ d in x.to_digits().iter() {\n        let digit = d.unwrap();\n        let digit\
    \ = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpde9m7rjb.rs:11:16\n   |\n11 |     for d in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string().chars().nth(i).unwrap();\n    }\n    s += x.to_string().chars().nth(shift).unwrap();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0znhs55l.rs:11:40\n   |\n\
    11 |         s += x.to_string().chars().nth(i).unwrap();\n   |               \
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n11 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0znhs55l.rs:11:14\n   |\n11 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0znhs55l.rs:13:36\n\
    \   |\n13 |     s += x.to_string().chars().nth(shift).unwrap();\n   |        \
    \                            ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     s += x.to_string().chars().nth(shift.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0znhs55l.rs:13:10\n   |\n13 |     s += x.to_string().chars().nth(shift).unwrap();\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        if carry > 0 {\n\
    \            s.insert(0, &digits[digits.len() - i - 1]);\n        }\n        let\
    \ digit = digits.chars().nth(i).unwrap();\n        digit = digit - '0';\n    \
    \    carry = digit / 10;\n        digit = digit % 10;\n        s.insert(0, digit.to_string());\n\
    \    }\n    if carry > 0 {\n        s.insert(0, &digits[digits.len() - shift].to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu8knqb5k.rs:14:48\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i - 1]);\n   |           \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpu8knqb5k.rs:14:46\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i - 1]);\n   |           \
    \                                   ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu8knqb5k.rs:14:26\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i - 1]);\n   |    \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu8knqb5k.rs:14:25\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i - 1]);\n   |    \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n14 -             s.insert(0, &digits[digits.len()\
    \ - i - 1]);\n14 +             s.inser"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwqh7e69x.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpwqh7e69x.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpwqh7e69x.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe7b_t4rs.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpe7b_t4rs.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe7b_t4rs.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ i in 0..shift {\n        if x >= 10 {\n            s.push_str(&format!(\"{}{}\"\
    , x / 10, &format!(\"{}\", x%10)));\n            x /= 10;\n        } else {\n\
    \            s.push_str(&format!(\"{}{}\", x, &format!(\"{}\", x)));\n       \
    \     x = 0;\n        }\n        carry += 1;\n    }\n    if carry > 0 {\n    \
    \    s.push_str(&format!(\"{}\", &format!(\"{}\", x)));\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpbxgy2ire.rs:11:9\n   |\n11\
    \ |     for i in 0..shift {\n   |         ^ help: if this is intentional, prefix\
    \ it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpbxgy2ire.rs:14:13\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n14 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpbxgy2ire.rs:17:13\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n17 |\
    \             x = 0;\n   |             ^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string().chars().enumerate().map(|(i, c)| {\n        let digit\
    \ = match c {\n            '0' => 0,\n            '1' => 1,\n            '2' =>\
    \ 2,\n            '3' => 3,\n            '4' => 4,\n            '5' => 5,\n  \
    \          '6' => 6,\n            '7' => 7,\n            '8' => 8,\n         \
    \   '9' => 9,\n            _ => panic!(\"Unexpected character in digits: {}\"\
    , c),\n        };\n        s += if i < shift {\n            digit + carry\n  \
    \      } else {\n            digit - carry\n        };\n        carry = digit\
    \ / 10;\n        digit %= 10;\n        digit\n    });\n    if carry > 0 {\n  \
    \      s += &format!(\"{}\", carry);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqeeqtq61.rs:25:21\n   |\n\
    25 |         s += if i < shift {\n   |                     ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |         s += if i < shift.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqeeqtq61.rs:26:13\n   |\n26 |             digit + carry\n\
    \   |             ^^^^^^^^^^^^^ expected `&str`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqeeqtq61.rs:28:13\n   |\n28 |             digit\
    \ - carry\n   |             ^^^^^^^^^^^^^ expected `&str`, found integer\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[digits.len() - 1 - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx135ac36.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpx135ac36.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpx135ac36.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmigkrzkk.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmigkrzkk.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let digit = remainder % 10;\n        remainder\
    \ = remainder / 10;\n        digits.push(digit.to_string());\n    }\n    digits.reverse();\n\
    \    if shift > digits.len() {\n        digits.reverse();\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxfaabic8.rs:14:21\n   |\n\
    14 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpxfaabic8.rs:16:12\n\
    \   |\n16 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxfaabic8.rs:17:16\n   |\n17 |     if shift > digits.len() {\n \
    \  |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \                        ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpxfaabic8.rs:18:16\n\
    \   |\n18 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n    }\n    if\
    \ shift > s.len() {\n        s.append(&s[s.len() - shift..]);\n    } else {\n\
    \        s.append(&s[0..shift]);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj1mx7ws2.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj1mx7ws2.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpj1mx7ws2.rs:21:16\n   |\n21 |  \
    \   if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `append` found for struct `String` in the current scope\n  --> /tmp/tmpj1mx7ws2.rs:22:11\n\
    \   |\n22 |         s.append(&s[s.len() - shift..]);\n   |           ^^^^^^ method\
    \ not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1mx7ws2.rs:22:31\n\
    \   |\n22 |         s.append(&s[s.len() - shift..]);\n   |                   \
    \            ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpj1mx7ws2.rs:22:29\n   |\n22 |         s.append(&s[s.len()\
    \ - shift..]);\n   |                             ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpj1mx7ws2.rs:24:11\n   |\n24 |         s.append(&s[0..shift]);\n   |\
    \           ^^^^^^ method not found in `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpj1mx7ws2.rs:24:19\n\
    \   |\n24 |      "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits[digits.len() - i - 1]);\n   \
    \ }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ih77o1f.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp7ih77o1f.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp7ih77o1f.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ih77o1f.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp7ih77o1f.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `u"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift]\n        }\n    }).collect::<String>();\n\
    \    digits.reverse();\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp487bfb63.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp487bfb63.rs:14:40\n   |\n14 |             c.to_string()\
    \ + digits[i - shift]\n   |                                        ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp487bfb63.rs:14:38\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                                      ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp487bfb63.rs:14:29\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                             ^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp487bfb63.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    loop {\n        if shift >\
    \ x.len() {\n            s.reverse();\n            return s;\n        }\n    \
    \    let digit = x % 10;\n        x /= 10;\n        s += digit.to_string();\n\
    \        shift -= 1;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpgckrsu6b.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpgckrsu6b.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgckrsu6b.rs:17:14\n\
    \   |\n17 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..digits.len() + shift].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdkxkgljn.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpdkxkgljn.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdkxkgljn.rs:11:38\n   |\n11 |     digits = digits[..digits.len()\
    \ + shift].to_string();\n   |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpdkxkgljn.rs:11:36\n   |\n11 |     digits = digits[..digits.len() + shift].to_string();\n\
    \   |                                    ^ no implementation for `usize + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ d in x.to_string().chars().cloned() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_string()\n \
    \   } else {\n        s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmptwj49nly.rs:11:36\n     |\n11   |     for d in x.to_string().chars().cloned()\
    \ {\n     |                                    ^^^^^^ expected reference, found\
    \ `char`\n     |\n     = note: expected reference `&_`\n                     found\
    \ type `char`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<Chars<'_> as Iterator>::Item == &_`\n  --> /tmp/tmptwj49nly.rs:11:14\n\
    \   |\n11 |     for d in x.to_string().chars().cloned() {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found reference\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Chars<'_>>`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `Cloned<Chars<'_>>`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmptwj49nly.rs:11:14\n   |\n11 |     for d in x.to_string().chars().cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n  \
    \ = note: required because of the requirements on the impl of `Iterator` for `Cloned<Chars<'_>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptwj49nly.rs:18:14\n   |\n18 |\
    \         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n   | \
    \             |\n   |              expected `&str`, found struct `String`\n  \
    \ |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptwj49nly.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptwj49nly.rs:21:21\n   |\n21 |         s[s.len() - "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1) - i];\n    }\n\
    \    s + &digits[(digits.len() - 1) - shift]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1s2_0j19.rs:12:43\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp1s2_0j19.rs:12:41\n   |\n12 | \
    \        s += &digits[(digits.len() - 1) - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp1s2_0j19.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1s2_0j19.rs:14:38\n\
    \   |\n14 |     s + &digits[(digits.len() - 1) - shift]\n   |                \
    \                      ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp1s2_0j19.rs:14:36\n   |\n\
    14 |     s + &digits[(digits.len() - 1) - shift]\n   |                       \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not imple"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[digits.len() - 1 - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbxsxk189.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpbxsxk189.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpbxsxk189.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += &x.to_string()[(i + shift) % x.len()];\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkl6808ic.rs:11:45\n   |\n11 |         s += &x.to_string()[(i\
    \ + shift) % x.len()];\n   |                                             ^^^ method\
    \ not found in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpkl6808ic.rs:11:15\n   |\n11 |         s += &x.to_string()[(i\
    \ + shift) % x.len()];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += digits[i % digits.len()];\n    }\n    s[digits.len()\
    \ - shift..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwr7dchyt.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpwr7dchyt.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmpwr7dchyt.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwr7dchyt.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpwr7dchyt.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits.chars().nth(i + shift).unwrap()\n        }\n\
    \    }).collect();\n    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpolr0hmji.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpolr0hmji.rs:14:52\n   |\n14 |             c.to_string()\
    \ + digits.chars().nth(i + shift).unwrap()\n   |                             \
    \                       ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmpolr0hmji.rs:14:50\n   |\n14 | \
    \            c.to_string() + digits.chars().nth(i + shift).unwrap()\n   |    \
    \                                              ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpolr0hmji.rs:14:29\n   |\n14 |             c.to_string()\
    \ + digits.chars().nth(i + shift).unwrap()\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpolr0hmji.rs:17:12\n\
    \   |\n17 |     digits.reverse().join(\"\")\n   |            ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwv99sfo2.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwv99sfo2.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..digits.len() + shift].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7shwhvi0.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp7shwhvi0.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7shwhvi0.rs:11:38\n   |\n11 |     digits = digits[..digits.len()\
    \ + shift].to_string();\n   |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp7shwhvi0.rs:11:36\n   |\n11 |     digits = digits[..digits.len() + shift].to_string();\n\
    \   |                                    ^ no implementation for `usize + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp27bxff85.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp27bxff85.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp27bxff85.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp27bxff85.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperwbqm4g.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmperwbqm4g.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmperwbqm4g.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmperwbqm4g.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_sodzdrb.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_sodzdrb.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift];\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsll04b5h.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpsll04b5h.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpsll04b5h.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsll04b5h.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift];\n   |                     \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpsll04b5h.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    let mut shift = shift % digits.len();\n    if shift > 0 {\n        digits.reverse();\n\
    \    }\n    for c in digits.chars() {\n        if shift > 0 {\n            result\
    \ += c.to_string();\n            shift -= 1;\n        } else {\n            result\
    \ += c;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpndb31ze2.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpndb31ze2.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpndb31ze2.rs:13:16\n   |\n13 |         digits.reverse();\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpndb31ze2.rs:17:23\n\
    \   |\n17 |             result += c.to_string();\n   |                       ^^^^^^^^^^^^^\n\
    \   |                       |\n   |                       expected `&str`, found\
    \ struct `String`\n   |                       help: consider borrowing here: `&c.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpndb31ze2.rs:20:23\n   |\n20 |\
    \             result += c;\n   |                       ^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = 0;\n    while i\
    \ < x.len() {\n        if i >= shift {\n            s += &x[i..];\n          \
    \  break;\n        }\n        s += &x[i..i + 1];\n        i += 1;\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpirlqml84.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpirlqml84.rs:13:19\n   |\n\
    13 |             s += &x[i..];\n   |                   ^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpirlqml84.rs:16:15\n\
    \   |\n16 |         s += &x[i..i + 1];\n   |               ^^^^^^^^^^^\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.chars().enumerate().for_each(|(i,\
    \ c)| {\n        if i >= shift {\n            digits.insert(i, c);\n        }\n\
    \    });\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoeg0rzcr.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn466sn04.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn466sn04.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits);\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpum08op7x.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpum08op7x.rs:13:18\n \
    \  |\n10 |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n13 |         digits = digits.chars().nth(digits.len()\
    \ - 1);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Option<char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpum08op7x.rs:15:12\n   |\n15 |     s.push(*digits);\n   |      \
    \      ^^^^^^^ expected `char`, found `str`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphqkdp7h8.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmphqkdp7h8.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmphqkdp7h8.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    s += digits;\n    s[..s.len()-shift].to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdnf3rfx.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpwdnf3rfx.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwdnf3rfx.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdnf3rfx.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdnf3rfx.rs:15:17\n\
    \   |\n15 |     s[..s.len()-shift].to_string()\n   |                 ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpwdnf3rfx.rs:15:16\n   |\n15 |     s[..s.len()-shift].to_string()\n\
    \   |                ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpj3d_b_mn.rs:75:55\n\
    \   |\n75 |     for i in s.chars().rposition(|c| c >= '0' && c <= '\n   |    \
    \                                                   ^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    for i in 0..shift {\n        result.push(*digits.chars().nth(i).unwrap());\n\
    \    }\n    result.push(*digits.chars().nth(shift).unwrap());\n    result\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphbzjyvna.rs:12:41\n   |\n\
    12 |         result.push(*digits.chars().nth(i).unwrap());\n   |             \
    \                            ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         result.push(*digits.chars().nth(i.try_into().unwrap()).unwrap());\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmphbzjyvna.rs:12:21\n   |\n\
    12 |         result.push(*digits.chars().nth(i).unwrap());\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmphbzjyvna.rs:14:37\n   |\n14 |     result.push(*digits.chars().nth(shift).unwrap());\n\
    \   |                                     ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n14 |     result.push(*digits.chars().nth(shift.try_into().unwrap()).unwrap());\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmphbzjyvna.rs:14:17\n   |\n\
    14 |     result.push(*digits.chars().nth(shift).unwrap());\n   |             \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n    }\n    s[s.len()\
    \ - shift..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp33idgzre.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp33idgzre.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp33idgzre.rs:21:17\n   |\n21 |  \
    \   s[s.len() - shift..].to_string()\n   |                 ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp33idgzre.rs:21:15\n\
    \   |\n21 |     s[s.len() - shift..].to_string()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits);\n        digits = digits.chars().nth(digits.len()\
    \ - i + 1).collect();\n    }\n    s.push(*digits);\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppen2yzri.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppen2yzri.rs:13:52\n \
    \  |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                    ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmppen2yzri.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmppen2yzri.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppen2yzri.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for d in x.to_string().chars().rev()\
    \ {\n        if d > '9' {\n            s.push('0');\n        }\n        s.push(d);\n\
    \    }\n    if shift > s.len() {\n        s.push('0');\n    }\n    s[..shift].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpg9rvva.rs:16:16\n   |\n\
    16 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmphpg9rvva.rs:19:5\n\
    \   |\n19 |     s[..shift].to_string()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    if shift > 0 {\n        digits\
    \ = digits.chars().skip_while(|c| c != '0').collect();\n    }\n    for c in digits.chars()\
    \ {\n        if shift > 0 {\n            result += c.to_string();\n          \
    \  shift -= 1;\n        } else {\n            result += c.to_string() + &digits[digits.len()\
    \ - 1 - shift];\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpusvm65rp.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpusvm65rp.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpusvm65rp.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().skip_while(|c| c != '0').collect();\n\
    \   |                                                  ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpusvm65rp.rs:17:23\n   |\n17 |  \
    \           result += c.to_string();\n   |                       ^^^^^^^^^^^^^\n\
    \   |                       |\n   |                       expected `&str`, found\
    \ struct `String`\n   |                       help: consider borrowing here: `&c.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpusvm65rp.rs:20:66\n   |\n20 |\
    \             result += c.to_string() + &digits[digits.len() - 1 - shift];\n \
    \  |                                                                  ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpusvm65rp.rs:20:64\n   |\n20 |             result += c.to_string()\
    \ + &digits[digits.len() - 1 - shift];\n   |                                 \
    \                               ^ no implem"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i as u32);\n    }\n \
    \   for i in 0..shift {\n        s += &s[-(i + 1)..];\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpa3qvf075.rs:16:15\n   |\n16 |         s += &s[-(i + 1)..];\n  \
    \ |               ^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n       \
    \ let digit = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph6g4lp5h.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqf27i1hi.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpqf27i1hi.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpqf27i1hi.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_digits() {\n        let digit = d.to_digit(10);\n        let digit\
    \ = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_char();\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry.to_digit(10)).to_char();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpyffnber9.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `{integer}` in the current scope\n\
    \  --> /tmp/tmpyffnber9.rs:18:35\n   |\n18 |         s += &format!(\"{}\", carry.to_digit(10)).to_char();\n\
    \   |                                   ^^^^^^^^ method not found in `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ >= shift {\n        i -= shift;\n        s.push(i);\n    }\n    s.push(i);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdnkbucm.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkdnkbucm.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1) -\
    \ i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphbscyu76.rs:12:54\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |         \
    \                                             ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmphbscyu76.rs:12:52\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |  \
    \                                                  ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmphbscyu76.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - 1) - i]);\n   |  \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for _ in 0..shift {\n        result.push_str(&digits[digits.len() - 1]);\n\
    \        digits.remove_suffix(1);\n    }\n    result.push_str(&digits);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpclytn_6b.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[digits.len() - 1]);\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `remove_suffix` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpclytn_6b.rs:13:16\n   |\n13 | \
    \        digits.remove_suffix(1);\n   |                ^^^^^^^^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += digits[digits.len() - 1 - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxq3prp54.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpxq3prp54.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpxq3prp54.rs:12:14\n   |\n12 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    if shift > 0 {\n        digits\
    \ = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n    }\n   \
    \ result.push_str(&digits);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbjkytlz1.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpbjkytlz1.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbjkytlz1.rs:13:52\n\
    \   |\n13 |         digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                    ^^^\n   |           \
    \                                         |\n   |                            \
    \                        expected `&char`, found `char`\n   |                \
    \                                    help: consider borrowing here: `&'0'`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbjkytlz1.rs:13:62\n   |\n13 |  \
    \       digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                              ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         digits = digits.chars().skip_while(|c|\
    \ c < '0').take(shift.try_into().unwrap()).collect();\n   |                  \
    \                                                 ++++++++++++++++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i);\n    }\n    s[..shift].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp2lmouut2.rs:15:5\n   |\n15 |     s[..shift].to_string()\n   | \
    \    ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeTo<isize>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpf05fa7n0.rs:10:12\n   |\n10 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string();\n    let mut digits_len = digits.length();\n   \
    \ while digits_len > shift {\n        digits = digits.chars().nth(digits_len -\
    \ shift).collect::<String>();\n        carry = digits[digits_len - shift].to_digit(10).unwrap();\n\
    \        digits = &digits[digits_len - shift - 1];\n        digits_len -= shift;\n\
    \    }\n    digits = digits.chars().nth(digits_len).collect::<String>();\n   \
    \ digits = &digits[digits_len];\n    if carry > 0 {\n        s += &format!(\"\
    {}{}\", digits, carry);\n    } else {\n        s += digits;\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp17k99kdo.rs:12:33\n   |\n12 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ help: there\
    \ is an associated function with a similar name: `len`\n\nerror[E0599]: `Option<char>`\
    \ is not an iterator\n   --> /tmp/tmp17k99kdo.rs:14:57\n    |\n14  |         \
    \  digits = digits.chars().nth(digits_len - shift).collect::<String>();\n    |\
    \                                                           ^^^^^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17k99kdo.rs:16:18\n\
    \   |\n11 |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n16 |         digits = &digits[digits_len -\
    \ shift - 1];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found reference\n   |\n   = note: expected struct `String`\n\
    \           found reference `&_`\nhelp: consider removing the borrow\n   |\n16\
    \ -         digits = &digits[digits_len - shift - 1];\n16 +         digits = digits[digits_len\
    \ - shift - 1];\n   | \n\nerror[E0277]: can't compare `usize` with `isize`\n \
    \ --> /tmp/tmp17k99kdo.rs:13:22\n   |\n13 |     while digits_len > shift {\n \
    \  |                      ^ no implementation for `usize < isize` and `usize >\
    \ isize`\n   |\n   = help: the trait `PartialOrd<isize>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  -->\
    \ /tmp/tmp17k99kdo.rs:14:48\n   |\n14 |         digits = digits.chars().nth(digits_len\
    \ - shift).collect::<String>();\n   |                                        \
    \        ^ no implementation fo"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmt_9wihd.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmt_9wihd.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfubw6iqf.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpfubw6iqf.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfubw6iqf.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdqxnj4y.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpkdqxnj4y.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpkdqxnj4y.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n       \
    \ let digit = if carry > 0 {\n            digit + shift\n        } else {\n  \
    \          digit - shift\n        };\n        s += digit.to_string();\n      \
    \  carry = digit >> 31;\n    }\n    if carry > 0 {\n        s += \"1\".to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76ja1qiq.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp76ja1qiq.rs:22:14\n  \
    \ |\n22 |         s += \"1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&\"1\".to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ i in 0..shift {\n        let digit = x % 10;\n        carry = digit + carry;\n\
    \        s += digit.to_string();\n        x /= 10;\n    }\n    if carry > 0 {\n\
    \        s += carry.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbsv8u5bq.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbsv8u5bq.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_slt9qz9.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp_slt9qz9.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp_slt9qz9.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi3mo_6of.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi3mo_6of.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut remainder = x;\n  \
    \  for i in 0..shift {\n        if remainder < 10 {\n            s.push_str(&format!(\"\
    {}\", remainder));\n            remainder = 0;\n        } else {\n           \
    \ remainder -= 10;\n        }\n    }\n    if remainder > 0 {\n        s.push_str(&format!(\"\
    {}\", remainder));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"80\"`,\n right: `\"001\"`', /tmp/tmpxw6_1kpo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1de7czh.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpf1de7czh.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf1de7czh.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpf1de7czh.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string().chars().nth(i).unwrap();\n    }\n    s += x.to_string().chars().nth(shift).unwrap();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76zy6r43.rs:11:40\n   |\n\
    11 |         s += x.to_string().chars().nth(i).unwrap();\n   |               \
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n11 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp76zy6r43.rs:11:14\n   |\n11 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp76zy6r43.rs:13:36\n\
    \   |\n13 |     s += x.to_string().chars().nth(shift).unwrap();\n   |        \
    \                            ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     s += x.to_string().chars().nth(shift.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp76zy6r43.rs:13:10\n   |\n13 |     s += x.to_string().chars().nth(shift).unwrap();\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[digits.len() - i - 1].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmlimxa4s.rs:12:48\n   |\n\
    12 |         result.push_str(&digits[digits.len() - i - 1].to_string());\n   |\
    \                                                ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpmlimxa4s.rs:12:46\n\
    \   |\n12 |         result.push_str(&digits[digits.len() - i - 1].to_string());\n\
    \   |                                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpmlimxa4s.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[digits.len() - i - 1].to_string());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz1blz2kd.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz1blz2kd.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_digits() {\n        let digit = d.unwrap();\n        let digit =\
    \ digit << shift | digit >> -shift;\n        s += if carry > 0 {\n           \
    \ digit | 1\n        } else {\n            digit\n        };\n        carry =\
    \ digit & 1;\n    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpia0evlng.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ no implementation for `&str | {integer}`\n  --> /tmp/tmpia0evlng.rs:15:19\n\
    \   |\n15 |             digit | 1\n   |                   ^ no implementation\
    \ for `&str | {integer}`\n   |\n   = help: the trait `BitOr<{integer}>` is not\
    \ implemented for `&str`\n\nerror[E0369]: no implementation for `&str & {integer}`\n\
    \  --> /tmp/tmpia0evlng.rs:19:23\n   |\n19 |         carry = digit & 1;\n   |\
    \                 ----- ^ - {integer}\n   |                 |\n   |          \
    \       &str\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64k7nlm8.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp64k7nlm8.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp64k7nlm8.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp64k7nlm8.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        digits.push_str(&format!(\"{}\", remainder\
    \ % 10));\n        remainder = remainder / 10;\n    }\n    if shift > digits.len()\
    \ {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9aq0ww5e.rs:15:16\n   |\n\
    15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp9aq0ww5e.rs:16:16\n   |\n16 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnm0kcp_s.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnm0kcp_s.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnm0kcp_s.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsokz3c16.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpsokz3c16.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpsokz3c16.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift > 0 {\n        result.push_str(&digits[shift..]);\n\
    \        shift -= digits.len();\n    }\n    result.push_str(&digits[0..shift]);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0yzmnlwc.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp0yzmnlwc.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp0yzmnlwc.rs:13:26\n   |\n13 |         result.push_str(&digits[shift..]);\n\
    \   |                          ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0yzmnlwc.rs:14:18\n\
    \   |\n14 |         shift -= digits.len();\n   |                  ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize`\
    \ from `isize`\n  --> /tmp/tmp0yzmnlwc.rs:14:15\n   |\n14 |         shift -= digits.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other t"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    for digit in digits.chars().rev() {\n        if digit > '9' {\n         \
    \   result.push((digit - '0').to_string());\n        } else {\n            result.push(digit);\n\
    \        }\n    }\n    if shift > result.len() {\n        result.reverse();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpm0eaegfu.rs:13:32\n\
    \   |\n13 |             result.push((digit - '0').to_string());\n   |        \
    \                  ----- ^ --- char\n   |                          |\n   |   \
    \                       char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm0eaegfu.rs:18:16\n\
    \   |\n18 |     if shift > result.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpm0eaegfu.rs:19:16\n   |\n19 |         result.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i as u8);\n    }\n  \
    \  s[..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpen552g5k.rs:15:5\n   |\n15 |     s[..shift].to_string()\n   | \
    \    ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeTo<isize>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    let mut carry = 0;\n    while digits.len() > shift {\n        let digit =\
    \ digits.chars().nth(shift).unwrap();\n        result += digit;\n        carry\
    \ = digit as isize - (digit as isize) % 10;\n        digits = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n    }\n    if carry > 0 {\n        result += '0';\n        result\
    \ += &format!(\"{:0>2}\", carry);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr_5yw_lf.rs:12:26\n   |\n\
    12 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr_5yw_lf.rs:13:40\n   |\n13 |\
    \         let digit = digits.chars().nth(shift).unwrap();\n   |              \
    \                          ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         let digit = digits.chars().nth(shift.try_into().unwrap()).unwrap();\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr_5yw_lf.rs:14:19\n   |\n14 |         result\
    \ += digit;\n   |                   ^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr_5yw_lf.rs:16:18\n   |\n9  |     let mut digits\
    \ = x.to_string();\n   |                      ------------- expected due to this\
    \ value\n...\n16 |         digits = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                  |\n   |   \
    \               expected struct `String`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr_5yw_lf.rs:19:19\n   |\n19 |         result += '0';\n\
    \   |                   ^^^ expected `&str`, found `char`\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n19 |         result\
    \ += \"0\";\n   |                   ~~~\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsyjoldry.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpsyjoldry.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpsyjoldry.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + &digits[i + shift]\n        }\n    }).collect::<Vec<_>>();\n\
    \    digits.reverse();\n    digits.join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpntkycdnb.rs:11:17\n   |\n\
    11 |         if i == shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpntkycdnb.rs:14:41\n   |\n14 |             c.to_string()\
    \ + &digits[i + shift]\n   |                                         ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpntkycdnb.rs:14:39\n   |\n14 |             c.to_string() + &digits[i\
    \ + shift]\n   |                                       ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpntkycdnb.rs:14:30\n   |\n14 |             c.to_string() + &digits[i\
    \ + shift]\n   |                              ^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpntkycdnb.rs:10:14\n\
    \   |\n9  |       let mut digits = x.to_string();\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for c in x.to_string().chars()\
    \ {\n        if c >= '0' && c <= '9' {\n            s.push_str(&c.to_string());\n\
    \        } else {\n            s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).to_string());\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqjjfylcx.rs:14:68\n   |\n\
    14 |             s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).to_string());\n\
    \   |                                                                    ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n14 |           \
    \  s.push_str(&c.to_string() + &c.to_string().chars().nth(shift.try_into().unwrap()).to_string());\n\
    \   |                                                                        \
    \ ++++++++++++++++++++\n\nerror[E0599]: `Option<char>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmpqjjfylcx.rs:14:75\n    |\n14  |               s.push_str(&c.to_string()\
    \ + &c.to_string().chars().nth(shift).to_string());\n    |                   \
    \                                                          ^^^^^^^^^ `Option<char>`\
    \ cannot be formatted with the default formatter\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<char>: std::fmt::Display`\n\
    \            which is required by `Option<char>: ToString`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n       \
    \ if carry {\n            digit += 1;\n        }\n        carry = digit >= 10;\n\
    \        s += digit.to_string();\n    }\n    if carry {\n        s += \"1\";\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf6chzt6y.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf6chzt6y.rs:13:12\n  \
    \ |\n13 |         if carry {\n   |            ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf6chzt6y.rs:16:17\n   |\n10 |\
    \     let mut carry = 0;\n   |                     - expected due to this value\n\
    ...\n16 |         carry = digit >= 10;\n   |                 ^^^^^^^^^^^ expected\
    \ integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf6chzt6y.rs:19:8\n\
    \   |\n19 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf6chzt6y.rs:22:16\n   |\n22 |\
    \     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf6chzt6y.rs:23:21\n   |\n23 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpf6chzt6y.rs:23:19\n   |\n\
    23 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string().chars().take(shift).collect::<Vec<_>>();\n    for\
    \ d in digits {\n        let mut digit = d.to_digit(10);\n        if carry > 0\
    \ {\n            digit += carry;\n        }\n        carry = digit / 10;\n   \
    \     digit %= 10;\n        s.push((digit as char).to_string());\n    }\n    if\
    \ carry > 0 {\n        s.push((carry as char).to_string());\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdlyb2uwu.rs:11:49\n   |\n\
    11 |     let mut digits = x.to_string().chars().take(shift).collect::<Vec<_>>();\n\
    \   |                                                 ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |     let mut digits = x.to_string().chars().take(shift.try_into().unwrap()).collect::<Vec<_>>();\n\
    \   |                                                      ++++++++++++++++++++\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmpdlyb2uwu.rs:15:13\n   |\n15 |             digit += carry;\n   |\
    \             -----^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Option<u32>`\n\nerror[E0369]: cannot divide `Option<u32>` by `{integer}`\n\
    \  --> /tmp/tmpdlyb2uwu.rs:17:23\n   |\n17 |         carry = digit / 10;\n   |\
    \                 ----- ^ -- {integer}\n   |                 |\n   |         \
    \        Option<u32>\n\nerror[E0368]: binary assignment operation `%=` cannot\
    \ be applied to type `Option<u32>`\n  --> /tmp/tmpdlyb2uwu.rs:18:9\n   |\n18 |\
    \         digit %= 10;\n   |         -----^^^^^^\n   |         |\n   |       \
    \  cannot use `%=` on type `Option<u32>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpdlyb2uwu.rs:19:16\n   |\n19 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdlyb2uwu.rs:22:16\n\
    \   |\n22 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0605]:\
    \ non-primitive cast: `Option<u32>` as `char`\n  --> /tmp/tmpdlyb2uwu.rs:19:16\n\
    \   |\n19 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `{integer}`\n  --> /tmp/tmpdlyb2uwu.rs:2"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string().chars().nth(i - shift).unwrap().to_string()\n     \
    \   }\n    }).collect::<Vec<_>>();\n    digits.reverse().join(\"\")\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5fypjbqy.rs:11:17\n   |\n\
    11 |         if i == shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5fypjbqy.rs:14:43\n   |\n14 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \   ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp5fypjbqy.rs:14:41\n   |\n14 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5fypjbqy.rs:10:14\n\
    \   |\n9  |       let mut digits = x.to_string();\n   |                      \
    \  ------------- expected due to this value\n10 |       digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n   |  ______________^\n11 | |         if i == shift {\n12 | |       \
    \      c.to_string()\n13 | |         } else {\n14 | |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n15 | |         }\n16 | |     }).collect::<Vec<_>>();\n\
    \   | |__________________________^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp5fypjbqy.rs:17:12\n   |\n17 | "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    for digit in digits.chars().rev() {\n        result.push((digit as char)\
    \ << shift);\n        shift -= 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: no implementation for `char << isize`\n  --> /tmp/tmpkhwdblzi.rs:12:37\n\
    \   |\n12 |         result.push((digit as char) << shift);\n   |             \
    \        --------------- ^^ ----- isize\n   |                     |\n   |    \
    \                 char\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ i in 0..shift {\n        let digit = x % 10;\n        s += digit.to_string();\n\
    \        x /= 10;\n        if carry > 0 {\n            s += '1';\n        }\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        s += '1';\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5clrjh2x.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5clrjh2x.rs:16:18\n   |\n16 |             s\
    \ += '1';\n   |                  ^^^ expected `&str`, found `char`\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n16 |       \
    \      s += \"1\";\n   |                  ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5clrjh2x.rs:21:14\n   |\n21 |         s += '1';\n   |         \
    \     ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n21 |         s += \"1\";\n   |           \
    \   ~~~\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ d in x.to_digits().iter() {\n        let digit = d.unwrap();\n        let digit\
    \ = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpw01ki05l.rs:11:16\n   |\n11 |     for d in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfkvf1o42.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpfkvf1o42.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfkvf1o42.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &c in x.to_string().chars() {\n        let digit = c - '0';\n        if carry\
    \ > 0 {\n            digit += carry;\n        }\n        carry = digit / 10;\n\
    \        digit %= 10;\n        s.push((digit as char).to_string());\n    }\n \
    \   if carry > 0 {\n        s.push((carry as char).to_string());\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvm3ma5pf.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvm3ma5pf.rs:18:16\n  \
    \ |\n18 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvm3ma5pf.rs:21:16\n   |\n21 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `{integer}`\n\
    \  --> /tmp/tmpvm3ma5pf.rs:21:16\n   |\n21 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmpvm3ma5pf.rs:21:16\n   |\n21 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoxa9lv_g.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpoxa9lv_g.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpoxa9lv_g.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxa9lv_g.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpoxa9lv_g.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmptz566dg_.rs:10:12\n   |\n10 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for digit in x.to_string().chars().take(shift)\
    \ {\n        s.push(*digit);\n    }\n    s[..].reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxt20rv48.rs:10:45\n   |\n\
    10 |     for digit in x.to_string().chars().take(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                                  ++++++++++++++++++++\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpxt20rv48.rs:11:16\n\
    \   |\n11 |         s.push(*digit);\n   |                ^^^^^^\n\nerror[E0599]:\
    \ no method named `reverse` found for type `str` in the current scope\n  --> /tmp/tmpxt20rv48.rs:13:11\n\
    \   |\n13 |     s[..].reverse()\n   |           ^^^^^^^ method not found in `str`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiu4pklyp.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpiu4pklyp.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiu4pklyp.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpiu4pklyp.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift]\n        }\n    }).collect();\n\
    \    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkihwcm3y.rs:11:17\n   |\n\
    11 |         if i == shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkihwcm3y.rs:14:40\n   |\n14 |             c.to_string()\
    \ + digits[i - shift]\n   |                                        ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpkihwcm3y.rs:14:38\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                                      ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpkihwcm3y.rs:14:29\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                             ^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpkihwcm3y.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    s += digits;\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5mvvos6z.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp5mvvos6z.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5mvvos6z.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5mvvos6z.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for d in x.to_digits(10) {\n\
    \        s.push(*d);\n        *d %= 10;\n    }\n    s[..shift].to_string()\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmplox8awr6.rs:10:16\n   |\n10 |     for d in x.to_digits(10)\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmplox8awr6.rs:14:5\n\
    \   |\n14 |     s[..shift].to_string()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift) {\n        let digit = d.to_digit(10);\n\
    \        s += if carry {\n            digit + &'0'\n        } else {\n       \
    \     digit + '0'\n        };\n        carry = digit < 10;\n    }\n    if carry\
    \ {\n        s += &'0';\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:13:17\n  \
    \ |\n13 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:18:17\n\
    \   |\n10 |     let mut carry = 0;\n   |                     - expected due to\
    \ this value\n...\n18 |         carry = digit < 10;\n   |                 ^^^^^^^^^^\
    \ expected integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:20:8\n\
    \   |\n20 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpad8w5y81.rs:21:14\n   |\n21 |\
    \         s += &'0';\n   |              ^^^^ expected `str`, found `char`\n  \
    \ |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 6 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ i in 0..shift {\n        let digit = x % 10;\n        s += digit.to_string();\n\
    \        x /= 10;\n        carry = digit + carry;\n    }\n    if carry > 0 {\n\
    \        s += &format!(\"{}\", carry).to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4y70izux.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd7pdrfst.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpd7pdrfst.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpd7pdrfst.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += &x.to_string()[..i];\n    }\n    for i in 0..shift {\n        s += &x.to_string()[i..];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp9s62c0kh.rs:11:15\n   |\n11 |         s += &x.to_string()[..i];\n\
    \   |               ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp9s62c0kh.rs:14:15\n   |\n14 |         s += &x.to_string()[i..];\n\
    \   |               ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ >= shift {\n        i /= 10;\n        s.push(i);\n    }\n    s.push(i);\n  \
    \  s[s.len() - 1]\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqdz9flic.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqdz9flic.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqdz9flic.rs:16:5\n\
    \   |\n16 |     s[s.len() - 1]\n   |     ^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwtacjc4.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpjwtacjc4.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpjwtacjc4.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    let mut carry = 0;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        if carry > 0 {\n       \
    \     digits.push(digit + &format!(\"{}\", &carry));\n        } else {\n     \
    \       digits.push(digit);\n        }\n        carry = 1;\n    }\n    if carry\
    \ > 0 {\n        digits.push(&format!(\"{}\", &carry));\n    }\n    digits.reverse()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&String` to `isize`\n  --> /tmp/tmpl1oori9u.rs:16:31\n\
    \   |\n16 |             digits.push(digit + &format!(\"{}\", &carry));\n   | \
    \                              ^ no implementation for `isize + &String`\n   |\n\
    \   = help: the trait `Add<&String>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl1oori9u.rs:18:25\n   |\n18 |             digits.push(digit);\n\
    \   |                         ^^^^^ expected `char`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl1oori9u.rs:23:21\n   |\n23 |         digits.push(&format!(\"\
    {}\", &carry));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found `&String`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpl1oori9u.rs:25:12\n   |\n25 | \
    \    digits.reverse()\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    let mut carry = 0;\n    for digit in digits.chars().nth(shift).rev() {\n\
    \        result += '0' + (digit as char) + carry;\n        carry = 0;\n    }\n\
    \    if carry > 0 {\n        result += '1';\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpow3ptxpv.rs:12:37\n   |\n\
    12 |     for digit in digits.chars().nth(shift).rev() {\n   |                \
    \                     ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     for digit in digits.chars().nth(shift.try_into().unwrap()).rev()\
    \ {\n   |                                          ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmpow3ptxpv.rs:12:44\n    |\n\
    12  |       for digit in digits.chars().nth(shift).rev() {\n    |            \
    \                                  ^^^ `Option<char>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Option<char>:\
    \ Iterator`\n            which is required by `&mut Option<char>: Iterator`\n\n\
    error[E0369]: cannot add `char` to `char`\n  --> /tmp/tmpow3ptxpv.rs:13:23\n \
    \  |\n13 |         result += '0' + (digit as char) + carry;\n   |            \
    \       --- ^ --------------- char\n   |                   |\n   |           \
    \        char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow3ptxpv.rs:17:19\n\
    \   |\n17 |         result += '1';\n   |                   ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n17 |         result += \"1\";\n   |                   ~~~\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for &d in x.to_string().chars().take(shift)\
    \ {\n        s.push(d);\n    }\n    s.push('0');\n    s[s.len() - shift..].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg38lvshj.rs:10:42\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg38lvshj.rs:10:9\n   |\n10 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg38lvshj.rs:14:17\n  \
    \ |\n14 |     s[s.len() - shift..].to_string()\n   |                 ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpg38lvshj.rs:14:15\n   |\n14 |     s[s.len() - shift..].to_string()\n\
    \   |               ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift];\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfjhqeyh.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpcfjhqeyh.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpcfjhqeyh.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcfjhqeyh.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift];\n   |                     \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpcfjhqeyh.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push(digits[digits.len() - 1 - i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe9z2vxx0.rs:12:47\n   |\n\
    12 |         result.push(digits[digits.len() - 1 - i]);\n   |                \
    \                               ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpe9z2vxx0.rs:12:45\n   |\n\
    12 |         result.push(digits[digits.len() - 1 - i]);\n   |                \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe9z2vxx0.rs:12:21\n\
    \   |\n12 |         result.push(digits[digits.len() - 1 - i]);\n   |         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[digits.len() - 1 - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvzeds6_l.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpvzeds6_l.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpvzeds6_l.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvu6zgyn1.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpvu6zgyn1.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvu6zgyn1.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpvu6zgyn1.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    for i in 0..digits.len() {\n        s += digits[..i];\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp91a82cl0.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp91a82cl0.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91a82cl0.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91a82cl0.rs:15:14\n\
    \   |\n15 |         s += digits[..i];\n   |              ^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found `str`\n   |          \
    \    help: consider borrowing here: `&digits[..i]`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &c in x.to_string().chars() {\n        let digit = c - '0';\n        if carry\
    \ > 0 {\n            digit += carry;\n            carry = 0;\n        }\n    \
    \    s += digit.to_string();\n    }\n    if carry > 0 {\n        s += &format!(\"\
    {}\", carry);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphhrzaeh2.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..digits.len() - shift].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaqelascp.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpaqelascp.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaqelascp.rs:11:38\n   |\n11 |     digits = digits[..digits.len()\
    \ - shift].to_string();\n   |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpaqelascp.rs:11:36\n   |\n11 |     digits = digits[..digits.len()\
    \ - shift].to_string();\n   |                                    ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for c in x.to_string().chars().rev()\
    \ {\n        if c >= '0' && c <= '9' {\n            s.push_str(&c.to_string());\n\
    \        } else {\n            s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).rev().collect::<String>());\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_g89vpwz.rs:14:68\n   |\n\
    14 |             s.push_str(&c.to_string() + &c.to_string().chars().nth(shift).rev().collect::<String>());\n\
    \   |                                                                    ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n14 |           \
    \  s.push_str(&c.to_string() + &c.to_string().chars().nth(shift.try_into().unwrap()).rev().collect::<String>());\n\
    \   |                                                                        \
    \ ++++++++++++++++++++\n\nerror[E0599]: `Option<char>` is not an iterator\n  \
    \ --> /tmp/tmp_g89vpwz.rs:14:75\n    |\n14  |               s.push_str(&c.to_string()\
    \ + &c.to_string().chars().nth(shift).rev().collect::<String>());\n    |     \
    \                                                                        ^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        digits\
    \ = digits.chars().nth(shift).unwrap().to_string();\n        shift -= digits.len();\n\
    \    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvmh26ih8.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpvmh26ih8.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvmh26ih8.rs:13:37\n\
    \   |\n13 |         digits = digits.chars().nth(shift).unwrap().to_string();\n\
    \   |                                     ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         digits = digits.chars().nth(shift.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvmh26ih8.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmpvmh26ih8.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string().chars().nth(i - shift).unwrap()\n        }\n    }).collect();\n\
    \    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph8dq_r93.rs:11:17\n   |\n\
    11 |         if i == shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph8dq_r93.rs:14:43\n   |\n14 |             c.to_string().chars().nth(i\
    \ - shift).unwrap()\n   |                                           ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmph8dq_r93.rs:14:41\n   |\n14 |             c.to_string().chars().nth(i\
    \ - shift).unwrap()\n   |                                         ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmph8dq_r93.rs:14:13\n\
    \   |\n11 | /         if i == shift {\n12 | |             c.to_string()\n   |\
    \ |             ------------- expected because of this\n13 | |         } else\
    \ {\n14 | |             c.to_string().chars().nth(i - shift).unwrap()\n   | |\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ conversion method: `.to_string()`\n   | |             |\n   | |            \
    \ expected struct `String`, found `char`\n15 | |         }\n   | |_________- `if`\
    \ and `else` have incompatible types\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmph8dq_r93.rs:17:12\n\
    \   |\n17 |     digits.reverse().join(\"\")\n   |            ^^^^^^^ help: there\
    \ is an associated function w"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift) {\n        let digit = d - '0';\n  \
    \      s += if carry > 0 {\n            '0' + digit\n        } else {\n      \
    \      '1' + digit\n        };\n        carry = digit >> 8;\n    }\n    if carry\
    \ > 0 {\n        s += '1';\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc41ehwzs.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc41ehwzs.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0369]: cannot add `_` to `char`\n  --> /tmp/tmpc41ehwzs.rs:14:17\n\
    \   |\n14 |             '0' + digit\n   |             --- ^ ----- _\n   |    \
    \         |\n   |             char\n\nerror[E0369]: cannot add `_` to `char`\n\
    \  --> /tmp/tmpc41ehwzs.rs:16:17\n   |\n16 |             '1' + digit\n   |   \
    \          --- ^ ----- _\n   |             |\n   |             char\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc41ehwzs.rs:21:14\n   |\n21 |         s += '1';\n\
    \   |              ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n21 |         s += \"1\";\n\
    \   |              ~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz35g3r91.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz35g3r91.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    for i in 0..digits.len() {\n        s += digits[i];\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp58ivx73v.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp58ivx73v.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp58ivx73v.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmp58ivx73v.rs:15:14\n   |\n15 |         s += digits[i];\n\
    \   |              ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed expl"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i);\n    }\n    s[..shift].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpxkktdtkq.rs:15:5\n   |\n15 |     s[..shift].to_string()\n   | \
    \    ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeTo<isize>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ >= shift {\n        i -= shift;\n        s.push(i);\n    }\n    s.push(i);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2kj4eucz.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2kj4eucz.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx6oput4a.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx6oput4a.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ >= shift {\n        i /= 10;\n        s.push(i);\n    }\n    s.push(i);\n  \
    \  s[s.len() - 1]\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpollmb_9m.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpollmb_9m.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpollmb_9m.rs:16:5\n\
    \   |\n16 |     s[s.len() - 1]\n   |     ^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(shift - i) % digits.len()];\n\
    \    }\n    s[digits.len() - shift..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjampengj.rs:12:36\n   |\n\
    12 |         s += &digits[(shift - i) % digits.len()];\n   |                 \
    \                   ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n  --> /tmp/tmpjampengj.rs:12:34\n   |\n12 | \
    \        s += &digits[(shift - i) % digits.len()];\n   |                     \
    \             ^ no implementation for `isize % usize`\n   |\n   = help: the trait\
    \ `Rem<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpjampengj.rs:12:15\n   |\n12 |  \
    \       s += &digits[(shift - i) % digits.len()];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjampengj.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpjampengj.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|&c|\
    \ c >= '0' && c <= '9') {\n        *i as usize + shift % 10 as usize + shift /\
    \ 10 as usize\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbfs1wrym.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpbfs1wrym.rs:15:24\n     |\n15   |     for i in s.chars().rposition(|&c|\
    \ c >= '0' && c <= '9') {\n     |                        ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbfs1wrym.rs:15:35\n   |\n15 |     for i in s.chars().rposition(|&c|\
    \ c >= '0' && c <= '9') {\n   |                                   ^--\n   |  \
    \                                 ||\n   |                                   |expected\
    \ due to this\n   |                                   expected `char`, found reference\n\
    \   |                                   help: did you mean `c`: `&char`\n   |\n\
    \   = note:   expected type `char`\n           found reference `&_`\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmpbfs1wrym.rs:16:9\n   |\n\
    16 |         *i as usize + shift % 10 as usize + shift / 10 as usize\n   |   \
    \      ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbfs1wrym.rs:16:31\n\
    \   |\n16 |         *i as usize + shift % 10 as usize + shift / 10 as usize\n\
    \   |                               ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpbfs1wrym.rs:16:29\n\
    \   |\n16 |         *i as usize + shift % 10 as usize + shift / 10 as usize\n\
    \   |                             ^ no implementation for `isize % usize`\n  \
    \ |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implemen"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp30g7judt.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp30g7judt.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmp30g7judt.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    let mut\
    \ carry = 0;\n    while i >= 10 {\n        let digit = i / 10;\n        i %= 10;\n\
    \        s += digit.to_string();\n        carry = digit * carry + 1;\n       \
    \ if carry > 0 {\n            s += '0';\n        }\n    }\n    if carry > 0 {\n\
    \        s += '0';\n    }\n    for i in s.chars().rev() {\n        if i >= '0'\
    \ && i <= '9' {\n            i += shift;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4qn3plhy.rs:15:14\n   |\n\
    15 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4qn3plhy.rs:18:18\n   |\n18 |             s\
    \ += '0';\n   |                  ^^^ expected `&str`, found `char`\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n18 |       \
    \      s += \"0\";\n   |                  ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4qn3plhy.rs:22:14\n   |\n22 |         s += '0';\n   |         \
    \     ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n22 |         s += \"0\";\n   |           \
    \   ~~~\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to\
    \ type `char`\n  --> /tmp/tmp4qn3plhy.rs:26:13\n   |\n26 |             i += shift;\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        digits.push(remainder % 10);\n        remainder\
    \ = remainder / 10;\n    }\n    digits.push(remainder);\n    digits.reverse();\n\
    \    digits.rotate_left(shift);\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6kxoe_ei.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kxoe_ei.rs:15:17\n\
    \   |\n15 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp6kxoe_ei.rs:16:12\n   |\n16 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror[E0599]: no method named `rotate_left`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp6kxoe_ei.rs:17:12\n\
    \   |\n17 |     digits.rotate_left(shift);\n   |            ^^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    for &d in digits\
    \ {\n        let mut digit = d.to_digit(10);\n        if carry {\n           \
    \ digit += 1;\n        }\n        digit %= 10;\n        carry = digit > 9;\n \
    \       s += digit.to_string();\n    }\n    if carry {\n        s += \"1\";\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphv_ladcf.rs:12:9\n   |\n\
    12 |     for &d in digits {\n   |         ^^    ------ this expression has type\
    \ `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `d`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphv_ladcf.rs:14:12\n   |\n14 |         if carry\
    \ {\n   |            ^^^^^ expected `bool`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphv_ladcf.rs:18:17\n   |\n10 |     let mut carry = 0;\n\
    \   |                     - expected due to this value\n...\n18 |         carry\
    \ = digit > 9;\n   |                 ^^^^^^^^^ expected integer, found `bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphv_ladcf.rs:21:8\n   |\n21 | \
    \    if carry {\n   |        ^^^^^ expected `bool`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphv_ladcf.rs:24:16\n   |\n24 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n24 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphv_ladcf.rs:25:21\n   |\n25 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmphv_ladcf.rs:25:19\n   |\n\
    25 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n    "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi657va01.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi657va01.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift) {\n        s += if carry {\n       \
    \     '1'\n        } else {\n            '0'\n        };\n        carry = d >=\
    \ '9' {\n            d + '0'\n        } else {\n            d + '9' - '0'\n  \
    \      };\n    }\n    if carry {\n        s += '1';\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n\
    \  --> /tmp/tmpa4vqm0co.rs:17:26\n   |\n17 |         carry = d >= '9' {\n   |\
    \                          ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:11:42\n   |\n11 |\
    \     for &d in x.to_string().chars().take(shift) {\n   |                    \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:12:17\n  \
    \ |\n12 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:13:13\n\
    \   |\n13 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    13 |             \"1\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:15:13\n\
    \   |\n15 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    15 |             \"0\"\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:23:8\n\
    \   |\n23 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vqm0co.rs:24:14\n   |\n24 |\
    \         s += '1';\n   |              ^^^ expected `&str`, found `char`\n   |\n\
    help: if you meant to write a `st"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        result.push_str(&digits[shift..digits.len()\
    \ - shift]);\n        shift -= digits.len() - shift;\n    }\n    result.push_str(&digits[digits.len()\
    \ - shift..digits.len()])\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp668zbvaq.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp668zbvaq.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp668zbvaq.rs:13:55\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                       ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp668zbvaq.rs:13:40\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                        ^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp668zbvaq.rs:13:53\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                     ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be in"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptvuqtwvk.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmptvuqtwvk.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptvuqtwvk.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmptvuqtwvk.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n    }\n    s[0..shift].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8r9y0l_w.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8r9y0l_w.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp8r9y0l_w.rs:21:5\n   |\n21 |     s[0..shift].to_string()\n   |\
    \     ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n\
    \   = help: the trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    if shift > 0 {\n        digits\
    \ = digits.chars().enumerate().map(|(i, c)| {\n            if i == shift {\n \
    \               c.to_string()\n            } else {\n                c.to_string()\
    \ + &digits[i - shift]\n            }\n        }).collect::<String>();\n    }\n\
    \    result = digits.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpemhxn_bi.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpemhxn_bi.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpemhxn_bi.rs:14:21\n\
    \   |\n14 |             if i == shift {\n   |                     ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |             if i ==\
    \ shift.try_into().unwrap() {\n   |                          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpemhxn_bi.rs:17:45\n   |\n17 |\
    \                 c.to_string() + &digits[i - shift]\n   |                   \
    \                          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpemhxn_bi.rs:17:43\n   |\n\
    17 |                 c.to_string() + &digits[i - shift]\n   |                \
    \                           ^ no implementation for `usize - isize`\n   |\n  \
    \ = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i >>= shift;\n        s.push((i as char).to_string());\n    }\n\
    \    s[s.len() - 1].reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphdpl_qo8.rs:13:16\n   |\n\
    13 |         s.push((i as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmphdpl_qo8.rs:15:5\n   |\n15 |     s[s.len()\
    \ - 1].reverse()\n   |     ^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmphdpl_qo8.rs:13:16\n   |\n13 |         s.push((i as char).to_string());\n\
    \   |                ^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmphdpl_qo8.rs:13:16\n   |\n13 |         s.push((i\
    \ as char).to_string());\n   |                ^^^^^^^^^^^\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        *i as usize + shift % 10 as usize + shift /\
    \ 10 as usize\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1eotclr.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmph1eotclr.rs:15:24\n     |\n15   |     for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n     |                        ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0614]: type `usize`\
    \ cannot be dereferenced\n  --> /tmp/tmph1eotclr.rs:16:9\n   |\n16 |         *i\
    \ as usize + shift % 10 as usize + shift / 10 as usize\n   |         ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph1eotclr.rs:16:31\n   |\n16 |         *i as\
    \ usize + shift % 10 as usize + shift / 10 as usize\n   |                    \
    \           ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ mod `isize` by `usize`\n  --> /tmp/tmph1eotclr.rs:16:29\n   |\n16 |        \
    \ *i as usize + shift % 10 as usize + shift / 10 as usize\n   |              \
    \               ^ no implementation for `isize % usize`\n   |\n   = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph1eotclr.rs:16:53\n   |\n16 |         *i as usize + shift\
    \ % 10 as usize + shift / 10 as usize\n   |                          "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += digits[i % digits.len()];\n    }\n    s[digits.len()\
    \ - shift..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4z3cnbf4.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp4z3cnbf4.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as\
    \ Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n\
    \             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n    \
    \         <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n          \
    \   <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n  --> /tmp/tmp4z3cnbf4.rs:12:14\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4z3cnbf4.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp4z3cnbf4.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    for i in 0..shift {\n\
    \        s.push('0');\n    }\n    s.push(i);\n    s[s.len() - 1]\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphqc3h7ma.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphqc3h7ma.rs:18:12\n   |\n18 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmphqc3h7ma.rs:19:5\n\
    \   |\n19 |     s[s.len() - 1]\n   |     ^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ >= shift {\n        i /= 10;\n        s += &format!(\"{}\", i);\n    }\n   \
    \ s += &format!(\"{}\", i);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1011\"`,\n right: `\"001\"`', /tmp/tmp7_snyob9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift) {\n        let digit = d.to_digit(10);\n\
    \        if carry > 0 {\n            digit += carry;\n        }\n        carry\
    \ = digit / 10;\n        digit %= 10;\n        s.push(digit.to_string());\n  \
    \  }\n    if carry > 0 {\n        s.push(carry.to_string());\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybmokk00.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpybmokk00.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpybmokk00.rs:21:16\n  \
    \ |\n21 |         s.push(carry.to_string());\n   |                ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    s += digits;\n    s[..s.len()-shift].to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppxxhg1d_.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmppxxhg1d_.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppxxhg1d_.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppxxhg1d_.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppxxhg1d_.rs:15:17\n\
    \   |\n15 |     s[..s.len()-shift].to_string()\n   |                 ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmppxxhg1d_.rs:15:16\n   |\n15 |     s[..s.len()-shift].to_string()\n\
    \   |                ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = 0;\n    while i\
    \ < x.len() {\n        s += &x[i..].to_string();\n        i += shift;\n    }\n\
    \    s[0..i].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp4j9grlvr.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp4j9grlvr.rs:12:15\n   |\n\
    12 |         s += &x[i..].to_string();\n   |               ^^^^^^\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp4j9grlvr.rs:15:5\n\
    \   |\n15 |     s[0..i].to_string()\n   |     ^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift];\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_95e7jq.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpk_95e7jq.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpk_95e7jq.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_95e7jq.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift];\n   |                     \
    \           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpk_95e7jq.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[digits.len() - 1 - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvd_mrtwf.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpvd_mrtwf.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpvd_mrtwf.rs:12:15\n   |\n12 |         s += &digits[digits.len()\
    \ - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + &digits[i - shift]\n        }\n    }).collect();\n\
    \    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvrjwqk4z.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvrjwqk4z.rs:14:41\n   |\n14 |             c.to_string()\
    \ + &digits[i - shift]\n   |                                         ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpvrjwqk4z.rs:14:39\n   |\n14 |             c.to_string() + &digits[i\
    \ - shift]\n   |                                       ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvrjwqk4z.rs:14:30\n   |\n14 |             c.to_string() + &digits[i\
    \ - shift]\n   |                              ^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpvrjwqk"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for digit in x.to_string().chars().take(shift)\
    \ {\n        s.push(digit);\n    }\n    s[..].reverse()\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp58rsg_2q.rs:10:45\n   |\n\
    10 |     for digit in x.to_string().chars().take(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                                  ++++++++++++++++++++\n\
    \nerror[E0599]: no method named `reverse` found for type `str` in the current\
    \ scope\n  --> /tmp/tmp58rsg_2q.rs:13:11\n   |\n13 |     s[..].reverse()\n   |\
    \           ^^^^^^^ method not found in `str`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjus4b3c3.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpjus4b3c3.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjus4b3c3.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpjus4b3c3.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        result.push_str(&digits[shift..digits.len()\
    \ - shift]);\n        shift -= digits.len() - shift;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpas6nuo3h.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpas6nuo3h.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas6nuo3h.rs:13:55\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                       ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpas6nuo3h.rs:13:40\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                        ^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpas6nuo3h.rs:13:53\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                     ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be in"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpipgj6gdh.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpipgj6gdh.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpipgj6gdh.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut remainder = x;\n\
    \    let mut i = shift;\n    while i >= 0 {\n        remainder = remainder % 10;\n\
    \        result = format!(\"{}{}\", result, remainder);\n        i -= 1;\n   \
    \ }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp3g40eta1.rs:17:12\n   |\n17 |     result.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ digit in x.to_string().chars().skip(shift) {\n        match digit {\n      \
    \      '1' => s.push_str(&format!(\"{}{}\", carry, digit)),\n            '0' =>\
    \ s.push_str(&format!(\"{}{}\", digit, carry)),\n            _ => panic!(\"Invalid\
    \ digit in circular_shift\"),\n        }\n        carry = 0;\n    }\n    if carry\
    \ > 0 {\n        s.push_str(&format!(\"{}{}\", carry, digit));\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `digit` in this scope\n  --> /tmp/tmpsphngyzr.rs:20:44\n\
    \   |\n20 |         s.push_str(&format!(\"{}{}\", carry, digit));\n   |      \
    \                                      ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsphngyzr.rs:11:45\n   |\n11 |     for digit\
    \ in x.to_string().chars().skip(shift) {\n   |                               \
    \              ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    11 |     for digit in x.to_string().chars().skip(shift.try_into().unwrap()) {\n\
    \   |                                                  ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        digits\
    \ = digits.chars().skip(shift).collect();\n        shift -= digits.len();\n  \
    \  }\n    result.push_str(&digits);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ujr4_oi.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp3ujr4_oi.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ujr4_oi.rs:13:38\n\
    \   |\n13 |         digits = digits.chars().skip(shift).collect();\n   |     \
    \                                 ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |         digits = digits.chars().skip(shift.try_into().unwrap()).collect();\n\
    \   |                                           ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ujr4_oi.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmp3ujr4_oi.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssi"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut remainder = x;\n\
    \    let mut shift = shift % 10;\n    while shift > 0 {\n        remainder *=\
    \ 10;\n        remainder += shift % 10;\n        shift /= 10;\n    }\n    while\
    \ remainder > 0 {\n        result.push(remainder % 10);\n        remainder /=\
    \ 10;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp85wwunpi.rs:18:21\n   |\n\
    18 |         result.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp85wwunpi.rs:21:12\n\
    \   |\n21 |     result.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift) {\n        let digit = d.to_digit(10);\n\
    \        if digit > 0 {\n            s.push_str(&format!(\"{}{}\", digit, carry));\n\
    \            carry = 0;\n        } else {\n            carry = 1;\n        }\n\
    \    }\n    if carry != 0 {\n        s.push_str(&format!(\"{}\", carry));\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpum7ndhq8.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpum7ndhq8.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpene882nf.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpene882nf.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpene882nf.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ digit in x.to_string().chars().take(shift as usize) {\n        match digit {\n\
    \            '1' => s.push_str(&format!(\"{}{}\", carry, digit)),\n          \
    \  '0' => s.push_str(&format!(\"{}{}\", digit, carry)),\n            _ => panic!(\"\
    Invalid digit: {}\", digit),\n        }\n        carry = 0;\n    }\n    if carry\
    \ != 0 {\n        s.push_str(&format!(\"{}{}\", carry, digit));\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `digit` in this scope\n  --> /tmp/tmpi0kgm2sr.rs:20:44\n\
    \   |\n20 |         s.push_str(&format!(\"{}{}\", carry, digit));\n   |      \
    \                                      ^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbsdj71w.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkbsdj71w.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjk9ypjiv.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpjk9ypjiv.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpjk9ypjiv.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        if carry > 0 {\n\
    \            s.insert(0, &digits[digits.len() - i]);\n            carry = 0;\n\
    \        } else {\n            s.insert(0, &digits[digits.len() - i]);\n     \
    \   }\n    }\n    if carry > 0 {\n        s.insert(0, &digits[digits.len() - shift]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4hb2o3gg.rs:14:48\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i]);\n   |               \
    \                                 ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp4hb2o3gg.rs:14:46\n   |\n\
    14 |             s.insert(0, &digits[digits.len() - i]);\n   |               \
    \                               ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmp4hb2o3gg.rs:14:26\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i]);\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4hb2o3gg.rs:14:25\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - i]);\n   |        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n14 -             s.insert(0, &digits[digits.len()\
    \ - i]);\n14 +             s.insert(0, digits[digits.len() - i"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ digit in x.to_string().chars().take(shift) {\n        match digit {\n      \
    \      '1' => s.push_str(&format!(\"{}{}\", carry, digit)),\n            '0' =>\
    \ s.push_str(&format!(\"{}{}\", digit, carry)),\n            _ => panic!(\"Unexpected\
    \ digit {}\", digit),\n        }\n        carry = 0;\n    }\n    if carry > 0\
    \ {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgo3_un9s.rs:11:45\n   |\n\
    11 |     for digit in x.to_string().chars().take(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                                  ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgivxlyty.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpgivxlyty.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgivxlyty.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpgivxlyty.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    if shift > digits.len()\
    \ {\n        digits = digits.rev();\n    }\n    digits.chars().nth(shift).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fi0jkw8.rs:10:16\n   |\n\
    10 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: `String`\
    \ is not an iterator\n   --> /tmp/tmp6fi0jkw8.rs:11:25\n    |\n11  |         \
    \  digits = digits.rev();\n    |                           ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6fi0jkw8.rs:13:24\n   |\n13 |     digits.chars().nth(shift).collect()\n\
    \   |                        ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     digits.chars().nth(shift.try_into().unwrap()).collect()\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0599]: `Option<char>`\
    \ is not an iterator\n   --> /tmp/tmp6fi0jkw8.rs:13:31\n    |\n13  |       digits.chars().nth(shift).collect()\n\
    \    |                                 ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits[i as usize]);\n    }\n    s.push(*digits[shift\
    \ as usize]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu2awwset.rs:12:17\n\
    \   |\n12 |         s.push(*digits[i as usize]);\n   |                 ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu2awwset.rs:14:13\n   |\n14 |     s.push(*digits[shift as usize]);\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    for i in 0..digits.len() {\n        s += digits[digits.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_mh3v6k.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpz_mh3v6k.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz_mh3v6k.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpz_mh3v6k.rs:15:14\n   |\n15 |         s += digits[digits.len()\
    \ - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg8kz0_4y.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg8kz0_4y.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ d in x.to_string().chars().take(shift) {\n        let digit = d.to_digit(10);\n\
    \        if carry > 0 {\n            digit += carry;\n        }\n        carry\
    \ = digit / 10;\n        digit %= 10;\n        s += digit.to_string();\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhk81kl4.rs:11:41\n   |\n\
    11 |     for d in x.to_string().chars().take(shift) {\n   |                  \
    \                       ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                              ++++++++++++++++++++\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmplhk81kl4.rs:14:13\n   |\n14 |             digit += carry;\n   |\
    \             -----^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Option<u32>`\n\nerror[E0369]: cannot divide `Option<u32>` by `{integer}`\n\
    \  --> /tmp/tmplhk81kl4.rs:16:23\n   |\n16 |         carry = digit / 10;\n   |\
    \                 ----- ^ -- {integer}\n   |                 |\n   |         \
    \        Option<u32>\n\nerror[E0368]: binary assignment operation `%=` cannot\
    \ be applied to type `Option<u32>`\n  --> /tmp/tmplhk81kl4.rs:17:9\n   |\n17 |\
    \         digit %= 10;\n   |         -----^^^^^^\n   |         |\n   |       \
    \  cannot use `%=` on type `Option<u32>`\n\nerror[E0599]: `Option<u32>` doesn't\
    \ implement `std::fmt::Display`\n   --> /tmp/tmplhk81kl4.rs:18:20\n    |\n18 \
    \ |           s += digit.to_string();\n    |                      ^^^^^^^^^ `Option<u32>`\
    \ cannot be formatted with the default formatter\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<u32>: std::fmt::Display`\n\
    \            which is required by `Option<u32>: ToString`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplhk81kl4.rs:21:14\n   |\n21 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --expla"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift].to_string()\n        }\n    }).collect();\n\
    \    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmxuu8qo6.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmxuu8qo6.rs:14:40\n   |\n14 |             c.to_string()\
    \ + digits[i - shift].to_string()\n   |                                      \
    \  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpmxuu8qo6.rs:14:38\n   |\n14 |             c.to_string()\
    \ + digits[i - shift].to_string()\n   |                                      ^\
    \ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: the type `String` cannot be indexed by\
    \ `usize`\n  --> /tmp/tmpmxuu8qo6.rs:14:29\n   |\n14 |             c.to_string()\
    \ + digits[i - shift].to_string()\n   |                             ^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the curr"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n\
    \    for i in digits.chars().cloned() {\n        s += i;\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0zp5c6r3.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp0zp5c6r3.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0zp5c6r3.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = digits[..digits.len() - i];\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `str`\n\nerror[E0271]: type mismatch resolving `<Chars<'_> as\
    \ Iterator>::Item == &_`\n    --> /tmp/tmp0zp5c6r3.rs:14:29\n     |\n14   |  \
    \   for i in digits.chars().cloned() {\n     |                             ^^^^^^\
    \ expected reference, found `char`\n     |\n     = note: expected reference `&_`\n\
    \                     found type `char`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmp0zp5c6r3.rs:14:14\n   |\n14 |     for i in digits.chars().cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n  \
    \ = note: required because of the requirements on the impl of `Iterator` for"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_aq6zuxi.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_aq6zuxi.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &c in x.to_string().chars() {\n        let digit = c - '0';\n        if digit\
    \ < shift {\n            s.push_str(&format!(\"{}{}\", digit, carry));\n     \
    \       carry = 0;\n        } else {\n            s.push_str(&format!(\"{}{}\"\
    , digit - shift, carry));\n            carry = 1;\n        }\n    }\n    if carry\
    \ != 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv2wq5g_w.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplnd5zcf8.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmplnd5zcf8.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplnd5zcf8.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmplnd5zcf8.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for digit in x.to_string().chars().rev()\
    \ {\n        if digit < '0' || digit > '9' {\n            s.push('0');\n     \
    \   } else {\n            s.push(digit);\n        }\n    }\n    if shift > s.len()\
    \ {\n        s.push('0');\n    }\n    s[..shift].to_string()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmh5ldj_.rs:17:16\n   |\n\
    17 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpjmh5ldj_.rs:20:5\n\
    \   |\n20 |     s[..shift].to_string()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    s += x.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeae4_tq5.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeae4_tq5.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars().take(shift as usize) {\n        if carry > 0 {\n\
    \            s.insert(0, &d.to_string()[..]);\n        } else {\n            s.insert(0,\
    \ &d.to_string()[..]);\n        }\n        carry = d.to_digit(10);\n    }\n  \
    \  if carry > 0 {\n        s.insert(0, &carry);\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp91ei9d2b.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91ei9d2b.rs:20:21\n   |\n20 |         s.insert(0, &carry);\n  \
    \ |                     ^^^^^^ expected `char`, found `&{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdkxp68u.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpwdkxp68u.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpwdkxp68u.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += digits[i as usize];\n    }\n    s += digits[shift\
    \ as usize..];\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp3rhu_m0n.rs:12:14\n\
    \   |\n12 |         s += digits[i as usize];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3rhu_m0n.rs:14:10\n\
    \   |\n14 |     s += digits[shift as usize..];\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found `str`\n   |          help:\
    \ consider borrowing here: `&digits[shift as usize..]`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string();\n        x = x >> 1;\n    }\n    if shift > x.to_digits().len()\
    \ {\n        s += x.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4cag56zx.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp4cag56zx.rs:14:18\n   |\n14 |     if shift > x.to_digits().len() {\n\
    \   |                  ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4cag56zx.rs:15:14\n   |\n15 |         s += x.to_string();\n\
    \   |              ^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&x.to_string()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuus8qas.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmphuus8qas.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmphuus8qas.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmphuus8qas.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift]\n        }\n    }).collect();\n\
    \    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6vws51l9.rs:11:17\n   |\n\
    11 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6vws51l9.rs:14:40\n   |\n14 |             c.to_string()\
    \ + digits[i - shift]\n   |                                        ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp6vws51l9.rs:14:38\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                                      ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp6vws51l9.rs:14:29\n   |\n14 |             c.to_string() + digits[i\
    \ - shift]\n   |                             ^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp6vws51l9.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = &digits[..i] + &digits[i..];\n    }\n\
    \    s += digits;\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp86rza5ne.rs:12:19\n   |\n12 |         digits = &digits[..i] + &digits[i..];\n\
    \   |                   ^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp86rza5ne.rs:12:34\n   |\n12 |         digits = &digits[..i] + &digits[i..];\n\
    \   |                                  ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86rza5ne.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push(digits[digits.len() - i - 1]);\n\
    \    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2q2re7s9.rs:12:43\n   |\n\
    12 |         result.push(digits[digits.len() - i - 1]);\n   |                \
    \                           ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp2q2re7s9.rs:12:41\n   |\n\
    12 |         result.push(digits[digits.len() - i - 1]);\n   |                \
    \                         ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp2q2re7s9.rs:12:21\n   |\n\
    12 |         result.push(digits[digits.len() - i - 1]);\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp2q2re7s9.rs:14:12\n   |\n14 |     result.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpts_fv2hv.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpts_fv2hv.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpts_fv2hv.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n    }\n    if\
    \ shift > s.len() {\n        s[s.len() - shift..].to_string()\n    } else {\n\
    \        s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyiwkux7s.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyiwkux7s.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyiwkux7s.rs:21:16\n   |\n21 |  \
    \   if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyiwkux7s.rs:22:21\n   |\n22 |         s[s.len() - shift..].to_string()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpyiwkux7s.rs:22:19\n   |\n\
    22 |         s[s.len() - shift..].to_string()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpyiwkux7s.rs:24:9\n   |\n24 |         s[0..shift].to_string()\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut remainder = x;\n\
    \    let mut shift = shift % 10;\n    while shift > 0 {\n        remainder = remainder\
    \ / 10;\n        remainder = remainder + 1;\n        shift -= 1;\n    }\n    while\
    \ remainder > 0 {\n        result = format!(\"{}{}\", remainder, result);\n  \
    \      remainder = remainder % 10;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        digits = &digits[..digits.len() - i];\n    }\n\
    \    s += digits;\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvo6_qp96.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpvo6_qp96.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvo6_qp96.rs:12:18\n   |\n10 |     let mut digits = x.to_string();\n\
    \   |                      ------------- expected due to this value\n11 |    \
    \ for i in 0..shift {\n12 |         digits = &digits[..digits.len() - i];\n  \
    \ |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |         digits\
    \ = (&digits[..digits.len() - i]).to_string();\n   |                  +      \
    \                     +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvo6_qp96.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    let mut\
    \ j = shift;\n    while i >= 10 {\n        i /= 10;\n        j -= 1;\n    }\n\
    \    while j > 0 {\n        s += char::from_u32(i as u32 + j as u32 + '0').unwrap();\n\
    \        j -= 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `char` to `u32`\n  --> /tmp/tmpbd3lbk4k.rs:17:49\n\
    \   |\n17 |         s += char::from_u32(i as u32 + j as u32 + '0').unwrap();\n\
    \   |                                                 ^ no implementation for\
    \ `u32 + char`\n   |\n   = help: the trait `Add<char>` is not implemented for\
    \ `u32`\n   = help: the following other types implement trait `Add<Rhs>`:\n  \
    \           <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n      \
    \       <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n        \
    \     <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n            \
    \ <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbd3lbk4k.rs:17:14\n\
    \   |\n17 |         s += char::from_u32(i as u32 + j as u32 + '0').unwrap();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n       \
    \ let digit = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    if shift\
    \ > s.len() {\n        s[s.len() - shift..].to_owned()\n    } else {\n       \
    \ s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnp1s3qe9.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnp1s3qe9.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnp1s3qe9.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnp1s3qe9.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnp1s3qe9.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpnp1s3qe9.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &c in x.to_string().chars() {\n        let digit = c - '0';\n        if carry\
    \ > 0 {\n            digit += carry;\n            carry = 0;\n        }\n    \
    \    s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppz11fj5e.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `c`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppz11fj5e.rs:20:14\n  \
    \ |\n20 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s.push(*digits);\n        digits = &digits[1..];\n\
    \    }\n    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ggy92e_.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ggy92e_.rs:13:18\n \
    \  |\n10 |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n13 |         digits = &digits[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n13 |         digits = (&digits[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9ggy92e_.rs:15:12\n   |\n15 |     s.push(*digits);\n  \
    \ |            ^^^^^^^ expected `char`, found `str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        digits.push(remainder % 10);\n        remainder\
    \ = remainder / 10;\n    }\n    digits.push(remainder);\n    digits.reverse();\n\
    \    digits.push_str(&circular_shift(digits.len(), shift));\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw0qqiyro.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw0qqiyro.rs:15:17\n\
    \   |\n15 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpw0qqiyro.rs:16:12\n   |\n16 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw0qqiyro.rs:17:37\n\
    \   |\n17 |     digits.push_str(&circular_shift(digits.len(), shift));\n   | \
    \                                    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     digits.push_str(&circular_shift(digits.len().try_into().unwrap(),\
    \ shift));\n   |                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() + shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_lkgf9u.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpj_lkgf9u.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj_lkgf9u.rs:11:39\n   |\n11 |     digits = digits[..(digits.len()\
    \ + shift)].to_string();\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpj_lkgf9u.rs:11:37\n   |\n11 |     digits = digits[..(digits.len() +\
    \ shift)].to_string();\n   |                                     ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n       \
    \ let digit = digit + carry % 10;\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    if shift\
    \ > s.len() {\n        s[s.len() - shift..].to_owned()\n    } else {\n       \
    \ s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstp5y6b9.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstp5y6b9.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpstp5y6b9.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpstp5y6b9.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpstp5y6b9.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpstp5y6b9.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktkbrbai.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpktkbrbai.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpktkbrbai.rs:11:21\n   |\n11 |     digits = digits.reverse();\n   | \
    \                    ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqgeuxmr8.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpqgeuxmr8.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpqgeuxmr8.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgeuxmr8.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpqgeuxmr8.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.reverse();\n  \
    \  digits.rotate_left(shift);\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpjo_mnurt.rs:10:12\n   |\n10 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0599]: no method named `rotate_left` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpjo_mnurt.rs:11:12\n   |\n11 | \
    \    digits.rotate_left(shift);\n   |            ^^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut remainder = x;\n  \
    \  let mut shift = shift % 10;\n    while shift > 0 {\n        remainder = remainder\
    \ / 10;\n        shift -= 1;\n        s.push((remainder % 10) + shift);\n    }\n\
    \    s.push(remainder);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpllzqkx42.rs:15:16\n   |\n\
    15 |         s.push((remainder % 10) + shift);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpllzqkx42.rs:17:12\n\
    \   |\n17 |     s.push(remainder);\n   |            ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut i = x;\n    while i\
    \ > 0 {\n        i /= 10;\n        s.push(i);\n    }\n    s.push(i);\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n    }\n    for\
    \ i in s.chars().rposition(|&c| c > '9') {\n        s[i] = '0';\n\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9xkzrreb.rs:85:3\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               - unclosed delimiter\n...\n73\
    \ |     for i in s.chars().rposition(|&c| c > '9') {\n   |                   \
    \                             - this delimiter might not be properly closed...\n\
    ...\n76 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    85 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9xkzrreb.rs:13:16\n\
    \   |\n13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9xkzrreb.rs:15:12\n   |\n15 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n    --> /tmp/tmp9xkzrreb.rs:16:24\n\
    \     |\n16   |     for i in s.chars().rposition(|&c| c > '9') {\n     |     \
    \                   ^^^^^^^^^ the trait `ExactSizeIterator` is not implemented\
    \ for `Chars<'_>`\n     |\n     = help: the following other types implement trait\
    \ `ExactSizeIterator`:\n               &mut I\n               Args\n         \
    \      ArgsOs\n               ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_,\
    \ T, N>\n               ArrayWindows<'_, T, N>\n               Box<I, A>\n   \
    \            Chunks<'_, T>\n             and 109 others\nnote: required by a bound\
    \ in `rposition`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9xkzrreb.rs:16:35\n\
    \   |\n16 |     for i in s.chars().rposition(|&c| c > '9') {\n   |           \
    \                        ^--\n   |                                   ||\n   |\
    \                                   |expected due to this\n   |              \
    \                     expected `char`, found reference\n   |                 \
    \                  help: did you mean `c`: `&char`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp9xkzrreb.rs:17:9\n   |\n17 |   \
    \      s[i] = '0';\n   |         ^^^^ `"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    loop {\n        if shift >\
    \ s.len() {\n            s.push_str(&x.to_string());\n            break;\n   \
    \     }\n        let mut digit = x.remainder(10);\n        x.quotient(10);\n \
    \       s += digit.to_string();\n        shift -= s.len();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppj1vntis.rs:11:20\n   |\n\
    11 |         if shift > s.len() {\n   |                    ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         if shift > s.len().try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `remainder` found for type `isize` in the current scope\n  --> /tmp/tmppj1vntis.rs:15:27\n\
    \   |\n15 |         let mut digit = x.remainder(10);\n   |                   \
    \        ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `quotient` found for type `isize` in the current scope\n  --> /tmp/tmppj1vntis.rs:16:11\n\
    \   |\n16 |         x.quotient(10);\n   |           ^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppj1vntis.rs:18:18\n\
    \   |\n18 |         shift -= s.len();\n   |                  ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmppj1vntis.rs:18:15\n   |\n18 |         shift -= s.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `SubAssign<Rhs>`:\n             <f32 as\
    \ SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n\
    \             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n  \
    \           <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n     \
    \        <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        remainder %= 10;\n        digits.push(&format!(\"\
    {}\", remainder));\n    }\n    digits.reverse();\n    digits.push_str(&format!(\"\
    {}\", shift));\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpawqsv008.rs:13:21\n   |\n\
    13 |         digits.push(&format!(\"{}\", remainder));\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&String`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpawqsv008.rs:15:12\n   |\n15 |     digits.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8o1hq_9f.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp8o1hq_9f.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp8o1hq_9f.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8o1hq_9f.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp8o1hq_9f.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is"
  exit_code: 1
  status: SyntaxError
