name: HumanEval_130_tri
language: rust
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// tri(3)\
  \ = [1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
  \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15,\
  \ 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8),\
  \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
  \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
completions: ["    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i\
    \ in 1..n {\n        result[i] = result[i-1] + result[i-2];\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    if n % 2 == 0 {\n        result[0] =\
    \ tri(n - 1) + tri(n - 2);\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n    } else {\n        result[0] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2);\n    }\n\
    \    result", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n {\n       \
    \ tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n  \
    \  }\n    tri", "    let mut result: Vec<isize> = vec![0; n + 1];\n    let mut\
    \ tri_1: isize = 3;\n    let mut tri_2: isize = 1;\n    let mut tri_3: isize =\
    \ 2;\n    for i in 1..n+1 {\n        result[i] = tri_3;\n        tri_1 = tri_2;\n\
    \        tri_2 = tri_3;\n        tri_3 += tri_1;\n    }\n    result", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut tri =\
    \ vec![1, 1, 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len() - 1]\
    \ + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut result:\
    \ Vec<isize> = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n   \
    \     result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let mut\
    \ result = vec![0; n + 1];\n    if n % 2 == 0 {\n        result[0] = 1;\n    \
    \    result[1] = 1 + n / 2;\n    } else {\n        result[0] = 1;\n        result[1]\
    \ = 1 + n / 2;\n        result[2] = 1 + n / 2 + n / 4;\n    }\n    result", " \
    \   let mut result: Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \        return result;\n    }\n    if n == 1 {\n        result.push(1);\n   \
    \     return result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n -\
    \ 1) + tri(n - 2));\n    } else {\n        result.push(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n    }\n    result", "    let mut result = vec![0; n + 1];\n\
    \    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(8);\n    vec",
  "    let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(8);\n    tri_vec", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n\
    \        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n      \
    \  let mut tri_3: isize = 3;\n        for _ in 0..n {\n            result.push(tri_1\
    \ + tri_2 + tri_3);\n            tri_1 = tri_2;\n            tri_2 = tri_3;\n\
    \            tri_3 = tri_1 + tri_2 + tri_3;\n        }\n    }\n    result", " \
    \   let mut result = vec![];\n    let mut tri_1 = vec![1, 1, 1];\n    let mut\
    \ tri_2 = vec![1, 1, 2];\n    for i in 1..n+1 {\n        result.push(tri_1[tri_1.len()\
    \ - 1] + tri_2[tri_2.len() - 1]);\n        tri_1.push(tri_1[tri_1.len() - 1] +\
    \ tri_2[tri_2.len() - 1]);\n        tri_2.push(tri_1[tri_1.len() - 1] + tri_2[tri_2.len()\
    \ - 1]);\n    }\n    result", "    let mut result = vec![];\n    let mut tri_1\
    \ = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 2];\n    let mut tri_3 = vec![1,\
    \ 2, 1];\n    for i in 1..n+1 {\n        result.push(tri_1[i - 1] + tri_2[i -\
    \ 1] + tri_3[i - 1]);\n        tri_1.push(tri_1[i - 1] + tri_2[i - 1]);\n    \
    \    tri_2.push(tri_2[i - 1] + tri_3[i - 1]);\n        tri_3.push(tri_3[i - 1]);\n\
    \    }\n    result", "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        let mut tri_3 = tri(n - 3);\n        result.push(tri_1 + tri_2\
    \ + tri_3);\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n {\n        vec.push((i + 1) + (i + 2) / 2);\n\
    \    }\n    vec", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n\
    \    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n    }\n\
    \    result", "    let mut result: Vec<isize> = vec![0; n + 1];\n    let mut tri_1:\
    \ isize = 3;\n    let mut tri_2: isize = 1;\n    let mut tri_3: isize = 2;\n \
    \   for i in 1..n {\n        result[i] = tri_1;\n        tri_1 += tri_2;\n   \
    \     tri_2 += tri_3;\n        tri_3 += 1;\n    }\n    result", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut result =\
    \ vec![0; n + 1];\n    if n % 2 == 0 {\n        result[0] = 1 + n / 2;\n     \
    \   result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    } else {\n        result[0]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[1] = 1 + n / 2;\n  \
    \  }\n    result", "    let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(8);\n    tri_vec",
  "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n\
    \        result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n     \
    \   return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n  \
    \  } else {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize =\
    \ 3;\n        for _ in 0..(n - 1) {\n            tri_1 = tri_1 + tri_2;\n    \
    \        tri_2 = tri_1 - tri_2;\n        }\n        vec.push(tri_1);\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        let mut tri_3 = tri(n - 3);\n        vec.push(tri_1 + tri_2 +\
    \ tri_3);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n ==\
    \ 0 {\n        vec.push(3);\n        return vec;\n    }\n    if n == 1 {\n   \
    \     vec.push(1);\n        return vec;\n    }\n    if n == 2 {\n        vec.push(2);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n     \
    \   vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut result = vec![];\n    if n % 2 == 0 {\n \
    \       result.push(3);\n        result.push(1);\n        result.push(2);\n  \
    \      result.push(8);\n    } else {\n        let mut tri_1 = vec![];\n      \
    \  let mut tri_2 = vec![];\n        let mut tri_3 = vec![];\n        tri_1.push(3);\n\
    \        tri_2.push(1);\n        tri_3.push(2);\n        tri_3.push(3);\n    \
    \    result.push(tri_1);\n        result.push(tri_2);\n        result.push(tri_3);\n\
    \    }\n    result", "    let mut vec: Vec<isize> = Vec::new();\n    if n == 0\
    \ {\n        vec.push(3);\n    } else {\n        let mut tri_1 = tri(n - 1);\n\
    \        let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n + 1);\n  \
    \      vec.push(tri_1 + tri_2 + tri_3);\n    }\n    vec", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.append(3);\n     \
    \   result.push(1);\n        result.push(2);\n        result.push(8);\n    } else\
    \ {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 3;\n  \
    \      let mut tri_3: isize = 1;\n        for i in 1..n / 2 {\n            tri_3\
    \ = tri_1 + tri_2;\n            tri_2 = tri_1;\n            tri_1 = tri_3;\n \
    \       }\n        result.append(tri_3);\n        result.push(tri_1 + tri_2);\n\
    \        result.push(tri_2);\n        result.push(tri_1);\n    }\n    result",
  "    let mut vec: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n\
    \        vec.push(1 + n / 2);\n        if n % 2 == 0 {\n            vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    vec", "    let mut result: Vec<isize> = vec![];\n    if n ==\
    \ 0 {\n        result.push(3);\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.push(1 + n / 2);\n    } else {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut result =\
    \ vec![];\n    if n % 2 == 0 {\n        result.push(3);\n    }\n    for i in 1..n\
    \ / 2 {\n        result.push(1 + i / 2);\n    }\n    for i in 2..n / 2 {\n   \
    \     result.push(result[i-2] + result[i-1]);\n    }\n    result", "    let mut\
    \ result = vec![0; n + 1];\n    result[0] = 3;\n    if n % 2 == 0 {\n        result[1]\
    \ = 1 + n / 2;\n    } else {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n    }\n    result", "    let mut result = vec![];\n    if n % 2 == 0\
    \ {\n        result.append(3);\n        result.append(1 + n / 2);\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n   \
    \ result", "    let mut tri = vec![1, 1, 1];\n    for i in 0..n {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut result: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1);\n        result.push(2);\n        result.push(8);\n \
    \   } else {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize\
    \ = 1;\n        let mut tri_3: isize = 1;\n        for _ in 0..(n + 1) {\n   \
    \         tri_3 = tri_1 + tri_2;\n            tri_2 = tri_1;\n            tri_1\
    \ = tri_3;\n            result.push(tri_3);\n        }\n    }\n    result", " \
    \   let mut tri = vec![1, 1, 1];\n    for i in 1..n+1 {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut result: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1 + n / 2);\n    } else {\n        result.push(1);\n    \
    \    result.push(1 + n / 2);\n        result.push(1 + n / 2);\n    }\n    result",
  "    let mut result: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1 + n / 2);\n    } else {\n        result.push(1);\n    \
    \    result.push(1 + n / 2);\n        result.push(1 + n / 2);\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n\
    \        result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let\
    \ mut result = vec![1, 1, 1];\n    for i in 1..=n {\n        let mut current =\
    \ result[0];\n        result[0] = result[0] + result[1];\n        result[1] =\
    \ current;\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if\
    \ n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2 + n / 2);\n    }\n    vec", "    let mut result: Vec<isize> = vec![];\n\
    \    let mut tri_1: isize = 3;\n    let mut tri_2: isize = 1;\n    let mut tri_3:\
    \ isize = 2;\n    while tri_3 <= n {\n        result.push(tri_3);\n        tri_3\
    \ = tri_1 + tri_2 + tri_3;\n        tri_2 = tri_1;\n        tri_1 = tri_3;\n \
    \   }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n      \
    \  vec.push(8);\n    } else {\n        let mut tri_1: isize = 3;\n        let\
    \ mut tri_2: isize = 1;\n        let mut tri_3: isize = 2;\n        for _ in 0..n\
    \ / 2 {\n            tri_3 = tri_1 + tri_2;\n            tri_2 = tri_1;\n    \
    \        tri_1 = tri_3;\n        }\n        vec.push(tri_1);\n        vec.push(tri_2);\n\
    \        vec.push(tri_3);\n    }\n    vec", "    let mut tri_vec: Vec<isize> =\
    \ vec![];\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1 +\
    \ n / 2);\n    } else {\n        tri_vec.push(tri_vec.last().unwrap() + tri_vec.last().unwrap()\
    \ + tri_vec.last().unwrap());\n    }\n    tri_vec", "    if n == 0 {\n       \
    \ return vec![];\n    }\n    if n == 1 {\n        return vec![1];\n    }\n   \
    \ let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1\
    \ + n / 2);\n    if n % 2 == 0 {\n        tri_vec.push(tri_vec[0] + tri_vec[1]\
    \ + tri_vec[2]);\n    } else {\n        tri_vec.push(tri_vec[0] + tri_vec[1]);\n\
    \    }\n    tri_vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    let mut list = vec![0; n + 1];\n    list[0] = 3;\n    list[1]\
    \ = 1;\n    list[2] = 2;\n    list[3] = 1 + n / 2;\n    for i in 2..n+1 {\n  \
    \      list[i] = list[i-1] + list[i-2];\n    }\n    list", "    let mut result\
    \ = vec![3, 1];\n    if n % 2 == 0 {\n        result[1] = 1 + n / 2;\n    } else\
    \ {\n        result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    result",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n     \
    \   return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n  \
    \  } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    return vec;", "    let mut result: Vec<isize> = vec![];\n    if n == 0 {\n\
    \        result.push(3);\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.push(tri(n - 1) + tri(n - 2));\n    } else {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut tri = vec![1,\
    \ 1, 1];\n    for _ in 0..n {\n        tri.push(tri.last().unwrap() + tri.last().unwrap()\
    \ + tri.last().unwrap());\n    }\n    tri", "    let mut tri = vec![1, 1, 1];\n\
    \    for _ in 0..n {\n        tri.push(tri.last().unwrap() + tri.last().unwrap()\
    \ + tri.last().unwrap());\n    }\n    tri", "    let mut result = vec![0; n +\
    \ 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 1];\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut tri_1 = 1;\n    let mut tri_2 = 1;\n    let mut tri_3\
    \ = 1;\n    for i in 1..n + 1 {\n        result.push(tri_1);\n        result.push(tri_2);\n\
    \        result.push(tri_3);\n        tri_1 = tri_2;\n        tri_2 = tri_3;\n\
    \        tri_3 = tri_1 + tri_2 + tri_3;\n    }\n    result", "    let mut vec:\
    \ Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n    for i in 1..n {\n       \
    \ vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut\
    \ result: Vec<isize> = vec![];\n    if n <= 2 {\n        result.push(1);\n   \
    \     result.push(2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n   \
    \     let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n + 1);\n     \
    \   result.push(tri_1);\n        result.push(tri_2);\n        result.push(tri_3);\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec = vec![0;\
    \ n + 2];\n    vec[0] = 3;\n    vec[1] = vec[0] + vec[1];\n    for i in 2..n +\
    \ 1 {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec", "    let mut\
    \ tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1\
    \ + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    if n == 0 {\n\
    \        return vec![];\n    }\n    if n == 1 {\n        return vec![1];\n   \
    \ }\n    if n == 2 {\n        return vec![1, 2];\n    }\n    let mut tri_vec =\
    \ vec![];\n    tri_vec.push(1);\n    tri_vec.push(2);\n    for i in 2..n {\n \
    \       tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len() - 2] +\
    \ tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut tri_vec: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        tri_vec.push(3);\n    } else {\n\
    \        tri_vec.push(1);\n        tri_vec.push(2);\n    }\n    for i in 1..n+1\
    \ {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len() -\
    \ 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n\
    \ / 2 {\n        vec.push(i + 1 + n / 2);\n    }\n    for i in 2..n / 2 {\n  \
    \      vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "   \
    \ let mut result: Vec<isize> = vec![];\n    if n <= 1 {\n        return result;\n\
    \    }\n    let mut tri_1 = vec![3, 1];\n    let mut tri_2 = vec![1, 1];\n   \
    \ for _ in 0..n {\n        result.push(tri_1.pop() + tri_2.pop());\n    }\n  \
    \  result", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    if\
    \ n % 2 == 0 {\n        result[1] = 1 + n / 2;\n    } else {\n        result[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    result", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n\
    \        vec.push(1 + n / 2);\n        if n % 2 == 0 {\n            vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            vec.push(tri(n\
    \ - 1) + tri(n - 2));\n        }\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut tri = vec![1, 1,\
    \ 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut tri = vec![1, 1,\
    \ 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n + 1);\n        for &x in tri_1 {\n            result.push(x);\n\
    \        }\n        for &x in tri_2 {\n            result.push(x);\n        }\n\
    \        for &x in tri_3 {\n            result.push(x);\n        }\n    }\n  \
    \  result", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for\
    \ i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n    }\n    result",
  "    let mut result = vec![0; n + 1];\n    let mut tri_1 = 0;\n    let mut tri_2\
    \ = 0;\n    let mut tri_3 = 0;\n    for i in 1..n+1 {\n        result[i] = tri_3;\n\
    \        tri_3 = tri_1 + tri_2 + tri_3;\n        tri_2 = tri_1;\n        tri_1\
    \ = i;\n    }\n    result", "    let mut result: Vec<isize> = vec![];\n    if\
    \ n == 0 {\n        result.push(3);\n        return result;\n    }\n    if n %\
    \ 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2));\n    } else {\n    \
    \    result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", " \
    \   let mut tri = vec![3, 1];\n    for i in 2..n + 1 {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut result = vec![1, 1, 1];\n    for i in 1..n+1 {\n        if i % 2 == 0 {\n\
    \            result.push(result[i-2] + result[i-1]);\n        } else {\n     \
    \       result.push(result[i-2] + result[i-1] + result[i]);\n        }\n    }\n\
    \    result", "    let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n\
    \ - 1) + tri(n - 2));\n    } else {\n        result.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    }\n    result", "    let mut result = vec![0; n + 1];\n\
    \    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n  \
    \      let mut tri_3: isize = 3;\n        while tri_3 <= n {\n            vec.push(tri_1\
    \ + tri_2 + tri_3);\n            tri_1 = tri_2;\n            tri_2 = tri_3;\n\
    \            tri_3 += 1;\n        }\n    }\n    vec", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2));\n    } else {\n\
    \        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result",
  "    let mut vec: Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![0; n + 1];\n    vec[0] = 3;\n  \
    \  for i in 1..n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n \
    \   }\n    vec", "    let mut tri = vec![];\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(4);\n    tri.push(5);\n    tri.push(6);\n\
    \    tri.push(7);\n    tri.push(8);\n    tri.push(9);\n    tri.push(10);\n   \
    \ tri.push(11);\n    tri.push(12);\n    tri.push(13);\n    tri.push(14);\n   \
    \ tri.push(15);\n    tri.push(16);\n    tri.push(17);\n    tri.push(18);\n   \
    \ tri.push(19);\n    tri.push(20);\n    tri.push(21);\n    tri.push(22);\n   \
    \ tri.push(23);\n    tri.push(24);\n    tri.push(25);\n    tri.push(26);\n   \
    \ tri.push(27);\n    tri.push(28);\n    tri.push(29);\n    tri.push(30);\n   \
    \ tri.push(31);\n    tri.push(32);\n    tri.push(33);\n    tri.push(34);\n   \
    \ tri.push(35);\n    tri.push(36);\n    tri.push(37);\n    tri.push(38);\n   \
    \ tri.push(39);\n    tri.push(40);\n    tri.push(41);\n    tri.push(42);\n   \
    \ tri.push(43);\n    tri.push(44);\n    tri.push(45);\n    tri.push(46);\n   \
    \ tri.push(47);\n    tri.push(48);\n    tri.push(49);\n    tri.push(50);\n   \
    \ tri.push(51);\n    tri.push(52);\n    tri.push(53);\n    tri.push(54);\n   \
    \ tri.push(55);\n    tri.push(56);\n    tri.push(57);\n    tri.push(58);\n   \
    \ tri.push(59);\n    tri.push(60);\n    tri.push(61);\n    tri.push(62);\n   \
    \ tri.push(63);\n    tri.push(64);\n    tri.push(65);\n    tri.push(66);\n   \
    \ tri.push(67);\n    tri.push(68);\n    tri.push(69);\n    tri.push(70);\n   \
    \ tri.push(71);\n    tri.push(72);\n    tri.push(73);\n    tri.push(74", "   \
    \ let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(8);\n    if n % 2 == 0 {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        vec.push(tri(n - 1)\
    \ + tri(n - 2));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n  \
    \  if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    }\
    \ else {\n        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut result = vec![0; n + 1];\n    let mut\
    \ tri_1 = 0;\n    let mut tri_2 = 1;\n    let mut tri_3 = 1;\n    for i in 1..n+1\
    \ {\n        result[i] = tri_3;\n        tri_3 = tri_1 + tri_2 + tri_3;\n    \
    \    tri_2 = tri_1;\n        tri_1 = tri_3;\n    }\n    result", "    let mut\
    \ result: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1 + n / 2);\n    } else {\n        result.push(1);\n    \
    \    result.push(1 + n / 2);\n        result.push(1 + n / 2);\n    }\n    result",
  "    if n == 0 {\n        return vec![];\n    }\n    let mut a = vec![1, 1, 1];\n\
    \    let mut b = vec![1, 1, 1];\n    for i in 1..n {\n        a.push(a + b[i -\
    \ 1]);\n        b.push(b[i - 1] + a[i - 1]);\n    }\n    a", "    let mut result\
    \ = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i]\
    \ = result[i-1] + result[i-2];\n    }\n    result", "    let mut result = vec![1,\
    \ 1, 1];\n    for i in 1..n {\n        result[i] = result[i-2] + result[i-1];\n\
    \    }\n    result", "    let mut tri = vec![3, 1];\n    for i in 1..n {\n   \
    \     tri.push(tri.last().unwrap() + tri.last().unwrap() + tri.last().unwrap());\n\
    \    }\n    tri", "    let mut vec = vec![3, 1];\n    for i in 2..n + 1 {\n  \
    \      if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut tri = vec![];\n    tri.push(3);\n  \
    \  tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(4);\n    tri.push(5);\n\
    \    tri.push(6);\n    tri.push(7);\n    tri.push(8);\n    tri.push(9);\n    tri.push(10);\n\
    \    tri.push(11);\n    tri.push(12);\n    tri.push(13);\n    tri.push(14);\n\
    \    tri.push(15);\n    tri.push(16);\n    tri.push(17);\n    tri.push(18);\n\
    \    tri.push(19);\n    tri.push(20);\n    tri.push(21);\n    tri.push(22);\n\
    \    tri.push(23);\n    tri.push(24);\n    tri.push(25);\n    tri.push(26);\n\
    \    tri.push(27);\n    tri.push(28);\n    tri.push(29);\n    tri.push(30);\n\
    \    tri.push(31);\n    tri.push(32);\n    tri.push(33);\n    tri.push(34);\n\
    \    tri.push(35);\n    tri.push(36);\n    tri.push(37);\n    tri.push(38);\n\
    \    tri.push(39);\n    tri.push(40);\n    tri.push(41);\n    tri.push(42);\n\
    \    tri.push(43);\n    tri.push(44);\n    tri.push(45);\n    tri.push(46);\n\
    \    tri.push(47);\n    tri.push(48);\n    tri.push(49);\n    tri.push(50);\n\
    \    tri.push(51);\n    tri.push(52);\n    tri.push(53);\n    tri.push(54);\n\
    \    tri.push(55);\n    tri.push(56);\n    tri.push(57);\n    tri.push(58);\n\
    \    tri.push(59);\n    tri.push(60);\n    tri.push(61);\n    tri.push(62);\n\
    \    tri.push(63);\n    tri.push(64);\n    tri.push(65);\n    tri.push(66);\n\
    \    tri.push(67);\n    tri.push(68);\n    tri.push(69);\n    tri.push(70);\n\
    \    tri.push(71);\n    tri.push(72);\n    tri.push(73);\n    tri.push(74", " \
    \   let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n\
    \        result[i] = result[i-1] + result[i-2];\n    }\n    result", "    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] + vec[0];\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1];\n\
    \    }\n    vec", "    let mut result: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        result.append(3);\n        result.append(1 + n / 2);\n    } else\
    \ {\n        result.append(3);\n        result.append(1 + n / 2);\n        result.append(1\
    \ + n / 2);\n    }\n    result", "    let mut tri = vec![3, 1];\n    for i in\
    \ 2..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len()\
    \ - 3]);\n    }\n    tri", "    let mut result: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n    }\
    \ else {\n        result.push(1);\n        result.push(1 + n / 2);\n        result.push(1\
    \ + n / 2);\n    }\n    result", "    let mut list = vec![0; n + 2];\n    list[0]\
    \ = 3; list[1] = 1 + n / 2;\n    for i in 2..n+1 {\n        list[i] = list[i-1]\
    \ + list[i-2];\n    }\n    list", "    let mut result = vec![0; n + 1];\n    result[0]\
    \ = 3;\n    for i in 1..n+1 {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut result: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n    } else {\n\
    \        result.push(1);\n        result.push(1 + n / 2);\n        result.push(1\
    \ + n / 2);\n    }\n    result", "    let mut tri = vec![1, 1, 1];\n    for i\
    \ in 1..n {\n        tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len()\
    \ - 3]);\n    }\n    tri", "    let mut result = vec![0; n + 1];\n    result[0]\
    \ = 3;\n    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut result = vec![0; n + 1];\n    let mut tri_1\
    \ = vec![0; n + 1];\n    let mut tri_2 = vec![0; n + 1];\n    for i in 0..n {\n\
    \        tri_1[i] = 3;\n        tri_2[i] = 1;\n    }\n    for i in 0..n {\n  \
    \      result[i] = tri_1[i] + tri_2[i];\n    }\n    result", "    let mut result\
    \ = vec![0; n + 1];\n    if n % 2 == 0 {\n        result[0] = 1 + n / 2;\n   \
    \ } else {\n        result[0] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n\
    \    result", "    let mut result: Vec<isize> = vec![];\n    if n == 0 {\n   \
    \     result.push(3);\n    } else {\n        let mut tri_1: isize = 1;\n     \
    \   let mut tri_2: isize = 2;\n        let mut tri_3: isize = 3;\n        for\
    \ _ in 0..n {\n            result.push(tri_1);\n            tri_1 += tri_2;\n\
    \            tri_2 += tri_3;\n            tri_3 += 1;\n        }\n    }\n    result",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    return vec;", "    let mut result = vec![0; n + 1];\n    if n % 2 == 0 {\n\
    \        result[0] = 1 + n / 2;\n        result[1] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n    } else {\n        result[0] = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n        result[1] = 1 + n / 2;\n    }\n    result", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n\
    \        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n      \
    \  let mut tri_3: isize = 3;\n        for i in 1..n+1 {\n            result.push(tri_1);\n\
    \            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = tri_1\
    \ + tri_2 + tri_3;\n        }\n    }\n    result", "    let mut result = vec![];\n\
    \    if n % 2 == 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n\
    \    } else {\n        result.push(1);\n        result.push(1 + n / 2);\n    \
    \    result.push(1 + n / 2);\n    }\n    result", "    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1\
    \ + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut result\
    \ = vec![0; n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i]\
    \ = result[i-1] + result[i-2];\n    }\n    result", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(8);\n    } else {\n        vec.push(1);\n\
    \        vec.push(3);\n        vec.push(5);\n        vec.push(8);\n    }\n   \
    \ vec", "    let mut tri = vec![];\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);", "    let mut tri = vec![3, 1];\n    for i in 2..n + 1 {\n\
    \        tri.push(tri.last().unwrap() + tri.last().unwrap() + tri.last().unwrap());\n\
    \    }\n    tri", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n\
    \    for i in 1..=n {\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    result", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n\
    \ {\n        tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len()\
    \ - 3]);\n    }\n    tri", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    for i in 1..n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n\
    \    }\n    vec", "    let mut result = vec![1, 1, 1];\n    for i in 1..n {\n\
    \        result.push(result[i-2] + result[i-1]);\n    }\n    result", "    let\
    \ mut result: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1);\n        result.push(2);\n        result.push(8);\n \
    \   } else {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize\
    \ = 2;\n        let mut tri_3: isize = 3;\n        for i in 1..n {\n         \
    \   tri_3 = tri_1 + tri_2;\n            tri_2 = tri_1;\n            tri_1 = tri_3;\n\
    \            result.push(tri_3);\n        }\n    }\n    result", "    let mut\
    \ list = vec![];\n    list.push(3);\n    if n % 2 == 0 {\n        list.push(1);\n\
    \        list.push(n / 2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n\
    \        let mut tri_2 = tri(n - 2);\n        tri_1.push(tri_2.pop() + tri_1.pop());\n\
    \        list.push(tri_1);\n    }\n    list", "    let mut list = vec![0; n +\
    \ 1];\n    list[0] = 3;\n    list[1] = 1;\n    list[2] = 2;\n    list[3] = 1 +\
    \ n / 2;\n    for i in 2..=n {\n        list[i] = list[i-1] + list[i-2];\n   \
    \ }\n    list", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n + 1 {\n \
    \       tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n\
    \    }\n    tri", "    let mut result: Vec<isize> = vec![0; n + 1];\n    result[0]\
    \ = 3;\n    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut result: Vec<isize> = vec![];\n    if n == 0\
    \ {\n        result.push(3);\n        return result;\n    }\n    if n % 2 == 0\
    \ {\n        result.push(1 + n / 2);\n    } else {\n        result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    result", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n   \
    \     vec.push(n / 2);\n    } else {\n        vec.push(1);\n        vec.push(n\
    \ - 1);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut tri = vec![1,\
    \ 1, 1];\n    for i in 1..n {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n /\
    \ 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n    \
    \    vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    for i in 2..n {\n        if i % 2 ==\
    \ 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        } else {\n            vec.push(vec.last().unwrap());\n        }\n   \
    \ }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n     \
    \   vec.push(3);\n    } else {\n        let mut tri_1 = tri(n - 1);\n        let\
    \ mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n + 1);\n        vec.push(tri_1\
    \ + tri_2 + tri_3);\n    }\n    vec", "    let mut result: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n + 1);\n        result.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0\
    \ {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n      \
    \  vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n+1 {\n \
    \       tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n\
    \    }\n    tri", "    let mut result = vec![3, 1];\n    if n % 2 == 0 {\n   \
    \     result[1] = 1 + n / 2;\n    } else {\n        result[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n    }\n    result", "    let mut result = vec![];\n    if\
    \ n % 2 == 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n   \
    \ } else {\n        result.push(1);\n        result.push(1 + n / 2);\n       \
    \ result.push(1 + n / 2);\n    }\n    result", "    let mut result: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n        let\
    \ mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n        let mut tri_3:\
    \ isize = 3;\n        for _ in 0..n {\n            result.push(tri_1);\n     \
    \       tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = tri_1\
    \ + tri_2 + tri_3;\n        }\n    }\n    result", "    let mut vec = vec![0;\
    \ n + 1];\n    vec[0] = 3;\n    for i in 1..n {\n        vec[i] = vec[i - 1] +\
    \ vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n\
    \    vec[0] = 3;\n    vec[1] = 1;\n    for i in 2..n + 1 {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2];\n    }\n    vec", "    let mut result = vec![1, 1, 1];\n\
    \    if n % 2 == 0 {\n        result[0] = 1 + n / 2;\n    } else {\n        result[0]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    result", "    let mut vec\
    \ = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    for i in 2..n + 1 {\n\
    \        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n   \
    \ if n % 2 == 1 {\n        vec.push(1);\n    }\n    for i in 2..n / 2 {\n    \
    \    vec.push(i + vec[i-2] + vec[i-1]);\n    }\n    vec", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n <= 1 {\n        result.resize(1);\n        result[0]\
    \ = n;\n    } else {\n        let mut tri_1: isize = 1;\n        let mut tri_2:\
    \ isize = 2;\n        let mut tri_3: isize = 3;\n        while tri_3 <= n {\n\
    \            result.push(tri_1);\n            result.push(tri_2);\n          \
    \  result.push(tri_3);\n            tri_1 = tri_2;\n            tri_2 = tri_3;\n\
    \            tri_3 += 1;\n        }\n    }\n    result", "    let mut tri = vec![1,\
    \ 1, 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut tri = vec![1, 1,\
    \ 1];\n    for i in 1..n {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut result = vec![0;\
    \ n + 1];\n    result[0] = 3;\n    for i in 1..=n {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i - 1];\n    }\n    result", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n\
    \        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n      \
    \  let mut tri_3: isize = 3;\n        while tri_3 <= n {\n            result.push(tri_1);\n\
    \            result.push(tri_2);\n            result.push(tri_3);\n          \
    \  tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 += 1;\n     \
    \   }\n    }\n    result", "    let mut result = vec![];\n    if n == 0 {\n  \
    \      result.push(3);\n        return result;\n    }\n    if n % 2 == 0 {\n \
    \       result.push(1);\n        result.push(n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        result.push(tri_1.pop()\
    \ + tri_2.pop());\n    }\n    result", "    let mut tri_vec: Vec<isize> = Vec::new();\n\
    \    tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        tri_vec.push(1 + n\
    \ / 2);\n    }\n    tri_vec", "    let mut result: Vec<isize> = vec![];\n    if\
    \ n <= 1 {\n        result.push(n);\n    } else {\n        let mut tri_1 = tri(n\
    \ - 1);\n        let mut tri_2 = tri(n - 2);\n        result.push(tri_1 + tri_2);\n\
    \        if n % 2 == 0 {\n            tri_1.push(tri_1 + tri_2);\n           \
    \ tri_2.push(tri_1 + tri_2);\n        }\n    }\n    result", "    let mut list\
    \ = vec![0; n + 2];\n    list[0] = 1 + n / 2;\n    if n % 2 == 0 {\n        list[1]\
    \ = list[0] + list[1];\n    }\n    list[2] = list[0] + list[1] + list[2];\n  \
    \  list", "    let mut result: Vec<isize> = vec![];\n    if n <= 1 {\n       \
    \ result.append(1);\n        return result;\n    }\n    if n % 2 == 0 {\n    \
    \    result.append(tri(n - 1) + tri(n - 2));\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n    }\n    result", "    if n < 3 {\n    \
    \    return vec![];\n    }\n    let mut result = vec![1, 1, 1];\n    for i in\
    \ 2..n {\n        let mut current = result[i..].iter().cloned().collect::<Vec<_>>();\n\
    \        let mut next = vec![1, 1, 1];\n        for j in 2..i {\n            next.push(current[j]\
    \ + current[j - 1] + current[j - 2]);\n        }\n        result = next;\n   \
    \ }\n    result", "    let mut result = vec![];\n    if n % 2 == 0 {\n       \
    \ result.push(3);\n    }\n    for i in 1..n / 2 {\n        result.push(1 + i /\
    \ 2);\n    }\n    for i in 2..n / 2 {\n        result.push(result[i-2] + result[i-1]);\n\
    \    }\n    result", "    let mut result: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        result.push(3);\n        result.push(1 + n / 2);\n    } else {\n\
    \        result.push(3);\n        result.push(1 + n / 2);\n        result.push(1\
    \ + n / 2);\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec = vec![3,\
    \ 1];\n    for i in 2..n + 1 {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap());\n        }\n    }\n    vec", "    let mut result:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n       \
    \ result.push(1 + n / 2);\n    } else {\n        result.push(1);\n        result.push(1\
    \ + n / 2);\n        result.push(1 + n / 2);\n    }\n    result", "    let mut\
    \ result = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n    }\n    for\
    \ i in 1..=n / 2 {\n        result.push(i + tri(n - i) + tri(n - i - 2));\n  \
    \  }\n    result", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n\
    \    for i in 1..n {\n        result[i] = result[i-2] + result[i-1];\n    }\n\
    \    result", "    let mut result = vec![0; n + 1];\n    result[0] = 3;\n    for\
    \ i in 1..=n {\n        result[i] = result[i - 1] + result[i - 2] + result[i +\
    \ 1];\n    }\n    result", "    let mut result = vec![];\n    if n % 2 == 0 {\n\
    \        result.append(3);\n    }\n    for i in 1..n / 2 {\n        result.push(1\
    \ + i / 2);\n    }\n    for i in 2..n / 2 {\n        result.push(tri(i - 1) +\
    \ tri(i - 2) + tri(i + 1));\n    }\n    result", "    let mut result = vec![3,\
    \ 1];\n    if n % 2 == 0 {\n        result[1] = 1 + n / 2;\n    } else {\n   \
    \     result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    result", " \
    \   let mut result = vec![];\n    if n == 0 {\n        result.push(3);\n     \
    \   return result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n - 1)\
    \ + tri(n - 2));\n    } else {\n        result.push(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    }\n    result", "    let mut result: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1: isize = 3;\n        let mut tri_2: isize = 1;\n        let mut tri_3:\
    \ isize = 2;\n        while tri_3 <= n {\n            tri_1 = tri_2;\n       \
    \     tri_2 = tri_3;\n            tri_3 = tri_1 + tri_2 + tri_3;\n           \
    \ result.push(tri_3);\n        }\n    }\n    result", "    let mut tri = vec![1,\
    \ 1, 1];\n    if n % 2 == 0 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    } else {\n        tri.push(tri[tri.len() -\
    \ 1] + tri[tri.len() - 2] + tri[tri.len() - 3] + tri[tri.len() - 4]);\n    }\n\
    \    tri", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let\
    \ mut result = vec![];\n    if n == 0 {\n        result.push(3);\n        return\
    \ result;\n    }\n    if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    } else {\n        result.push(tri(n - 1) + tri(n -\
    \ 2));\n    }\n    result", "    let mut tri = vec![1, 1, 1];\n    for i in 2..n\
    \ + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len()\
    \ - 3]);\n    }\n    tri", "    let mut result: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        result.push(3);\n    } else {\n        result.push(1 + n / 2);\n\
    \        if n % 2 == 1 {\n            result.push(1 + n / 2 + n / 2);\n      \
    \  }\n    }\n    result", "    let mut result = vec![0; n + 1];\n    result[0]\
    \ = 3;\n    for i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n\
    \    }\n    result", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n   \
    \ vec[1] = 1;\n    for i in 2..n {\n        vec[i] = vec[i - 1] + vec[i - 2];\n\
    \    }\n    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    if n % 2 == 0 {\n \
    \       tri_vec.push(1 + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len()\
    \ - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n  \
    \  tri_vec", "    let mut tri = vec![1, 1, 1];\n    for i in 1..n+1 {\n      \
    \  tri.push(tri[tri.len() - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n \
    \   }\n    tri", "    let mut result = vec![3, 1];\n    for i in 2..n + 1 {\n\
    \        if i % 2 == 0 {\n            result.push(result.last().unwrap() + result.last().unwrap()\
    \ + result.last().unwrap());\n        } else {\n            result.push(result.last().unwrap());\n\
    \        }\n    }\n    result", "    let mut result = vec![];\n    if n == 0 {\n\
    \        result.push(3);\n    } else {\n        let mut tri_1 = vec![1, 1, 1];\n\
    \        let mut tri_2 = vec![1, 1, 1];\n        let mut tri_3 = vec![1, 1, 1];\n\
    \        for i in 0..n {\n            tri_1.push(tri_1.last().unwrap() + tri_2.last().unwrap()\
    \ + tri_3.last().unwrap());\n            tri_2.push(tri_1.last().unwrap());\n\
    \            tri_3.push(tri_2.last().unwrap());\n        }\n        result.push(tri_1.last().unwrap());\n\
    \        result.push(tri_2.last().unwrap());\n        result.push(tri_3.last().unwrap());\n\
    \    }\n    result", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n\
    \        vec.push(3);\n    } else {\n        vec.push(1 + n / 2);\n        if\
    \ n % 2 == 0 {\n            vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..(n + 1) {\n       \
    \ if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut list = vec![];\n    let mut tri_1 =\
    \ vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 1];\n    let mut tri_3 = vec![1,\
    \ 1, 1];\n    for i in 1..n+1 {\n        list.push(tri_1[tri_1.len() - 1] + tri_2[tri_2.len()\
    \ - 1] + tri_3[tri_3.len() - 1]);\n        if i % 2 == 0 {\n            tri_1.push(tri_1[tri_1.len()\
    \ - 1] + tri_2[tri_2.len() - 1]);\n        } else {\n            tri_2.push(tri_2[tri_2.len()\
    \ - 1] + tri_3[tri_3.len() - 1]);\n        }\n    }\n    list", "    if n == 0\
    \ {\n        return vec![];\n    }\n    let mut result = vec![];\n    let mut\
    \ tri_1 = vec![1, 1, 1];\n    let mut tri_2 = vec![1, 1, 1];\n    let mut tri_3\
    \ = vec![1, 1, 1];\n    for i in 1..n {\n        tri_1.push(tri_1.pop() + tri_2.pop()\
    \ + tri_3.pop());\n        tri_2.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n\
    \        tri_3.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n        result.push(tri_1.pop()\
    \ + tri_2.pop() + tri_3.pop());\n    }\n    result", "    let mut tri = vec![1,\
    \ 1, 1];\n    for i in 1..n {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut result = vec![3,\
    \ 1];\n    for i in 1..n {\n        let mut current = result[0];\n        result[0]\
    \ = result[1] + result[2];\n        result[1] = current;\n    }\n    result",
  "    let mut result = vec![];\n    let mut tri_1 = vec![1, 1, 1];\n    let mut tri_2\
    \ = vec![1, 1, 1];\n    let mut tri_3 = vec![1, 1, 1];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(tri_1.pop() + tri_2.pop() +\
    \ tri_3.pop());\n        } else {\n            result.push(tri_1.pop() + tri_2.pop()\
    \ + tri_3.pop());\n            result.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n\
    \        }\n    }\n    result", "    let mut result = vec![];\n    if n == 0 {\n\
    \        result.push(3);\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.push(1 + n / 2);\n    } else {\n        let mut tri_1 = tri(n\
    \ - 1);\n        let mut tri_2 = tri(n - 2);\n        result.push(tri_1.pop()\
    \ + tri_2.pop() + tri_1.pop());\n    }\n    result", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n\
    \    vec[0] = 3;\n    vec[1] = 1;\n    vec[2] = 2;\n    for i in 2..vec.len()\
    \ {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n <= 1 {\n        vec.push(1);\n\
    \        return vec;\n    }\n    let mut tri_1 = 1;\n    let mut tri_2 = 1;\n\
    \    let mut tri_3 = 1;\n    for i in 1..n {\n        tri_1 = tri_1 + i;\n   \
    \     tri_2 = tri_2 + i;\n        tri_3 = tri_3 + i;\n    }\n    vec.push(tri_1);\n\
    \    vec.push(tri_2);\n    vec.push(tri_3);\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..n+1 {\n     \
    \   if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n    vec", "    let mut tri = vec![1,\
    \ 1, 1];\n    for i in 1..n + 1 {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut result = vec![];\n\
    \    if n == 0 {\n        result.push(3);\n        return result;\n    }\n   \
    \ if n % 2 == 0 {\n        result.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        tri_1.push(tri_1.pop()\
    \ + tri_2.pop());\n        result.push(tri_1.pop() + tri_2.pop());\n    }\n  \
    \  result", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n\
    \ % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n\
    \ / 2 {\n        vec.push(i + 1 + n / 2);\n    }\n    for i in 2..n {\n      \
    \  vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut tri_vec:\
    \ Vec<isize> = vec![];\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1\
    \ + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut result\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n - 3);\n        result.push(tri_1 + tri_2 + tri_3);\n    }\n  \
    \  result", "    let mut result = vec![0; n + 2];\n    result[0] = 3;\n    for\
    \ i in 1..=n {\n        result[i] = result[i-1] + result[i-2];\n    }\n    result",
  "    let mut tri = vec![1, 1, 1];\n    for i in 1..n+1 {\n        tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    if n\
    \ == 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![1];\n\
    \    }\n    if n % 2 == 0 {\n        let mut result = vec![1, 1, 1];\n       \
    \ result[1] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[2] = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n        result[3] = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n        result[4] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \       result[5] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[6] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[7] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[8] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[9] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[10]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[11] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[12] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[13] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[14]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[15] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[16] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[17] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[18]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[19] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[20] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[21] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[22]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[23] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[24] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[25] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[26]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[27] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result[28] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        result[29] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[30]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result[31] = tri(n - 1) + tri(n\
    \ - 2) + tri"]
stop_tokens:
- "\n}"
