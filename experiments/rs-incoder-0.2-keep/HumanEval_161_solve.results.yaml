name: HumanEval_161_solve
language: rust
results:
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpozzb1gwp.rs:16:15\n   |\n16 |             s.swap(i, s.len()\
    \ - i - 1);\n   |               ^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `swap` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpozzb1gwp.rs:17:17\n   |\n17 |             res.swap(i, s.len() - i -\
    \ 1);\n   |                 ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpakzpqw_5.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpakzpqw_5.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpakzpqw_5.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(i.to_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(i);\n        }\n    }\n    res.reverse();\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ynedyfo.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6ynedyfo.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6ynedyfo.rs:21:26\n   |\n21 |             res.push_str(i);\n  \
    \ |                          ^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp6ynedyfo.rs:24:9\n   |\n24 |     res.reverse();\n   |         ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp53fnh3ad.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp53fnh3ad.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fnh3ad.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase().is_ascii() {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.reverse();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpju3zwt0b.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpju3zwt0b.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase().is_ascii()\
    \ {\n   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpju3zwt0b.rs:17:31\n\
    \   |\n17 |                 res.push_str(&s[i].to_ascii_lowercase());\n   |  \
    \                             ^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n     "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpn2gp_eeq.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_ascii_lowercase(),\n   |         ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpn2gp_eeq.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpn2gp_eeq.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse().to_string()\n   |                      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5e6mm5g.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd5e6mm5g.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd5e6mm5g.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxr_t9tpt.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxr_t9tpt.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i];\n        }\n        res\
    \ += s[i];\n        i += 1;\n    }\n    return res;\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp97u45kt3.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp97u45kt3.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp97u45kt3.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9e0cqqbk.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9e0cqqbk.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9e0cqqbk.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \        'A' .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpi3rxoq_w.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_string().to_uppercase(),\n   |        \
    \ ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpi3rxoq_w.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpi3rxoq_w.rs:14:14\n   |\n11 |       s.chars().map(|c| match c {\n\
    \   |  _______________________-\n12 | |         'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n13 | |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n14 | |         _ => c,\n   | |              ^- help: try using\
    \ a conversion method: `.to_string()`\n   | |              |\n   | |         \
    \     expected struct `String`, found `char`\n15 | |     }).collect::<String>().reverse()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpi3rxoq_w.rs:15:28\n\
    \   |\n15 |     }).collect::<String>().reverse()\n   |                       \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0658.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjbxfl3vg.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjbxfl3vg.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0m_ix3dm.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0m_ix3dm.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0m_ix3dm.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase()\
    \ == i {\n                res.push_str(i.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(i.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpus1xykww.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpus1xykww.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpus1xykww.rs:21:26\n\
    \   |\n21 |             res.push_str(i);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpus1xykww.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(&i.to_lowercase());\n\
    \        } else {\n            res.push_str(&i.to_uppercase());\n        }\n \
    \   }\n    if res.is_empty() {\n        return s;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltbv1z__.rs:15:26\n   |\n\
    15 |             res.push_str(&i.to_lowercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpltbv1z__.rs:17:26\n   |\n17 |\
    \             res.push_str(&i.to_uppercase());\n   |                         \
    \ ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToUppercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res.push_str(&s.to_ascii_lowercase());\n    return res;\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd1hn6p8.rs:15:26\n   |\n\
    15 |             res.push_str(&c.to_ascii_uppercase());\n   |                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptd1hn6p8.rs:17:26\n   |\n17 |             res.push_str(&c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| if c.is_letter() {\n        c.to_ascii_lowercase().to_string()\n\
    \    } else {\n        c.to_string()\n    }).collect::<Vec<_>>().join(\"\").to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_letter` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpn2gzpbx4.rs:11:28\n   |\n11 |     s.chars().map(|c|\
    \ if c.is_letter() {\n   |                            ^^^^^^^^^ method not found\
    \ in `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzt7gdf7i.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzt7gdf7i.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzt7gdf7i.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvdfrct0s.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvdfrct0s.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvdfrct0s.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(\"0\");\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0i1rz263.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0i1rz263.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqh7hjtbq.rs:15:26\n   |\n\
    15 |             res.push_str(&c.to_ascii_uppercase());\n   |                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqh7hjtbq.rs:17:26\n   |\n17 |             res.push_str(&c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_lowercase() == s[i] {\n                res.push_str(&s[i].to_uppercase());\n\
    \            } else {\n                res.push_str(&s[i].to_lowercase());\n \
    \           }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(\"\\0\");\n    return res;\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpn2n7ylh_.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn2n7ylh_.rs:16:16\n   |\n16 |             if s[i].to_lowercase()\
    \ == s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn2n7ylh_.rs:16:39\n   |\n16 |             if s[i].to_lowercase()\
    \ == s[i] {\n   |                                       ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str a"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n\
    \        'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpvhbanadz.rs:15:28\n   |\n15 |     }).collect::<String>().reverse()\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpnr49vc7a.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_ascii_lowercase(),\n   |         ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpnr49vc7a.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpnr49vc7a.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse()\n   |                            ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9xgbijfk.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9xgbijfk.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9xgbijfk.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44sby1r2.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp44sby1r2.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp44sby1r2.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push(c);\n            } else {\n               \
    \ res.push(c.to_ascii_uppercase());\n            }\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    res.reverse();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp_v0tkil1.rs:24:9\n   |\n24 |     res.reverse();\n\
    \   |         ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpby7m2pt7.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpby7m2pt7.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpby7m2pt7.rs:20:18\n\
    \   |\n20 |     res.push_str(s);\n   |                  ^\n   |              \
    \    |\n   |                  expected `&str`, found struct `String`\n   |   \
    \               help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_ascii_lowercase() {\n            res.push_str(&ch.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_ascii_lowercase());\n     \
    \   }\n    }\n    res.push_str(&s);\n    return res\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcqy70vr1.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_ascii_uppercase());\n   |               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcqy70vr1.rs:17:26\n   |\n17 |             res.push_str(&ch.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_ascii() {\n            if ch.is_lowercase()\
    \ {\n                res.push_str(&ch.to_uppercase());\n            } else {\n\
    \                res.push_str(&ch.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&ch);\n        }\n    }\n    res.reverse();\n  \
    \  res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu6he_53r.rs:16:30\n   |\n\
    16 |                 res.push_str(&ch.to_uppercase());\n   |                 \
    \             ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu6he_53r.rs:18:30\n   |\n18 |\
    \                 res.push_str(&ch.to_lowercase());\n   |                    \
    \          ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu6he_53r.rs:21:26\n   |\n21 |\
    \             res.push_str(&ch);\n   |                          ^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpu6he_53r.rs:24:9\n   |\n24 |  \
    \   res.reverse();\n   |         ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfvjimo70.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfvjimo70.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfvjimo70.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_ascii() {\n            if c.is_lowercase() {\n                res.push_str(c.to_uppercase());\n\
    \            } else {\n                res.push_str(c.to_lowercase());\n     \
    \       }\n        } else {\n            res.push_str(&c);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpceuisbl_.rs:15:30\n   |\n\
    15 |                 res.push_str(c.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpceuisbl_.rs:17:30\n   |\n17 |              \
    \   res.push_str(c.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpceuisbl_.rs:20:26\n   |\n20 |             res.push_str(&c);\n \
    \  |                          ^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(i.to_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(i);\n        }\n    }\n    res.reverse();\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdon7tznz.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdon7tznz.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdon7tznz.rs:21:26\n   |\n21 |             res.push_str(i);\n  \
    \ |                          ^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpdon7tznz.rs:24:9\n   |\n24 |     res.reverse();\n   |         ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            }\n      \
    \  } else {\n            res.push_str(&c.to_string());\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj9ofimfi.rs:15:30\n   |\n\
    15 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj9ofimfi.rs:17:30\n   |\n17 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].is_lowercase() {\n                res.push_str(&s[i .. i + 1].reverse());\n\
    \                i += 1;\n            } else {\n                res.push_str(&s[i\
    \ .. i + 1]);\n                i += 1;\n            }\n        } else {\n    \
    \        res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\n    }\n\
    \    res.push_str(&s[i .. s.len()]);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5wve2upj.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5wve2upj.rs:16:16\n   |\n16 |             if s[i].is_lowercase()\
    \ {\n   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `reverse` found for type `str` in the current scope\n  --> /tmp/tmp5wve2upj.rs:17:45\n\
    \   |\n17 |                 res.push_str(&s[i .. i + 1].reverse());\n   |    \
    \                                         ^^^^^^^ method not found in `str`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1b0hyw8.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn1b0hyw8.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase() {\n\
    \                res.push_str(c.to_uppercase());\n            } else {\n     \
    \           res.push_str(c.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c);\n        }\n    }\n    if res.chars().count() ==\
    \ 0 {\n        res.push_str(&s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp828xxpzk.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp828xxpzk.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp828xxpzk.rs:21:26\n   |\n21 |             res.push_str(&c);\n \
    \  |                          ^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsw1rez5j.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsw1rez5j.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb6q2g1xv.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb6q2g1xv.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jbtjnhh.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jbtjnhh.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jbtjnhh.rs:20:18\n\
    \   |\n20 |     res.push_str(s);\n   |                  ^\n   |              \
    \    |\n   |                  expected `&str`, found struct `String`\n   |   \
    \               help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n\
    \                res.push_str(c.to_ascii_uppercase());\n            } else {\n\
    \                res.push_str(c.to_ascii_lowercase());\n            }\n      \
    \  } else {\n            res.push_str(&c.to_string());\n        }\n    }\n   \
    \ if res.chars().count() == 0 {\n        res.push_str(\"\\0\");\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgav53ncx.rs:15:30\n   |\n\
    15 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgav53ncx.rs:17:30\n   |\n17 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(&s);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2uf0kvyg.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2uf0kvyg.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2uf0kvyg.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    res.push_str(&s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa1sqil3_.rs:15:26\n   |\n\
    15 |             res.push_str(&i.to_uppercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa1sqil3_.rs:17:26\n   |\n17 |\
    \             res.push_str(&i.to_lowercase());\n   |                         \
    \ ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase()\
    \ == i {\n                res.push_str(i.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(i.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgy2det8x.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgy2det8x.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgy2det8x.rs:21:26\n\
    \   |\n21 |             res.push_str(i);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgy2det8x.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqztf1yed.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqztf1yed.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqztf1yed.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n     \
    \       if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(&s[s.len() - 1]);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp71wg27n7.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_letter() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp71wg27n7.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp71wg27n7.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usi"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_ascii_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvmmh0kwy.rs:15:26\n   |\n\
    15 |             res.push_str(&c.to_ascii_uppercase());\n   |                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvmmh0kwy.rs:17:26\n   |\n17 |             res.push_str(&c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| if c.is_letter() {\n        match c.to_lowercase()\
    \ {\n            \"a\" => \"A\",\n            \"b\" => \"B\",\n            \"\
    c\" => \"C\",\n            \"d\" => \"D\",\n            \"e\" => \"E\",\n    \
    \        \"f\" => \"F\",\n            \"g\" => \"G\",\n            \"h\" => \"\
    H\",\n            \"i\" => \"I\",\n            \"j\" => \"J\",\n            \"\
    k\" => \"K\",\n            \"l\" => \"L\",\n            \"m\" => \"M\",\n    \
    \        \"n\" => \"N\",\n            \"o\" => \"O\",\n            \"p\" => \"\
    P\",\n            \"q\" => \"Q\",\n            \"r\" => \"R\",\n            \"\
    s\" => \"S\",\n            \"t\" => \"T\",\n            \"u\" => \"U\",\n    \
    \        \"v\" => \"V\",\n            \"w\" => \"W\",\n            \"x\" => \"\
    X\",\n            \"y\" => \"Y\",\n            \"z\" => \"Z\",\n            _\
    \ => c,\n        }\n    } else {\n        c\n    }).collect::<String>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_letter` found for type `char` in the\
    \ current scope\n  --> /tmp/tmp8az3ee9k.rs:11:28\n   |\n11 |     s.chars().map(|c|\
    \ if c.is_letter() {\n   |                            ^^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8az3ee9k.rs:13:13\n\
    \   |\n12 |         match c.to_lowercase() {\n   |               ----------------\
    \ this expression has type `ToLowercase`\n13 |             \"a\" => \"A\",\n \
    \  |             ^^^ expected struct `ToLowercase`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8az3ee9k.rs:14:13\n   |\n12 |         match\
    \ c.to_lowercase() {\n   |               ---------------- this expression has\
    \ type `ToLowercase`\n13 |             \"a\" => \"A\",\n14 |             \"b\"\
    \ => \"B\",\n   |             ^^^ expected struct `ToLowercase`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8az3ee9k.rs:15:13\n   |\n12 |\
    \         match c.to_lowercase() {\n   |               ---------------- this expression\
    \ has type `ToLowercase`\n...\n15 |             \"c\" => \"C\",\n   |        \
    \     ^^^ expected struct `ToLowercase`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8az3ee9k.rs:16:13\n   |\n12 |         match c.to_lowercase()\
    \ {\n   |               ---------------- this expression has type `ToLowercase`\n\
    ...\n16 |             \"d\" => \"D\",\n   |             ^^^ expected struct `ToLowercase`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8az3ee9k.rs:17:13\n\
    \   |\n12 |         match c.to_lowercase() {\n   |               ----------------\
    \ this expression has type `ToLowercase`\n...\n17 |             \"e\" => \"E\"\
    ,\n   |             ^^^ expected struct `ToLowercase`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8az3ee9k.rs:18:13\n   |\n12 |         match\
    \ c.to_lowercase() {\n   |               ---------------- this expression has\
    \ type `ToLowercase`\n...\n18 |             \"f\" => \"F\",\n   |            \
    \ ^^^ expected struct `ToLowercase`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8az3ee9k.rs:19:13\n   |\n12 |         match c.to_lowercase()\
    \ {\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2fuhnyc.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm2fuhnyc.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm2fuhnyc.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqe9jf1mf.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpqe9jf1mf.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpqe9jf1mf.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res.push_str(&s);\n    return res;\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"\
    ));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkjrtxt0d.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkjrtxt0d.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            i\
    \ += 1;\n        } else {\n            res.push_str(&s[i .. i].to_lowercase());\n\
    \            i += 1;\n        }\n    }\n    res.push_str(&s[i .. s.len()].to_lowercase());\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmped95tq6b.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw8h85b6j.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw8h85b6j.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8h85b6j.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \        'A' .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpkke0tx38.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_string().to_uppercase(),\n   |        \
    \ ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpkke0tx38.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpkke0tx38.rs:14:14\n   |\n11 |       s.chars().map(|c| match c {\n\
    \   |  _______________________-\n12 | |         'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n13 | |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n14 | |         _ => c,\n   | |              ^- help: try using\
    \ a conversion method: `.to_string()`\n   | |              |\n   | |         \
    \     expected struct `String`, found `char`\n15 | |     }).collect::<String>().reverse().to_string()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpkke0tx38.rs:15:28\n\
    \   |\n15 |     }).collect::<String>().reverse().to_string()\n   |           \
    \                 ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599, E0658.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(\"_\");\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6cizdcw5.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6cizdcw5.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(\"_\");\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7mzodmx4.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7mzodmx4.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res.reverse();\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpchi9a_jo.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpchi9a_jo.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchi9a_jo.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpchi9a_jo.rs:24:9\n \
    \  |\n24 |     res.reverse();\n   |         ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplsbs7e83.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_uppercase());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n  \
    \ = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplsbs7e83.rs:17:26\n   |\n17 |\
    \             res.push_str(&ch.to_lowercase());\n   |                        \
    \  ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        return s;\n    }\n    return res;\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmv2i3wz.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmv2i3wz.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptmv2i3wz.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvooaet4g.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvooaet4g.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm6cruqjd.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm6cruqjd.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm6cruqjd.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm6cruqjd.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(i.to_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(i);\n        }\n    }\n    if res.is_empty() {\n   \
    \     return s;\n    }\n    res.reverse();\n    return res;\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")),\
    \ String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvyk7y428.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvyk7y428.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvyk7y428.rs:21:26\n   |\n21 |             res.push_str(i);\n  \
    \ |                          ^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpvyk7y428.rs:27:9\n   |\n27 |     res.reverse();\n   |         ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_ascii() {\n            if let Some(upper) =\
    \ ch.to_ascii_lowercase() {\n                res.push_str(&upper);\n         \
    \   } else {\n                res.push_str(&ch.to_ascii_uppercase());\n      \
    \      }\n        } else {\n            res.push_str(&ch);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ynxxmm4.rs:15:20\n   |\n\
    15 |             if let Some(upper) = ch.to_ascii_lowercase() {\n   |        \
    \            ^^^^^^^^^^^   ----------------------- this expression has type `char`\n\
    \   |                    |\n   |                    expected `char`, found enum\
    \ `Option`\n   |\n   = note: expected type `char`\n              found enum `Option<_>`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp6ynxxmm4.rs:15:25\n   |\n15 |             if let Some(upper)\
    \ = ch.to_ascii_lowercase() {\n   |                         ^^^^^ doesn't have\
    \ a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: all local variables must have a statically known size\n\
    \   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]: the\
    \ size for values of type `str` cannot be known at compilation time\n   --> /tmp/tmp6ynxxmm4.rs:15:20\n\
    \    |\n15  |             if let Some(upper) = ch.to_ascii_lowercase() {\n   \
    \ |                    ^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Some`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ynxxmm4.rs:18:30\n\
    \   |\n18 |                 res.push_str(&ch.to_ascii_uppercase());\n   |    \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6ynxxmm4.rs:21:26\n   |\n21 |\
    \             res.push_str(&ch);\n   |                          ^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n     \
    \       if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(&s[s.len() - 1]);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmppj6s7a3w.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_letter() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmppj6s7a3w.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmppj6s7a3w.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usi"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n  \
    \      } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpobwfcpoz.rs:14:26\n   |\n\
    14 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpobwfcpoz.rs:16:26\n   |\n16 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpobwfcpoz.rs:20:22\n\
    \   |\n20 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvezd7zy.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_uppercase());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n  \
    \ = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbvezd7zy.rs:17:26\n   |\n17 |\
    \             res.push_str(&ch.to_lowercase());\n   |                        \
    \  ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbvezd7zy.rs:21:15\n   |\n12 |  \
    \   let mut res = String::new();\n   |                   ------------- expected\
    \ due to this value\n...\n21 |         res = \"#\";\n   |               ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |               |\n   |  \
    \             expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \        'A' .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp8vzjkbde.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_string().to_uppercase(),\n   |        \
    \ ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp8vzjkbde.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmp8vzjkbde.rs:14:14\n   |\n11 |       s.chars().map(|c| match c {\n\
    \   |  _______________________-\n12 | |         'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n13 | |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n14 | |         _ => c,\n   | |              ^- help: try using\
    \ a conversion method: `.to_string()`\n   | |              |\n   | |         \
    \     expected struct `String`, found `char`\n15 | |     }).collect::<String>().reverse().to_string()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8vzjkbde.rs:15:28\n\
    \   |\n15 |     }).collect::<String>().reverse().to_string()\n   |           \
    \                 ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599, E0658.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptbndgy_q.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptbndgy_q.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase() {\n\
    \                res.push_str(c.to_uppercase());\n            } else {\n     \
    \           res.push_str(c.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c);\n        }\n    }\n    if res.is_empty() {\n  \
    \      res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_6zi_va.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn_6zi_va.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn_6zi_va.rs:21:26\n   |\n21 |             res.push_str(&c);\n \
    \  |                          ^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn_6zi_va.rs:25:15\n   |\n12 |     let mut res\
    \ = String::new();\n   |                   ------------- expected due to this\
    \ value\n...\n25 |         res = \"#\";\n   |               ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |               |\n   |            \
    \   expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n     \
    \       i += 1;\n        } else {\n            res.push_str(&s[..i]);\n      \
    \      i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkab0pexl.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_letter() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg7i9_hv4.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7i9_hv4.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7i9_hv4.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jr3i_in.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0jr3i_in.rs:17:26\n   |\n17 |             res.push_str(i.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0jr3i_in.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(&i.to_uppercase());\n            } else {\n    \
    \            res.push_str(&i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&i);\n        }\n    }\n    if res.len() == 0 {\n  \
    \      res.push_str(\"0\");\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyn_7zlng.rs:16:30\n   |\n\
    16 |                 res.push_str(&i.to_uppercase());\n   |                  \
    \            ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n  \
    \ |\n   = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyn_7zlng.rs:18:30\n   |\n18 |\
    \                 res.push_str(&i.to_lowercase());\n   |                     \
    \         ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyn_7zlng.rs:21:26\n   |\n21 |\
    \             res.push_str(&i);\n   |                          ^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n\
    \        'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp315xj5qc.rs:15:28\n   |\n15 |     }).collect::<String>().reverse().to_string()\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe2hyuoo_.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe2hyuoo_.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    let mut s = s;\n    while\
    \ !s.is_empty() {\n        if s.chars().any(|c| c.is_ascii_lowercase()) {\n  \
    \          res.push_str(s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>().rev());\n\
    \        } else {\n            res.push_str(s);\n        }\n        s = s.chars().next().unwrap();\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp5guicgyi.rs:15:88\n\
    \    |\n15  |               res.push_str(s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>().rev());\n\
    \    |                                                                       \
    \                   ^^^ `String` is not an iterator; try calling `.chars()` or\
    \ `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5guicgyi.rs:17:26\n\
    \   |\n17 |             res.push_str(s);\n   |                          ^\n  \
    \ |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5guicgyi.rs:19:13\n\
    \   |\n12 |     let mut s = s;\n   |                 - expected due to this value\n\
    ...\n19 |         s = s.chars().next().unwrap();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |             |\n  \
    \ |             expected struct `String`, found `char`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lhd8bqy.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lhd8bqy.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcgrhvdjz.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcgrhvdjz.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcgrhvdjz.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpecccrvzu.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpecccrvzu.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpecccrvzu.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg8ouuh8q.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg8ouuh8q.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg8ouuh8q.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(\"0\");\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_6zkkp4x.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_6zkkp4x.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzawluers.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzawluers.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa6xzrz_w.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa6xzrz_w.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8n4qnz3d.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8n4qnz3d.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8n4qnz3d.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppa9t5uip.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppa9t5uip.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppa9t5uip.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpls6a4o0t.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpls6a4o0t.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpls6a4o0t.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc_ibv44l.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc_ibv44l.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc_ibv44l.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjluhmzu3.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjluhmzu3.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase() == s[i] {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res += s[i];\n        i += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmph3301n7d.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph3301n7d.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph3301n7d.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ == s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp94byh8ar.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp94byh8ar.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n  \
    \          s[i] = s[i].to_ascii_uppercase();\n        } else {\n            s[i]\
    \ = s[i].to_ascii_lowercase();\n        }\n        res += s[i];\n        i +=\
    \ 1;\n    }\n    res += s[s.len() - 1];\n    return res;\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")),\
    \ String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpn7n7y5al.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_lowercase() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn7n7y5al.rs:16:13\n   |\n16 |             s[i] = s[i].to_ascii_uppercase();\n\
    \   |             ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpn7n7y5al.rs:16:20\n   |\n16 |             s[i] = s[i].to_ascii_uppercase();\n\
    \   |                    ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqkod7dw.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbqkod7dw.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(\"_\");\n    }\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpicpah6c0.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpicpah6c0.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwh1ypvz7.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwh1ypvz7.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwh1ypvz7.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfpl0nlvo.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfpl0nlvo.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfpl0nlvo.rs:21:22\n   |\n21 |\
    \         res.push_str(s);\n   |                      ^\n   |                \
    \      |\n   |                      expected `&str`, found struct `String`\n \
    \  |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpegint5xe.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpegint5xe.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpegint5xe.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(ch.to_uppercase());\n\
    \        } else {\n            res.push_str(ch.to_lowercase());\n        }\n \
    \   }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_ve3sbv.rs:15:26\n   |\n\
    15 |             res.push_str(ch.to_uppercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl_ve3sbv.rs:17:26\n   |\n17 |             res.push_str(ch.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl_ve3sbv.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4p1bm3y.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb4p1bm3y.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb4p1bm3y.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv90o60a8.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv90o60a8.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv90o60a8.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1yvh0sw.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn1yvh0sw.rs:17:26\n   |\n17 |             res.push_str(i.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1yvh0sw.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpan69pnsw.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpan69pnsw.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpan69pnsw.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn4rm7zh.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppn4rm7zh.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn4rm7zh.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplcjjv7fv.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplcjjv7fv.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn8an6ju7.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn8an6ju7.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn8an6ju7.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.is_empty()\
    \ {\n        return s;\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"\
    ));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpesl7zhbm.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesl7zhbm.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpesl7zhbm.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphhfesmbz.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphhfesmbz.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphhfesmbz.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpweycp2aw.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpweycp2aw.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpweycp2aw.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase()\
    \ == i {\n                res.push_str(i.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(i.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp60zrfvfg.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp60zrfvfg.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp60zrfvfg.rs:21:26\n\
    \   |\n21 |             res.push_str(i);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp60zrfvfg.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7160jmjq.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7160jmjq.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7160jmjq.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(\"0\");\n    }\n    return res;\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1i49nixh.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1i49nixh.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1i49nixh.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    let mut s = String::from(s);\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter()\
    \ {\n            res.push_str(&s[i .. i + 1].to_lowercase());\n            i +=\
    \ 1;\n        } else {\n            res.push_str(&s[i .. i + 1]);\n          \
    \  i += 1;\n        }\n    }\n    res.push_str(&s[..i].to_lowercase());\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2mkeqqoz.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_letter() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n\
    \        'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp4swf8t0m.rs:15:28\n   |\n15 |     }).collect::<String>().reverse()\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    return res;\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2nd0p1cz.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2nd0p1cz.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            res.push_str(i.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(i.to_ascii_uppercase());\n       \
    \ }\n    }\n    if res.len() == 0 {\n        res.push_str(s);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfwp221n2.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_ascii_lowercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfwp221n2.rs:17:26\n   |\n17 |             res.push_str(i.to_ascii_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfwp221n2.rs:21:22\n   |\n21 |\
    \         res.push_str(s);\n   |                      ^\n   |                \
    \      |\n   |                      expected `&str`, found struct `String`\n \
    \  |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.push_str(&s[..i]);\n\
    \            i += 1;\n        } else {\n            res.push_str(&s[..i]);\n \
    \           i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpj2136yki.rs:16:15\n   |\n16 |             s.swap(i, s.len()\
    \ - i - 1);\n   |               ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrfddbt9.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplrfddbt9.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplrfddbt9.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvrp3oxbl.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvrp3oxbl.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n  \
    \      } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxui0_hb.rs:14:26\n   |\n\
    14 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkxui0_hb.rs:16:26\n   |\n16 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkxui0_hb.rs:20:22\n\
    \   |\n20 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmropob2s.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmropob2s.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb3y7b5t9.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb3y7b5t9.rs:17:26\n   |\n17 |             res.push_str(i.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb3y7b5t9.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_n_30ok.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4_n_30ok.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4_n_30ok.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgj5mhbnj.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgj5mhbnj.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgj5mhbnj.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n  \
    \          i += 1;\n            res.push_str(&s[i .. i].to_lowercase());\n   \
    \     } else {\n            res.push_str(&s[i .. i]);\n        }\n        i +=\
    \ 1;\n    }\n    res.push_str(&s[s.len() - 1 .. s.len()].to_lowercase());\n  \
    \  res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2g5pf5t_.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_lowercase() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| if c.is_letter() {\n        c.to_ascii_lowercase()\n\
    \    } else {\n        c.to_ascii_uppercase()\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_letter` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpwbltynt5.rs:11:28\n   |\n11 |     s.chars().map(|c|\
    \ if c.is_letter() {\n   |                            ^^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpwbltynt5.rs:15:28\n   |\n15 |     }).collect::<String>().reverse().to_string()\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n  \
    \          res.push_str(&s[i .. i + 1]);\n            i += 1;\n        } else\
    \ {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n        \
    \    i += 1;\n        }\n    }\n    res.push_str(&s[i .. s.len()]);\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpk3boj61e.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_lowercase() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpa1b12y9u.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_ascii_lowercase(),\n   |         ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpa1b12y9u.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpa1b12y9u.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse()\n   |                            ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(ch.to_uppercase());\n\
    \        } else {\n            res.push_str(ch.to_lowercase());\n        }\n \
    \   }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1n29zdx.rs:15:26\n   |\n\
    15 |             res.push_str(ch.to_uppercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph1n29zdx.rs:17:26\n   |\n17 |             res.push_str(ch.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1n29zdx.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.len() == 0 {\n        res.push_str(\"_\");\n    }\n   \
    \ return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_diyi9o.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd_diyi9o.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \        'A' .. 'Z' => c.to_string().to_lowercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp3lab8ul1.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_string().to_uppercase(),\n   |        \
    \ ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp3lab8ul1.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmp3lab8ul1.rs:14:14\n   |\n11 |       s.chars().map(|c| match c {\n\
    \   |  _______________________-\n12 | |         'a' .. 'z' => c.to_string().to_uppercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n13 | |         'A' .. 'Z' => c.to_string().to_lowercase(),\n\
    \   | |                       ---------------------------- this is found to be\
    \ of type `String`\n14 | |         _ => c,\n   | |              ^- help: try using\
    \ a conversion method: `.to_string()`\n   | |              |\n   | |         \
    \     expected struct `String`, found `char`\n15 | |     }).collect::<String>().reverse()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp3lab8ul1.rs:15:28\n\
    \   |\n15 |     }).collect::<String>().reverse()\n   |                       \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0658.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3j_fkc6.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc3j_fkc6.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3j_fkc6.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpecgedudm.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpecgedudm.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpecgedudm.rs:20:18\n\
    \   |\n20 |     res.push_str(s);\n   |                  ^\n   |              \
    \    |\n   |                  expected `&str`, found struct `String`\n   |   \
    \               help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpwnkd5v5m.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_ascii_lowercase(),\n   |         ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpwnkd5v5m.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpwnkd5v5m.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse().to_string()\n   |                      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    res.reverse();\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2f9zv6s.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm2f9zv6s.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpm2f9zv6s.rs:23:9\n   |\n23 |     res.reverse();\n\
    \   |         ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpglhbh34n.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpglhbh34n.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglhbh34n.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6zbn8vna.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6zbn8vna.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6zbn8vna.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaijnoinm.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaijnoinm.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaijnoinm.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c as char,\n\
    \        'A' .. 'Z' => c as char,\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmppgz7se9x.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c as char,\n   |         ^^^^^^^^^^\n   |\n\
    \   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmppgz7se9x.rs:13:9\n   |\n13 |         'A' .. 'Z' => c as char,\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmppgz7se9x.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse().to_string()\n   |                      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in s.chars() {\n  \
    \      if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n     \
    \           res.push_str(c.to_ascii_uppercase());\n            } else {\n    \
    \            res.push_str(c.to_ascii_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(c);\n        }\n    }\n    if res.is_empty() {\n\
    \        res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6a7_ais0.rs:15:30\n   |\n\
    15 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6a7_ais0.rs:17:30\n   |\n17 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6a7_ais0.rs:20:26\n\
    \   |\n20 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6a7_ais0.rs:24:15\n\
    \   |\n11 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n24 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphka76w4f.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphka76w4f.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphka76w4f.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(i.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(i.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(i);\n        }\n    }\n    if res.is_empty()\
    \ {\n        res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpug3cdl3e.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpug3cdl3e.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpug3cdl3e.rs:21:26\n\
    \   |\n21 |             res.push_str(i);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpug3cdl3e.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvh4x4rc0.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_lowercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvh4x4rc0.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_uppercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcq3jprsq.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcq3jprsq.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcq3jprsq.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fby9wk8.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4fby9wk8.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fby9wk8.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpljn46tju.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpljn46tju.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii() {\n            if i.is_lowercase() {\n\
    \                res.push_str(i.to_uppercase());\n            } else {\n     \
    \           res.push_str(i.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(i);\n        }\n    }\n    if res.is_empty() {\n   \
    \     res = \"#\";\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcxjn582z.rs:16:30\n   |\n\
    16 |                 res.push_str(i.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcxjn582z.rs:18:30\n   |\n18 |              \
    \   res.push_str(i.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcxjn582z.rs:21:26\n   |\n21 |             res.push_str(i);\n  \
    \ |                          ^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcxjn582z.rs:25:15\n   |\n12 |     let mut res\
    \ = String::new();\n   |                   ------------- expected due to this\
    \ value\n...\n25 |         res = \"#\";\n   |               ^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |               |\n   |            \
    \   expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfv88224.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplfv88224.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    return res;\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperwx20on.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmperwx20on.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmperwx20on.rs:21:15\n   |\n12 |\
    \     let mut res = String::new();\n   |                   ------------- expected\
    \ due to this value\n...\n21 |         res = \"#\";\n   |               ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |               |\n   |  \
    \             expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase() {\n\
    \                res.push_str(c.to_uppercase());\n            } else {\n     \
    \           res.push_str(c.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c);\n        }\n    }\n    if res.is_empty() {\n  \
    \      res\n    } else {\n        res\n    }\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbuveeul.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkbuveeul.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkbuveeul.rs:21:26\n   |\n21 |             res.push_str(&c);\n \
    \  |                          ^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            res.push_str(i.to_lowercase());\n\
    \        } else {\n            res.push_str(i.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    res.reverse();\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjz_j8cmm.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjz_j8cmm.rs:17:26\n   |\n17 |             res.push_str(i.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpjz_j8cmm.rs:23:9\n   |\n23 |     res.reverse();\n\
    \   |         ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.len()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_kak0dr.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv_kak0dr.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_kak0dr.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_kak0dr.rs:25:22\n\
    \   |\n25 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp399qr68.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp399qr68.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp399qr68.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgsf1yk2e.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgsf1yk2e.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgsf1yk2e.rs:21:15\n   |\n12 |\
    \     let mut res = String::new();\n   |                   ------------- expected\
    \ due to this value\n...\n21 |         res = \"#\";\n   |               ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |               |\n   |  \
    \             expected struct `String`, found `&str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54847nwn.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp54847nwn.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54847nwn.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_ascii_lowercase() {\n            res.push_str(i.to_ascii_uppercase());\n\
    \        } else if i.is_ascii_uppercase() {\n            res.push_str(i.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(i);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_lbpzvd.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv_lbpzvd.rs:17:26\n   |\n17 |             res.push_str(i.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv_lbpzvd.rs:19:26\n   |\n19 |\
    \             res.push_str(i);\n   |                          ^ expected `&str`,\
    \ found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    if res.chars().count() == 0 {\n        res.push_str(\"0\");\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dp9vd_q.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_uppercase());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n  \
    \ = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7dp9vd_q.rs:17:26\n   |\n17 |\
    \             res.push_str(&ch.to_lowercase());\n   |                        \
    \  ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s);\n    }\n    return res;\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsk9cudim.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsk9cudim.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk9cudim.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdpm_24bn.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpm_24bn.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' => c.to_ascii_lowercase(),\n\
    \        'A' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp6877w_vk.rs:15:28\n   |\n15 |     }).collect::<String>().reverse().to_string()\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n            if\
    \ s[i].to_ascii_lowercase().is_ascii() {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res.push_str(\"\\0\");\n    res\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")),\
    \ String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvj_kebg0.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii() {\n   |            ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvj_kebg0.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase().is_ascii()\
    \ {\n   |                ^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvj_kebg0.rs:17:31\n\
    \   |\n17 |                 res.push_str(&s[i].to_ascii_lowercase());\n   |  \
    \                             ^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n     "
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcpaa1r47.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcpaa1r47.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcpaa1r47.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res.push_str(s);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk32jeolu.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk32jeolu.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk32jeolu.rs:20:18\n   |\n20 |\
    \     res.push_str(s);\n   |                  ^\n   |                  |\n   |\
    \                  expected `&str`, found struct `String`\n   |              \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res.push_str(&s);\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprwn1q33r.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprwn1q33r.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprwn1q33r.rs:21:26\n\
    \   |\n21 |             res.push_str(&c);\n   |                          ^^ expected\
    \ `str`, found `char`\n   |\n   = note: expected reference `&str`\n          \
    \    found reference `&char`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppc_y6gxg.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppc_y6gxg.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppc_y6gxg.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzd_y6iew.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzd_y6iew.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    s.chars().map(|c| match c {\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        'A' .. 'Z' => c.to_ascii_uppercase(),\n        _ => c,\n    }).collect::<String>().reverse()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpcru0r_9b.rs:12:9\n\
    \   |\n12 |         'a' .. 'z' => c.to_ascii_lowercase(),\n   |         ^^^^^^^^^^\n\
    \   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmpcru0r_9b.rs:13:9\n   |\n13 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n\
    \   |         ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpcru0r_9b.rs:15:28\n   |\n15 | \
    \    }).collect::<String>().reverse()\n   |                            ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ucn69e_.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ucn69e_.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_letter() {\n     \
    \       if s[i].to_ascii_lowercase() != s[i] {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n\
    \    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n\
    \    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"\
    #a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\"\
    )), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\"\
    )), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\"\
    )), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\"\
    )), String::from(\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmph2rsk4y7.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_letter() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph2rsk4y7.rs:16:16\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmph2rsk4y7.rs:16:45\n   |\n16 |             if s[i].to_ascii_lowercase()\
    \ != s[i] {\n   |                                             ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usi"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n  \
    \          res.push_str(&s[i .. i + 1]);\n            i += 1;\n        } else\
    \ {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n        \
    \    i += 1;\n        }\n    }\n    res.push_str(&s[i ..]);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp7xk5tdc2.rs:15:12\n\
    \   |\n15 |         if s[i].is_ascii_lowercase() {\n   |            ^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3cieb5r3.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3cieb5r3.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3cieb5r3.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0661z87s.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0661z87s.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjhvy0vn7.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjhvy0vn7.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")),\
    \ String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp93on_vp9.rs:16:15\n   |\n16 |             s.swap(i, s.len()\
    \ - i - 1);\n   |               ^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `swap` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp93on_vp9.rs:17:17\n   |\n17 |             res.swap(i, s.len() - i -\
    \ 1);\n   |                 ^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `swap` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp93on_vp9.rs:20:17\n   |\n20 |             res.swap(i, s.len() - i -\
    \ 1);\n   |                 ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut res = String::new();\n    let mut s = String::from(s);\n\
    \    while !s.is_empty() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>());\n\
    \        } else {\n            res.push_str(s);\n        }\n        s = s.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).collect();\n    }\n    res.push_str(s);\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvh9gnt5b.rs:15:26\n   |\n\
    15 |             res.push_str(s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvh9gnt5b.rs:17:26\n   |\n17 |             res.push_str(s);\n\
    \   |                          ^\n   |                          |\n   |      \
    \                    expected `&str`, found struct `String`\n   |            \
    \              help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvh9gnt5b.rs:21:18\n   |\n21 |     res.push_str(s);\n  \
    \ |                  ^\n   |                  |\n   |                  expected\
    \ `&str`, found struct `String`\n   |                  help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(i.to_uppercase());\n\
    \        } else {\n            res.push_str(i.to_lowercase());\n        }\n  \
    \  }\n    res.reverse();\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"\
    aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"\
    ));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n\
    \    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n\
    \    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvvfgr9tm.rs:15:26\n   |\n\
    15 |             res.push_str(i.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvvfgr9tm.rs:17:26\n   |\n17 |             res.push_str(i.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpvvfgr9tm.rs:20:9\n   |\n20 |     res.reverse();\n\
    \   |         ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcur_ske6.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcur_ske6.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcur_ske6.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    if res.is_empty() {\n        res = \"#\".to_string();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6y675a2.rs:15:26\n   |\n\
    15 |             res.push_str(&i.to_uppercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt6y675a2.rs:17:26\n   |\n17 |\
    \             res.push_str(&i.to_lowercase());\n   |                         \
    \ ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(\"_\");\n    }\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjxa5sdus.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjxa5sdus.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprb3d8jdo.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprb3d8jdo.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase() {\n\
    \                res.push_str(c.to_uppercase());\n            } else {\n     \
    \           res.push_str(c.to_lowercase());\n            }\n        } else {\n\
    \            res.push_str(&c);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")),\
    \ String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_zpuwa93.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_uppercase());\n   |                   \
    \           ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_zpuwa93.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_lowercase());\n   |                              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_zpuwa93.rs:21:26\n   |\n21 |             res.push_str(&c);\n \
    \  |                          ^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.len() == 0 {\n        res.push_str(s.to_lowercase());\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdv1mckc.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprdv1mckc.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprdv1mckc.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7nhkovce.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7nhkovce.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7nhkovce.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3oj53mvg.rs:15:26\n   |\n\
    15 |             res.push_str(&c.to_ascii_uppercase());\n   |                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3oj53mvg.rs:17:26\n   |\n17 |             res.push_str(&c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i]);\n            i += 1;\n \
    \       }\n    }\n    res.push_str(&s[..i].to_lowercase());\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aasasdasdf\"`,\n right: `\"aSdF\"`', /tmp/tmprk194fum.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_lowercase() {\n            res.push_str(&ch.to_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_lowercase());\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_qd1s10.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_uppercase());\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n  \
    \ = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz_qd1s10.rs:17:26\n   |\n17 |\
    \             res.push_str(&ch.to_lowercase());\n   |                        \
    \  ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzc1863bq.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzc1863bq.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzc1863bq.rs:21:22\n   |\n21 |\
    \         res.push_str(s);\n   |                      ^\n   |                \
    \      |\n   |                      expected `&str`, found struct `String`\n \
    \  |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_ascii_lowercase() {\n            res.push_str(&ch.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&ch.to_ascii_lowercase());\n     \
    \   }\n    }\n    res.push_str(&s.chars().last().unwrap());\n    res\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkritwh5a.rs:15:26\n   |\n\
    15 |             res.push_str(&ch.to_ascii_uppercase());\n   |               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkritwh5a.rs:17:26\n   |\n17 |             res.push_str(&ch.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found\
    \ `char`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkritwh5a.rs:20:18\n\
    \   |\n20 |     res.push_str(&s.chars().last().unwrap());\n   |              \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmcnwuhx6.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmcnwuhx6.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for ch\
    \ in s.chars() {\n        if ch.is_ascii() {\n            if ch.is_lowercase()\
    \ {\n                res.push_str(&ch.to_uppercase());\n            } else {\n\
    \                res.push_str(&ch.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&ch);\n        }\n    }\n    res.reverse();\n  \
    \  res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplobc2eyd.rs:16:30\n   |\n\
    16 |                 res.push_str(&ch.to_uppercase());\n   |                 \
    \             ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplobc2eyd.rs:18:30\n   |\n18 |\
    \                 res.push_str(&ch.to_lowercase());\n   |                    \
    \          ^^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&ToLowercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplobc2eyd.rs:21:26\n   |\n21 |\
    \             res.push_str(&ch);\n   |                          ^^^ expected `str`,\
    \ found `char`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&char`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmplobc2eyd.rs:24:9\n   |\n24 |  \
    \   res.reverse();\n   |         ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltc1jxih.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpltc1jxih.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjheepf35.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjheepf35.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for i\
    \ in s.chars() {\n        if i.is_lowercase() {\n            res.push_str(&i.to_uppercase());\n\
    \        } else {\n            res.push_str(&i.to_lowercase());\n        }\n \
    \   }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu0xdtpfi.rs:15:26\n   |\n\
    15 |             res.push_str(&i.to_uppercase());\n   |                      \
    \    ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToUppercase`\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&ToUppercase`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu0xdtpfi.rs:17:26\n   |\n17 |\
    \             res.push_str(&i.to_lowercase());\n   |                         \
    \ ^^^^^^^^^^^^^^^^^ expected `str`, found struct `ToLowercase`\n   |\n   = note:\
    \ expected reference `&str`\n              found reference `&ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwegasy4o.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwegasy4o.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwegasy4o.rs:19:26\n   |\n19 |\
    \             res.push_str(c);\n   |                          ^ expected `&str`,\
    \ found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        return s;\n    }\n    return res;\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeho0temd.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeho0temd.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnspqcaf3.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnspqcaf3.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnspqcaf3.rs:21:22\n\
    \   |\n21 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgw1aexqj.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgw1aexqj.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(\"0\");\n    }\n    return res;\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4amzspn4.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4amzspn4.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4amzspn4.rs:21:26\n\
    \   |\n21 |             res.push_str(c);\n   |                          ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    if res.is_empty() {\n        res = \"#\";\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\"\
    )), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")),\
    \ String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
    AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
    ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
    ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
    \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
    \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk68zk2at.rs:16:30\n   |\n\
    16 |                 res.push_str(c.to_ascii_uppercase());\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk68zk2at.rs:18:30\n   |\n18 |              \
    \   res.push_str(c.to_ascii_lowercase());\n   |                              ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk68zk2at.rs:25:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.is_empty() {\n        res = \"#\";\n    }\n    return res;\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpransr08j.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_lowercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpransr08j.rs:17:26\n   |\n17 |             res.push_str(c.to_uppercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToUppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpransr08j.rs:21:15\n\
    \   |\n12 |     let mut res = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n21 |         res = \"#\";\n   |           \
    \    ^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \     |\n   |               expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprsi2u6vc.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_ascii_uppercase());\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprsi2u6vc.rs:17:26\n   |\n17 |             res.push_str(c.to_ascii_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If\
    \ the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfn solve(s: String)\
    \ -> String {\n    let mut s = s;\n    let mut res = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
    AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
    )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")),\
    \ String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"\
    #A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"\
    #aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"\
    2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"\
    #$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"\
    #CCC\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeh4o465s.rs:15:26\n   |\n\
    15 |             res.push_str(c.to_uppercase());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeh4o465s.rs:17:26\n   |\n17 |             res.push_str(c.to_lowercase());\n\
    \   |                          ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeh4o465s.rs:21:22\n\
    \   |\n21 |         res.push_str(s.to_lowercase());\n   |                    \
    \  ^^^^^^^^^^^^^^^^\n   |                      |\n   |                      expected\
    \ `&str`, found struct `String`\n   |                      help: consider borrowing\
    \ here: `&s.to_lowercase()`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
