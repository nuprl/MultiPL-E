name: HumanEval_104_unique_digits
language: rust
results:
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    for d in digits {\n        if d % 2 == 0 {\n      \
    \      evens.push(d)\n        } else {\n            result.push(d);\n        }\n\
    \    }\n    for e in evens {\n        result.remove(e);\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbi7bb7l.rs:21:23\n   |\n\
    21 |         result.remove(e);\n   |                       ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |         result.remove(e.try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for d in x.iter() {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7lhmw9ae.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpmeln1d4j.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk9yad45n.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &x in x {\n        if x.is_even() {\n            result.push(x);\n  \
    \      }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpds8_sic8.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n   \
    \     } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    for i in evens.iter().rev() {\n        if odd.contains(&i) {\n   \
    \         continue;\n        }\n        result.push(i);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8002xwwv.rs:29:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    29 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_cnt = vec![];\n\
    \    let mut evens_cnt_idx = vec![];\n    let mut evens_cnt_val = vec![];\n  \
    \  let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let mut evens_cnt_val_min = vec![];\n    let mut evens_cnt_val_max = vec![];\n\
    \    let \n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp19491ni4.rs:54:1\n  \
    \ |\n54 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp06yfen72.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut digits_set\
    \ = HashSet::new();\n    let mut i = 0;\n    while i < digits.len() {\n      \
    \  if digits_set.contains(&digits[i]) {\n            i += 1;\n            continue;\n\
    \        }\n        digits_set.insert(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpxdbwii9r.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for &d in &digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1u49ipdb.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpw64mjf7e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = false;\n    for &d in &digits {\n        if d % 2 == 0 {\n          \
    \  even = true;\n        }\n        if even {\n            result.push(d);\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpw8w6freg.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ seen = vec![];\n    for d in digits {\n        if !seen.contains(&d) {\n   \
    \         result.push(d);\n            seen.push(d);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpm7fy5q6q.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i\
    \ % 10) {\n            continue;\n        }\n        result.push(i);\n       \
    \ seen.insert(i % 10);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpnaem6vy1.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnaem6vy1.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpa7h3_blf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n        \
    \    result.push(digits[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdjycc81f.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6njquati.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let mut j = i;\n        while j < digits.len() && digits[j] % 2 ==\
    \ 0 {\n            j = j + 1;\n        }\n        if j > i {\n            result.push(digits[i]);\n\
    \            digits = digits.iter().skip(j).collect();\n        }\n        i =\
    \ j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpo_oxy9c9.rs:20:44\n     |\n\
    20   |             digits = digits.iter().skip(j).collect();\n     |         \
    \                                   ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = false;\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            evens = false;\n        } else {\n            evens\
    \ = true;\n        }\n        if evens {\n            result.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmphdhgk2vd.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|&x| x as usize).collect::<Vec<_>>();\n   \
    \ \n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n        \
    \    result.push(digits[i]);\n        }\n    }\n    \n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5o4snl3k.rs:20:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    20 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n    let mut\
    \ evens = vec![];\n    let mut evens_count = vec![];\n    let mut odd = vec![];\n\
    \    let mut odd_count = vec![];\n    let mut odd_digits = vec![];\n    let mut\
    \ odd_digits_count = vec![];\n    let mut odd_evens = vec![];\n    let mut odd_evens_count\
    \ = vec![];\n    let mut odd_odd = vec![];\n    let mut odd_odd_count = vec![];\n\
    \    let mut odd_odd_digits = vec![];\n    let mut odd_odd_digits_count = vec![];\n\
    \    let mut odd_odd_evens = vec![];\n    let mut odd_odd_evens_count = vec![];\n\
    \    let mut odd_odd_odd = vec![];\n    let mut odd_odd_odd_count = vec![];\n\
    \    let mut odd_odd_odd_digits = vec![];\n    let mut odd_odd_odd_digits_count\
    \ = vec![];\n    let mut odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_evens_count\
    \ = vec![];\n    let mut odd_odd_odd_odd = vec![];\n    let mut odd_odd_odd_odd_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_digits = vec![];\n    let mut odd_odd_odd_odd_digits_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_evens_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd = vec![];\n    let mut odd_odd_odd_odd_odd_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_digits = vec![];\n    let mut odd_odd_odd_odd_odd_digits_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_evens_count\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd = vec![];\n\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp569q1c_c.rs:9:36\n  |\n9 |\
    \ fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------      \
    \             ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = true;\n        }\n        if even {\n       \
    \     result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpzqouw70i.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp8p_wu_ww.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n        \
    \    result.push(digits[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpo1b11kdb.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    for &i in x {\n        if i.is_even() {\n\
    \            digits.push(i);\n        } else {\n            if !digits.is_empty()\
    \ {\n                result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().max().unwrap());\n\
    \                digits.clear();\n            }\n            result.push(i);\n\
    \        }\n    }\n    if !digits.is_empty() {\n        result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().max().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8_clri2y.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp8_clri2y.rs:17:108\n\
    \    |\n17  |                 result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().max().unwrap());\n\
    \    |                                                                       \
    \                                     ^^^- supplied 0 arguments\n    |       \
    \                                                                            \
    \                         |\n    |                                           \
    \                                                                 expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8_clri2y.rs:17:114\n\
    \   |\n17 |                 result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().max().unwrap());\n\
    \   |                                                                        \
    \                                          ^^^^^^ help: there is an associated\
    \ function with a similar name: `swap`\n\nerror[E0061]: this function takes 1\
    \ argument but 0 arguments were supplied\n   --> /tmp/tmp8_clri2y.rs:24:100\n\
    \    |\n24  |         result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().max().unwrap());\n\
    \    |                                                                       \
    \                             ^^^- supplied 0 arguments\n    |               \
    \                                                                            \
    \         |\n    |                                                           \
    \                               "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for d in x.iter() {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeodat3tt.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    for d in x {\n        if d % 2 == 0 {\n\
    \            digits.push(d / 2);\n        } else {\n            result.push(digits.pop().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmph3ggd76y.rs:16:38\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for i in x {\n        if i % 10 == 0 {\n  \
    \          digits.push(i / 10);\n        } else {\n            if !digits.contains(&i\
    \ / 10) {\n                result.push(i);\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo18u0s3n.rs:16:33\n   |\n\
    16 |             if !digits.contains(&i / 10) {\n   |                        \
    \         ^^^^^^^\n   |                                 |\n   |              \
    \                   expected `&isize`, found `isize`\n   |                   \
    \              help: consider borrowing here: `&(&i / 10)`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp7zd6vmg2.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    for d in digits {\n        if d.is_even() {\n     \
    \       evens.push(d.clone());\n        }\n    }\n    for e in evens {\n     \
    \   if !result.contains(&e) {\n            result.push(e);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpt4yedsr0.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i\
    \ % 10) {\n            continue;\n        }\n        seen.insert(i % 10);\n  \
    \      result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp0ltrnrp3.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ltrnrp3.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i)\
    \ {\n            continue;\n        }\n        seen.insert(i);\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpx0my7mwa.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx0my7mwa.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    for i in 0..digits.len() {\n        if !result.contains(&digits[i])\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp8gv22l96.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut counter = HashMap::new();\n    for &x in x {\n        if let Some(count)\
    \ = counter.get_mut(&x) {\n            *count += 1;\n        } else {\n      \
    \      counter.insert(x, 1);\n        }\n    }\n    for x in counter.keys() {\n\
    \        if *counter.get(x) % 2 == 0 {\n            result.push(x);\n        }\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp6jmjh9th.rs:11:23\n   |\n11 |     let mut counter = HashMap::new();\n\
    \   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6jmjh9th.rs:12:9\n   |\n12 |     for &x in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut evens_cnt = 0;\n    let mut odd_cnt = 0;\n    let\
    \ mut odd_digits = Vec::new();\n    let mut odd_digits_cnt = 0;\n    let mut odd_digits_set\
    \ = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n    let mut\
    \ odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mut odd_digits_set = HashSet::new();\n\
    \    let mut odd_digits_set = HashSet::new();\n    let mu\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq1mmnmp6.rs:48:11\n   |\n\
    48 |     let mu\n   |           ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n\
    \  --> /tmp/tmpq1mmnmp6.rs:17:30\n   |\n17 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpq1mmnmp6.rs:18:30\n   |\n18 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpq1mmnmp6.rs:19:30\n   |\n19 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpq1mmnmp6.rs:20:30\n   |\n20 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpq1mmnmp6.rs:21:30\n   |\n21 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n \
    \ --> /tmp/tmpq1mmnmp6.rs:22:30\n   |\n22 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0433]: failed to resolve: use of undeclar"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            even = true;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpt5e6gib2.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for &d in &digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d)\n        } else {\n            result.push(d);\n  \
    \      }\n    }\n    \n    for &d in &evens {\n        result.push(d);\n    }\n\
    \    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2]`,\n right: `[1, 15, 33]`', /tmp/tmp_1b613dv.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe0e76h16.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp01w_5s8x.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut evens_set = HashSet::new();\n    let mut evens_count\
    \ = HashSet::new();\n    let mut evens_count_mut : &mut HashSet<isize> = &mut\
    \ evens_count;\n    \n    for d in digits {\n        if evens_set.contains(d)\
    \ {\n            evens_count_mut.insert(d);\n        } else {\n            result.push(d);\n\
    \            evens_set.insert(d);\n            evens_count_mut.insert(d);\n  \
    \      }\n    }\n    \n    for d in evens_count {\n        if evens_count_mut.contains(d)\
    \ {\n            evens_count_mut.remove(d);\n        }\n    }\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp5a3wfw05.rs:13:25\n   |\n13 |     let mut evens_set = HashSet::new();\n\
    \   |                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp5a3wfw05.rs:14:27\n\
    \   |\n14 |     let mut evens_count = HashSet::new();\n   |                  \
    \         ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0412]: cannot\
    \ find type `HashSet` in this scope\n  --> /tmp/tmp5a3wfw05.rs:15:36\n   |\n15\
    \ |     let mut evens_count_mut : &mut HashSet<isize> = &mut evens_count;\n  \
    \ |                                    ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result.sort_unstable();\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmphfbtnf9n.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            digits[i] /= 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 16, 1422, 0]`,\n right: `[1, 15, 33]`', /tmp/tmp4pd8ba_z.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmptjb08j94.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpaeby3u9t.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut i = 0;\n    while i < digits.len() {\n        if\
    \ digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n        }\n      \
    \  i += 1;\n    }\n    for e in evens {\n        let mut j = 0;\n        while\
    \ j < result.len() {\n            if e == result[j] {\n                j += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    result.push(e);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmps1o0s_wq.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = true;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = false;\n        }\n        if even {\n      \
    \      result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpdv4ng9rk.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    let mut i = 0;\n\
    \    while i < x.len() {\n        if digits[i] % 2 == 0 {\n            even =\
    \ true;\n        }\n        if even {\n            result.push(digits[i]);\n \
    \       }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpcm9b42py.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut i =\
    \ 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n        \
    \    result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmprfie7i44.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut evens_cnt = 0;\n    let mut odd_cnt = 0;\n    let\
    \ mut odd_digits = Vec::new();\n    let mut odd_digits_cnt = 0;\n    let mut odd_digits_cnt_max\
    \ = 10;\n    let mut odd_digits_cnt_min = 100;\n    let mut odd_digits_cnt_min_inc\
    \ = 100;\n    let mut odd_digits_cnt_max_inc = 100;\n    let mut odd_digits_cnt_min_inc_max\
    \ = 100;\n    let mut odd_digits_cnt_max_inc_max = 100;\n    let mut odd_digits_cnt_min_inc_min\
    \ = 10;\n    let mut odd_digits_cnt_max_inc_min = 10;\n    let mut odd_digits_cnt_min_inc_min_inc\
    \ = 10;\n    let mut odd_digits_cnt_max_inc_min_inc = 10;\n    let mut odd_digits_cnt_min_inc_min_max\
    \ = 100;\n    let mut odd_digits_cnt_max_inc_min_max = 100;\n    let mut odd_digits_cnt_min_inc_min_max\
    \ = 10;\n    let mut odd_digits_cnt_max_inc_min_max = 10;\n    let mut odd_digits_cnt_min_inc_min_max_inc\
    \ = 100;\n    let mut odd_digits_cnt_max_inc_min_max_inc = 100;\n    let mut odd_digits_cnt_min_inc_min_max_inc_max\
    \ = 100;\n    let mut odd_digits_cnt_max_inc_min_max_inc_max = 100;\n    let mut\
    \ odd_digits_cnt_min_inc_min_max_inc_min = 10;\n    let mut odd_digits_cnt_max_inc_min_max_inc_min\
    \ = 10;\n    let mut odd_digits_cnt_min_inc_min_max_inc_min_inc = 10;\n    let\
    \ mut odd_digits_cnt_max_inc_min_max_inc_min_inc = 10;\n    let mut odd_digits_cnt_min_inc_min_max_inc_min_max\
    \ = 100;\n    let mut odd_digits_cnt_max_inc_min_max_inc_min_max = 100;\n    let\
    \ mut odd_digits_cnt_min_inc_min_max_inc_min_max = 10;\n    let mut odd_digits_cnt_max_inc_min_max_inc_min_max\
    \ = 10;\n    let mut odd_digits_cnt_min_inc_min_max_inc_min_max_in\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz38cz3bz.rs:43:58\n   |\n\
    43 |     let mut odd_digits_cnt_min_inc_min_max_inc_min_max_in\n   |         \
    \                                                 ^ help: add `;` here\n44 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpz38cz3bz.rs:9:36\n\
    \  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------\
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            evens.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    evens.sort();\n    for i in evens.iter().cloned() {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpqaw2tde7.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d < 10 {\n       \
    \     digits.push(d as u8);\n        } else {\n            if let Some(digit)\
    \ = digits.iter().position(|&x| x == d) {\n                result.push(digit as\
    \ isize);\n            } else {\n                result.push(d);\n           \
    \ }\n            digits.push(d as u8);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdl7r7_qw.rs:16:67\n   |\n\
    16 |             if let Some(digit) = digits.iter().position(|&x| x == d) {\n\
    \   |                                                                   ^ expected\
    \ `u8`, found `isize`\n   |\nhelp: you can convert `x` from `u8` to `isize`, matching\
    \ the type of `d`\n   |\n16 |             if let Some(digit) = digits.iter().position(|&x|\
    \ isize::from(x) == d) {\n   |                                               \
    \               ++++++++++++ +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    \n    while !digits.is_empty() {\n        let mut digit = digits.remove(0);\n\
    \        if digit % 2 == 0 {\n            evens.push(digit);\n        }\n    }\n\
    \    \n    for e in evens {\n        result.push(e);\n    }\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmphlldkeer.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_x4v6p3g.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut odd = Vec::new();\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    while evens.len() > 0 {\n        if evens.len() == 1 {\n         \
    \   result.push(evens.pop());\n        } else {\n            let mut i = 0;\n\
    \            while i < evens.len() {\n                if evens[i] % 2 == 0 {\n\
    \                    result.push(evens[i]);\n                    i += 1;\n   \
    \             } else {\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    while odd.len() > 0 {\n        if odd.len() ==\
    \ 1 {\n            result.push(odd.pop());\n        } else {\n            let\
    \ mut i = 0;\n            while i < odd.len() {\n                if odd[i] % 2\
    \ == 0 {\n                    result.push(odd[i]);\n                    i += 1;\n\
    \                } else {\n                    break;\n                }\n   \
    \         }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpio6qmwr3.rs:30:33\n   |\n\
    30 |                     result.push(evens[i]);\n   |                        \
    \         ^^^^^^^^ expected enum `Option`, found `isize`\n   |\n   = note: expected\
    \ enum `Option<isize>`\n              found type `isize`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n30 |                     result.push(Some(evens[i]));\n\
    \   |                                 +++++        +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpio6qmwr3.rs:45:33\n   |\n45 |                     result.push(odd[i]);\n\
    \   |                                 ^^^^^^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found type `isize`\n\
    help: try wrapping the expression in `Some`\n   |\n45 |                     result.push(Some(odd[i]));\n\
    \   |                                 +++++      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpio6qmwr3.rs:53:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n53 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Option<isize>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            even = true;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpbyzarwsg.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    loop {\n    \
    \    if digits.len() == 0 {\n            break;\n        }\n        let digit\
    \ = digits.remove(0);\n        if digit % 2 == 0 {\n            even = true;\n\
    \        }\n        if even {\n            result.push(digit);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5htsxmbh.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpx5opp40j.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    for &d in digits {\n        if d % 2 == 0 {\n     \
    \       evens.push(d)\n        } else {\n            result.push(d);\n       \
    \ }\n    }\n    for &d in evens {\n        result.remove(d);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbt_dnhx8.rs:13:9\n   |\n\
    13 |     for &d in digits {\n   |         ^^    ------ this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `d`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbt_dnhx8.rs:23:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzqx47fzv.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ != 0 {\n            if even {\n                result.push(digits[i]);\n   \
    \         } else {\n                result.push(i);\n            }\n         \
    \   even = !even;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8uio6fgl.rs:19:29\n   |\n\
    19 |                 result.push(i);\n   |                             ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |                 result.push(i.try_into().unwrap());\n\
    \   |                              ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp06qhrhg9.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove();\n        if digit % 2 == 0 {\n     \
    \       even = true;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpkgu_tet6.rs:14:28\n     |\n14   |         let digit = digits.remove();\n\
    \     |                            ^^^^^^- supplied 0 arguments\n     |      \
    \                      |\n     |                            expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut odd = Vec::new();\n    let mut evens_count = Vec::new();\n\
    \    let mut odd_count = Vec::new();\n    let mut odd_digits = Vec::new();\n \
    \   let mut odd_digits_count = Vec::new();\n    let mut evens_digits = Vec::new();\n\
    \    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count =\
    \ Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut evens_digits_count\
    \ = Vec::new();\n    let mut evens_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mu\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd3onr1uo.rs:50:11\n   |\n\
    50 |     let mu\n   |           ^ help: add `;` here\n51 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd3onr1uo.rs:9:36\n  |\n\
    9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------    \
    \               ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n    for d in digits {\n        if d %\
    \ 2 == 0 {\n            evens.push(d);\n        } else {\n            odd.push(d);\n\
    \        }\n    }\n    for d in even {\n        if !odd.contains(&d) {\n     \
    \       result.push(d);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpfik5xu8k.rs:21:14\n\
    \   |\n21 |     for d in even {\n   |              ^^^^ help: a local variable\
    \ with a similar name exists: `evens`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n    let\
    \ mut even = false;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmph_5_71kc.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut even = true;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.remove(0).unwrap();\n        if even {\n \
    \           if digit % 2 == 0 {\n                result.push(digit);\n       \
    \     }\n        } else {\n            if digit % 2 != 0 {\n                result.push(digit);\n\
    \            }\n        }\n        even = !even;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpv_xto8ou.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n \
    \   let mut digits_set = HashSet::new();\n    for d in digits {\n        if !digits_set.contains(&d)\
    \ {\n            digits_set.insert(d);\n            result.push(d);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpliqozyhg.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpliqozyhg.rs:19:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n19 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let mut j = i;\n        while j < digits.len() && digits[j] % 2 ==\
    \ 0 {\n            j = j + 1;\n        }\n        if j != i {\n            result.push(digits[i]);\n\
    \            digits = digits.iter().skip(i).take(j - i).collect();\n         \
    \   i = j;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpp5_gjwxj.rs:20:56\n     |\n\
    20   |             digits = digits.iter().skip(i).take(j - i).collect();\n   \
    \  |                                                        ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n            evens.push(d);\n\
    \        } else {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result.extend(&evens);\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp41o9yfug.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = false;\n    for d in digits {\n        if d % 2 == 0 {\n            evens\
    \ = true;\n        }\n        if evens {\n            result.push(d);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpgfzhl564.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    for i in 0..digits.len() {\n        if !result.contains(&digits[i])\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjh8avjwg.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp5ck135wn.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmprdp0jnwf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n      \
    \      i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpqn3w1b9h.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &i in x {\n        if i % 10 == 0 {\n \
    \           digits.push(i / 10);\n        } else {\n            if digits.len()\
    \ == 0 {\n                result.push(i);\n            } else {\n            \
    \    if digits[digits.len() - 1] % 2 == 0 {\n                    result.push(i);\n\
    \                }\n            }\n            digits.push(i / 10);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf_nd9mlu.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut digits_set\
    \ = HashSet::new();\n    let mut i = 0;\n    while i < digits.len() {\n      \
    \  if digits_set.contains(&digits[i]) {\n            i += 1;\n            continue;\n\
    \        }\n        digits_set.insert(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpben5ass4.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_8n7kqou.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for n in x {\n        if n % 10 == 0 {\n  \
    \          digits.push(n % 10);\n        } else {\n            result.push(n %\
    \ 10);\n        }\n    }\n    for d in digits {\n        if !result.contains(&d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqpr1k518.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut evens = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            evens = false;\n        } else {\n            evens = true;\n\
    \        }\n        if evens {\n            result.push(digit);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6gamtr6b.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n  \
    \          digits.push(i as isize);\n        } else {\n            result.push(i\
    \ as isize);\n        }\n    }\n    for i in 0..digits.len() {\n        if !digits.contains(&i)\
    \ {\n            result.push(i as isize);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmzxro_lx.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmzxro_lx.rs:20:29\n   |\n20 |         if !digits.contains(&i) {\n\
    \   |                             ^^ expected `isize`, found `usize`\n   |\n \
    \  = note: expected reference `&isize`\n              found reference `&usize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n   \
    \     } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    for i in evens.iter().cloned() {\n        if odd.contains(&i) {\n\
    \            continue;\n        }\n        result.push(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpex3pn8ot.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            evens.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    for e in evens {\n        if result.contains(&e) {\n            continue;\n\
    \        }\n        result.push(e);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpz3xl8o6i.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpldxvywmx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiu4d41jx.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|&x| x % 10).collect::<Vec<_>>();\n    let\
    \ mut evens = Vec::new();\n    \n    for &x in digits {\n        if x % 2 == 0\
    \ {\n            evens.push(x);\n        }\n    }\n    \n    for &x in evens {\n\
    \        result.push(x);\n    }\n    \n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpctiy_zeb.rs:14:9\n   |\n\
    14 |     for &x in digits {\n   |         ^^    ------ this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmps2fc4zxl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    \n    for d in digits {\n     \
    \   if !digits_set.contains(d) {\n            result.push(d);\n            digits_set.insert(d);\n\
    \        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprwtxe2qk.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_idx =\
    \ Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_len = Vec::new();\n\
    \    let mut evens_len = Vec::new();\n    let mut evens_idx = Vec::new();\n  \
    \  let mut evens_idx = Vec::new();\n    let mut evens_len = Vec::new();\n    let\
    \ mut evens_len = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_idx = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx =\
    \ Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n\
    \    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n  \
    \  let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_idx\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_len =\
    \ Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_idx = Vec::new();\n\
    \    let mut evens_idx = Vec::new();\n    let mut evens_len = Vec::new();\n  \
    \  let mut evens_len = Vec::new();\n    let mut evens_idx = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut\
    \ evens_len = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len =\
    \ Vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3i20v2rf.rs:55:28\n   |\n\
    55 |     let mut evens_len = Vec\n   |                            ^ help: add\
    \ `;` here\n56 | }\n   | - unexpected token\n\nerror[E0423]: expected value, found\
    \ struct `Vec`\n   --> /tmp/tmp3i20v2rf.rs:55:25\n    |\n55  |       let mut evens_len\
    \ = Vec\n    |                           ^^^ help: use struct literal syntax instead:\
    \ `Vec { buf: val, len: val }`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3i20v2rf.rs:9:36\n\
    \  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------\
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = false;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        } else {\n            even = false;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp62qxmrxr.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &x in x {\n        digits.push(x);\n  \
    \  }\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] !=\
    \ 0 {\n            result.push(digits[i]);\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo080rl3e.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpa50n5k3h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdrj7qviv.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for digit in digits {\n        if !even {\n            result.push(digit);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpk3ws1hls.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d)\n        } else {\n            result.push(d);\n  \
    \      }\n    }\n    \n    for d in evens {\n        result.push(d);\n    }\n\
    \    \n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5]`,\n right: `[1, 15, 33]`', /tmp/tmp2v_4xzj5.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut digits_count\
    \ = x.iter().cloned().count();\n    let mut digits_index = 0;\n    let mut digits_count\
    \ = x.iter().cloned().count();\n    while digits_count > 0 {\n        if digits[digits_index]\
    \ % 2 == 0 {\n            result.push(digits[digits_index]);\n            digits_count\
    \ -= 1;\n        }\n        digits_index += 1;\n    }\n    result.sort();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpapn_pora.rs:16:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = false;\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ != 0 {\n            even = false;\n        } else {\n            even = true;\n\
    \        }\n        if even {\n            result.push(digits[i]);\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpwo8tcspr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    \n    for d in digits {\n        if d % 2 == 0 {\n      \
    \      evens.push(d as isize);\n        }\n    }\n    \n    for e in evens {\n\
    \        if !result.contains(&e) {\n            result.push(e);\n        }\n \
    \   }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpuxmeahyd.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for &x in &digits {\n        if x % 2 == 0 {\n\
    \            evens.push(x);\n        }\n    }\n    \n    for &x in &evens {\n\
    \        if !result.contains(&x) {\n            result.push(x);\n        }\n \
    \   }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp8tmdf3x2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpf7ojf9zd.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i)\
    \ {\n            continue;\n        }\n        seen.insert(i);\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp2qoj2a5h.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2qoj2a5h.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpu4jm9e_7.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    for d in x {\n        if d > 0 {\n    \
    \        digits.push(d % 10);\n        }\n    }\n    for d in digits {\n     \
    \   if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpv3kmqov9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &i in x {\n        if i % 10 == 0 {\n \
    \           digits.push(i / 10);\n        } else {\n            if !digits.contains(&i\
    \ / 10) {\n                result.push(i / 10);\n            }\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmporr7u5r7.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut digits_set\
    \ = HashSet::new();\n    for d in digits {\n        if digits_set.contains(&d)\
    \ {\n            continue;\n        }\n        digits_set.insert(d);\n       \
    \ result.push(d);\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpoq_3p4g6.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &i in x {\n        if i % 10 == 0 {\n \
    \           digits.push(i / 10);\n        } else {\n            if !digits.contains(&i\
    \ / 10) {\n                result.push(i / 10);\n            }\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyv65eza0.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d)\n        } else {\n            result.push(d);\n  \
    \      }\n    }\n    \n    for e in evens {\n        if result.contains(&e) {\n\
    \            continue;\n        }\n        result.push(e);\n    }\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2]`,\n right: `[1, 15, 33]`', /tmp/tmpprxvi5f1.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n    \
    \        result.push(digits[i]);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpnj6o5xdo.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut digits_len = digits.len();\n   \
    \ while digits_len > 0 {\n        let mut digit = digits[digits_len - 1];\n  \
    \      if digit % 2 == 0 {\n            digits.pop();\n        } else {\n    \
    \        result.push(digit);\n        }\n        digits_len -= 1;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 33, 15]`,\n right: `[1, 15, 33]`', /tmp/tmpl26soxbc.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            digits[i] /= 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 16, 1422, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpmnrblceq.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for &d in &digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d)\n        }\n    }\n    \n    for &d in &digits {\n\
    \        if !evens.contains(&d) {\n            result.push(d);\n        }\n  \
    \  }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpudrqos_d.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    let mut counter = 0;\n    for d in x {\n\
    \        digits.push(d % 10);\n        counter += 1;\n    }\n    for d in digits\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    if counter == 0 {\n        result\n    } else {\n        result.sort();\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpx5z3sny_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d as isize);\n        }\n    }\n    \n    for e in evens\
    \ {\n        if result.contains(&e) {\n            continue;\n        }\n    \
    \    result.push(e);\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpltmodht1.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n        \
    \    result.push(digits[i]);\n            i += 1;\n        }\n        else {\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpfjhywqwc.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            digits[i] /= 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 16, 1422, 0]`,\n right: `[1, 15, 33]`', /tmp/tmp298mmioo.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut odd = Vec::new();\n    let mut i = 1;\n    while\
    \ i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    for d in odd {\n        if !evens.contains(&d) {\n\
    \            result.push(d);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 33]`,\n right: `[1, 15, 33]`', /tmp/tmp_r6auodb.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybiytqy_.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ digit = digits[0];\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ digit == 0 {\n            digit = digits[i as usize];\n            i += 1;\n\
    \        } else {\n            if digit != digits[i as usize] {\n            \
    \    result.push(digit);\n                digit = digits[i as usize];\n      \
    \          i += 1;\n            } else {\n                i += 1;\n          \
    \  }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2]`,\n right: `[1, 15, 33]`', /tmp/tmpgh1h1z18.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp27smiv84.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5bo7lli4.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpx0j0vnyp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = true;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.remove(0);\n        if digit % 2 == 0 {\n\
    \            even = false;\n        }\n        result.push(digit);\n    }\n  \
    \  if even {\n        result.push(0)\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp7hvvyakr.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83u63_hq.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for d in x {\n        if d % 2 == 0 {\n            result.push(d);\n    \
    \    }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpoz8b8tm7.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpira5fept.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut seen = vec![];\n    for &x in x {\n        if seen.contains(&x) {\n\
    \            continue;\n        }\n        seen.push(&x);\n        let mut digits\
    \ = x.to_string().chars().filter(|c| c >= '0' && c <= '9').collect::<Vec<_>>();\n\
    \        for &d in digits {\n            if d % 2 == 0 {\n                continue;\n\
    \            }\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83ofgboe.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp83ofgboe.rs:16:19\n   |\n16 |         seen.push(&x);\n   |    \
    \               ^^ cyclic type of infinite size\n   |\nhelp: consider removing\
    \ the borrow\n   |\n16 -         seen.push(&x);\n16 +         seen.push(x);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    \n    for &d in &digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d)\n        } else {\n            result.push(d);\n  \
    \      }\n    }\n    \n    for &d in &evens {\n        result.push(d);\n    }\n\
    \    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2]`,\n right: `[1, 15, 33]`', /tmp/tmpuk2cho4e.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpletclmnd.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    \n    for d in digits {\n        if d % 2 == 0 {\n          \
    \  evens.push(d as isize);\n        }\n    }\n    \n    for d in evens {\n   \
    \     if !result.contains(&d) {\n            result.push(d as isize);\n      \
    \  }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpft9e3kc5.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjrif_wn6.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1p0rxf96.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i)\
    \ {\n            continue;\n        }\n        seen.insert(i);\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpf8s5kvnc.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf8s5kvnc.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n    let\
    \ mut evens = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len =\
    \ Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n\
    \    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n  \
    \  let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let\
    \ mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut\
    \ evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len =\
    \ Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n\
    \    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n  \
    \  let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let\
    \ mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut\
    \ evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len =\
    \ Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n\
    \    let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n  \
    \  let mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let\
    \ mut evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut\
    \ evens_len = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len\
    \ = Vec::new();\n    let mut evens_len = Vec::new();\n    let mut evens_len =\
    \ Vec::\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpczan2ai1.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror[E0599]: no method named `digit`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpczan2ai1.rs:11:41\n\
    \   |\n11 |     let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \   |                                         ^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = true;\n        }\n        if even {\n       \
    \     result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpv2xyp8hg.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = true;\n    for d in digits {\n        if !even {\n            result.push(d);\n\
    \        }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkxyve268.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    for d in digits {\n        if d % 2 == 0 {\n            even =\
    \ true;\n        }\n        if even {\n            result.push(d);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpx08yoyce.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    for i in 0..odd.len() {\n        if evens.contains(&odd[i])\
    \ {\n            continue;\n        }\n        result.push(odd[i]);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpk2802zp9.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    let mut odd = vec![];\n    let mut even = vec![];\n\
    \    let mut odd_digits = vec![];\n    let mut odd_evens = vec![];\n    let mut\
    \ odd_odd = vec![];\n    let mut odd_even = vec![];\n    let mut odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_evens = vec![];\n    let mut odd_odd_odd = vec![];\n\
    \    let mut odd_odd_even = vec![];\n    let mut odd_odd_odd_digits = vec![];\n\
    \    let mut odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd = vec![];\n\
    \    let mut odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_digits =\
    \ vec![];\n    let mut odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut\
    \ odd_odd_odd_odd_odd_odd_odd = vec![];\n    let mut odd_odd_odd_odd_odd_odd_even\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_digits = vec![];\n    let mut\
    \ odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpye8nbdrk.rs:42:21\n   |\n\
    42 |     let mut odd_odd_\n   |                     ^ help: add `;` here\n43 |\
    \ }\n   | - unexpected token\n\nerror[E0599]: no method named `digits` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpye8nbdrk.rs:11:41\n \
    \  |\n11 |     let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \   |                                         ^^^^^^ method not found in `&isize`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpye8nbdrk.rs:9:36\n  |\n9 | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n    while i < x.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n   \
    \     } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    while evens.len() > 0 {\n        let mut j = evens.len() - 1;\n  \
    \      while j >= 0 && evens[j] > odd.last() {\n            odd.pop();\n     \
    \       j -= 1;\n        }\n        result.push(evens.pop());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vxkglcp.rs:25:36\n   |\n\
    25 |         while j >= 0 && evens[j] > odd.last() {\n   |                   \
    \                 ^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   =\
    \ note: expected type `isize`\n              found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1vxkglcp.rs:31:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n31 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n    let\
    \ mut evens = Vec::new();\n    for d in digits {\n        if d % 2 == 0 {\n  \
    \          evens.push(d.clone());\n        }\n    }\n    for e in evens {\n  \
    \      if result.contains(&e) {\n            continue;\n        }\n        result.push(e);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpbaji0a6p.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ even = false;\n    for &d in &digits {\n        if d % 2 == 0 {\n          \
    \  even = true;\n        }\n        if even {\n            result.push(d);\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpklf5jj5n.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut seen = HashSet::new();\n    for &x in x {\n        if !seen.contains(&x)\
    \ {\n            result.push(x);\n            seen.insert(x);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpr0od3jbv.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr0od3jbv.rs:12:9\n   |\n12 |     for &x in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    for d in digits {\n        if d % 2 == 0 {\n            even =\
    \ true;\n        }\n        if even {\n            result.push(d);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4jmt34l5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for n in x {\n        digits.push(n % 10);\n\
    \    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp0qehpsql.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ != 0 {\n            evens.push(digits[i]);\n        }\n        i += 1;\n   \
    \ }\n    for e in evens {\n        if result.contains(&e) {\n            continue;\n\
    \        }\n        result.push(e);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpk3dvbua4.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &x in x {\n        if x.is_even() {\n            result.push(x);\n  \
    \      }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9u0quid4.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_umj9dx.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|&x| x % 10).collect::<Vec<_>>();\n    let\
    \ mut even = true;\n    while digits.len() > 0 {\n        let digit = digits.remove(0).unwrap();\n\
    \        if even {\n            if digit % 2 == 0 {\n                result.push(digit);\n\
    \            }\n        } else {\n            if digit % 2 != 0 {\n          \
    \      result.push(digit);\n            }\n        }\n        even = !even;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpukiwm061.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n            evens.push(d);\n\
    \        }\n    }\n    for d in evens {\n        if !result.contains(&d) {\n \
    \           result.push(d);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpvt4l3cvn.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpcm6khhga.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            digits[i] /= 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 16, 1422, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpjv_cv_8r.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n        \
    \    result.push(digits[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpk53012o1.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i)\
    \ {\n            continue;\n        }\n        seen.insert(i);\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj6oclgqw.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj6oclgqw.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut counter = x.iter().cloned().map(|&x| x).count();\n    let mut even\
    \ = true;\n    while counter > 0 {\n        if even {\n            if x[counter]\
    \ % 2 == 0 {\n                result.push(x[counter]);\n                counter\
    \ -= 1;\n            } else {\n                even = false;\n            }\n\
    \        } else {\n            if x[counter] % 2 != 0 {\n                result.push(x[counter]);\n\
    \                counter -= 1;\n            } else {\n                even = true;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_xqmqi4.rs:11:46\n   |\n\
    11 |     let mut counter = x.iter().cloned().map(|&x| x).count();\n   |      \
    \                                        ^--\n   |                           \
    \                   ||\n   |                                              |expected\
    \ due to this\n   |                                              expected `isize`,\
    \ found reference\n   |                                              help: did\
    \ you mean `x`: `&isize`\n   |\n   = note:   expected type `isize`\n         \
    \  found reference `&_`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_cnt =\
    \ Vec::new();\n    let mut evens_cnt_idx = Vec::new();\n    let mut evens_cnt_sum\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx = Vec::new();\n    let mut evens_cnt_sum_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt = Vec::new();\n    let mut\
    \ evens_cnt_sum_idx_cnt_idx = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt = Vec::new();\n\
    \    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_idx = Vec::new();\n    let mut\
    \ evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_cnt = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_idx\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_idx\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_idx\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_idx\
    \ = Vec::new();\n    let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp32sbk71j.rs:36:59\n   |\n\
    36 |     let mut evens_cnt_sum_idx_cnt_sum_idx_cnt_sum_idx_cnt_\n   |        \
    \                                                   ^ help: add `;` here\n37 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp32sbk71j.rs:9:36\n\
    \  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------\
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpeii4xub7.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for d in x.iter() {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprodouylx.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          digits.remove(&i);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_86iydd.rs:16:27\n   |\n\
    16 |             digits.remove(&i);\n   |                           ^^ expected\
    \ `usize`, found `&usize`\n   |\nhelp: consider removing the borrow\n   |\n16\
    \ -             digits.remove(&i);\n16 +             digits.remove(i);\n   | \n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpoegtsayn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    for d in &digits {\n        if d % 2 == 0 {\n            even\
    \ = true;\n        } else {\n            if even {\n                result.push(d);\n\
    \                even = false;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9a3wx579.rs:23:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    23 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        if d > 0 {\n        \
    \    digits.push(d % 10);\n        }\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpl4mm1tk9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = false;\n    for d in digits {\n        if d % 2 == 0 {\n           \
    \ evens = true;\n        }\n        if evens {\n            result.push(d);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpgqnum0ib.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(digits[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpcs1ldvzq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = true;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = false;\n        }\n        if even {\n      \
    \      result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmp76kkc47t.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = Vec::new();\n    for &i in x {\n        digits.push(i /\
    \ 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps4dvdfc8.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n    while\
    \ i < x.len() {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            if evens.len() > 0 {\n   \
    \             result.push(evens.last().unwrap());\n                i += 1;\n \
    \           } else {\n                odd.push(x.iter().skip(i).take(2).collect::<Vec<_>>());\n\
    \            }\n        }\n    }\n    if odd.len() > 0 {\n        result.push(odd.last().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp_9ngsmm9.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror[E0277]: can't\
    \ compare `&_` with `{integer}`\n  --> /tmp/tmp_9ngsmm9.rs:16:22\n   |\n16 | \
    \        if digits[i] != 0 {\n   |                      ^^ no implementation for\
    \ `&_ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not\
    \ implemented for `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_9ngsmm9.rs:31:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected `isize`, found `&Vec<&isize>`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&Vec<&isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut digit\
    \ = digits[0];\n    let mut i = 0;\n    while digit != 0 {\n        if digit %\
    \ 2 == 0 {\n            result.push(digit);\n        }\n        digit /= 2;\n\
    \        i += 1;\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpaohj70oq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut even = true;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.remove(0);\n        if even {\n          \
    \  if digit % 2 == 0 {\n                result.push(digit);\n            }\n \
    \       } else {\n            if digit % 2 != 0 {\n                result.push(digit);\n\
    \            }\n        }\n        even = !even;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpfkav2ty2.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n    \
    \        result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp1q1e6fgw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = true;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = false;\n        }\n        if even {\n      \
    \      result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpsm5gr2z0.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp9p71ao8o.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let\
    \ mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let\
    \ mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let\
    \ mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let\
    \ mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let\
    \ mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let\
    \ mut evens_len = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len_idx = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len_idx = vec![];\n    let mut even\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpu47i7jls.rs:58:17\n   |\n\
    58 |     let mut even\n   |                 ^ help: add `;` here\n59 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu47i7jls.rs:9:36\n\
    \  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------\
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    let mut i = 0;\n    while i < x.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = true;\n        }\n        if even {\n       \
    \     result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpeewe5qkr.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpppndyba6.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut seen = HashSet::new();\n    for &i in x {\n        if seen.contains(&i)\
    \ {\n            continue;\n        }\n        result.push(i);\n        seen.insert(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpskx2_ymp.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpskx2_ymp.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = false;\n    let mut evens_cnt = 0;\n    for d in digits {\n        if d %\
    \ 2 == 0 {\n            evens = true;\n            evens_cnt += 1;\n        }\n\
    \        if evens_cnt > 0 {\n            result.push(d);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmph9hcr70x.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    let mut odd = vec![];\n    for d in digits {\n    \
    \    if d.is_even() {\n            evens.push(d.clone());\n        } else {\n\
    \            odd.push(d.clone());\n        }\n    }\n    for d in even {\n   \
    \     if !odd.contains(&d) {\n            result.push(d.clone());\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpcsy38hth.rs:21:14\n\
    \   |\n21 |     for d in even {\n   |              ^^^^ help: a local variable\
    \ with a similar name exists: `evens`\n\nerror[E0599]: no method named `digits`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpcsy38hth.rs:11:41\n\
    \   |\n11 |     let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \   |                                         ^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = false;\n    loop {\n        let mut digit = digits.remove(0);\n        if\
    \ digit % 2 == 0 {\n            evens = true;\n        }\n        if evens {\n\
    \            result.push(digit);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'removal index (is 0) should be < len (is 0)',\
    \ /tmp/tmpqsqz6qtk.rs:14:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n    let mut even = vec![];\n    let mut\
    \ odd_digits = vec![];\n    let mut odd_evens = vec![];\n    let mut odd_odd =\
    \ vec![];\n    let mut odd_even = vec![];\n    let mut odd_odd_digits = vec![];\n\
    \    let mut odd_odd_evens = vec![];\n    let mut odd_odd_odd = vec![];\n    let\
    \ mut odd_odd_even = vec![];\n    let mut odd_odd_odd_digits = vec![];\n    let\
    \ mut odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd = vec![];\n   \
    \ let mut odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_digits = vec![];\n\
    \    let mut odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut\
    \ odd_odd_odd_odd_odd_odd_odd = vec![];\n    let mut odd_odd_odd_odd_odd_odd_even\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_digits = vec![];\n    let mut\
    \ odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvt815v91.rs:42:29\n   |\n\
    42 |     let mut odd_odd_odd_odd_\n   |                             ^ help: add\
    \ `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpvt815v91.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            digits[i] /= 2;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 16, 1422, 0]`,\n right: `[1, 15, 33]`', /tmp/tmp3snyhixk.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut counter = vec![];\n    for &i in x {\n        if counter.contains(&i)\
    \ {\n            continue;\n        }\n        counter.push(i as usize);\n   \
    \     result.push(i);\n    }\n    result.sort_unstable();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg0k18mmh.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg0k18mmh.rs:20:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpdu_u37q2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut even = true;\n    let mut i = 0;\n\
    \    while i < x.len() {\n        if even == true {\n            if digits[i]\
    \ % 2 == 0 {\n                result.push(digits[i]);\n                digits.remove(i);\n\
    \                i += 1;\n            } else {\n                even = false;\n\
    \            }\n        } else {\n            if digits[i] % 2 != 0 {\n      \
    \          result.push(digits[i]);\n                digits.remove(i);\n      \
    \          i += 1;\n            } else {\n                even = true;\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 2', /tmp/tmptc8_gthl.rs:16:16\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i = 0;\n   \
    \ while i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    evens.sort();\n    for i in 0..odd.len() {\n    \
    \    if evens.contains(&odd[i]) {\n            result.push(odd[i]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpvm__9phx.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            even = true;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpg7649ssh.rs:14:38\n   |\n14 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n \
    \   let mut evens = Vec::new();\n    let mut evens_cnt = 0;\n    let mut odd_cnt\
    \ = 0;\n    let mut odd_digits = Vec::new();\n    let mut odd_digits_cnt = 0;\n\
    \    let mut odd_digits_set = HashSet::new();\n    \n    for digit in digits {\n\
    \        if digit.chars().any(|c| c.is_digit()) {\n            if digit.chars().any(|c|\
    \ c.is_digit()) {\n                result.push(digit);\n                evens_cnt\
    \ += 1;\n            } else {\n                odd_cnt += 1;\n               \
    \ odd_digits.push(digit);\n                odd_digits_cnt += 1;\n            }\n\
    \        } else {\n            if evens_cnt > 0 {\n                result.push(digit);\n\
    \                evens_cnt -= 1;\n            } else {\n                odd_cnt\
    \ -= 1;\n                odd_digits_set.insert(digit);\n            }\n      \
    \  }\n    }\n    \n    if odd_cnt > 0 {\n        result.push(odd_digits.pop().to_string());\n\
    \        odd_cnt -= 1;\n    }\n    \n    if odd_digits_cnt > 0 {\n        odd_digits_set.iter().for_each(|x|\
    \ {\n            result.push(x);\n        });\n        odd_digits_cnt -= 1;\n\
    \    }\n    \n    if evens_cnt > 0 {\n        result.push(evens.pop().to_string());\n\
    \        evens_cnt -= 1;\n    }\n    \n    if evens_cnt > 0 {\n        result.push(evens.pop().to_string());\n\
    \        evens_cnt -= 1;\n    }\n    \n    if odd_cnt > 0 {\n        result.push(odd_digits.pop().to_string());\n\
    \        odd_cnt -= 1;\n    }\n    \n    if odd_digits_cnt > 0 {\n        odd_digits_set.iter().for_each(|x|\
    \ {\n            result.push(x);\n        });\n        odd_digits_cnt -= 1;\n\
    \    }\n    \n    if odd_cnt > 0 {\n        result.push(odd_digits.pop().to_string());\n\
    \        odd_cnt -= 1;\n    }\n    \n    if odd_digits_cnt > 0 {\n        odd_digits_set.iter().for_each(|x|\
    \ {\n            result.push(x);\n        });\n        odd_digits_cnt -= 1;\n\
    \    }\n    \n    if odd_cnt > 0 {\n        result.push(odd_digits.pop().to_string());\n\
    \        odd_cnt -= 1;\n    }\n    \n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpj7a7x431.rs:17:30\n   |\n17 |     let mut odd_digits_set = HashSet::new();\n\
    \   |                              ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpj7a7x431.rs:20:36\n    |\n20  |         if digit.chars().any(|c|\
    \ c.is_digit()) {\n    |                                    ^^^^^^^^- supplied\
    \ 0 arguments\n    |                                    |\n    |             \
    \                       expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpj7a7x431.rs:21:40\n    |\n21  |             if\
    \ digit.chars().any(|c| c.is_digit()) {\n    |                               \
    \         ^^^^^^^^- supplied 0 arguments\n    |                              \
    \          |\n    |                                        expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0599]: `Option<String>`\
    \ doesn't implement `std::fmt::Display`\n   --> /tmp/tmpj7a7x431.rs:41:38\n  \
    \  |\n41  |           result.push(odd_digits.pop().to_string());\n    |      \
    \                                  ^^^^^^^^^ `Option<String>` cannot be formatted\
    \ with the default formatter\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `Option<String>: std::fmt::Display`\n          \
    \  which is required by `Option<String>: ToString`\n\nerror[E0599]: the method\
    \ `to_string` exists for enum `Option<_>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpj7a7x431.rs:53:33\n    |\n53  |           result.push(evens.pop().to_string());\n\
    \    |                                   ^^^^^^^^^ method cannot be called on\
    \ `Option<_>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<_>: std::fmt::Display`\n\
    \            which is required by `Option<_>: ToString`"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &x in x {\n        digits.push(x);\n  \
    \  }\n    \n    for &x in digits {\n        if x % 2 == 0 {\n            result.push(x);\n\
    \        }\n    }\n    \n    result.sort();\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmm0yjs_1.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for &i in x {\n        if i % 10 == 0 {\n \
    \           digits.push(i / 10);\n        } else {\n            if !digits.contains(&i\
    \ / 10) {\n                result.push(i / 10);\n            }\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6s2_y4j1.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpnrp68kyg.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n    let\
    \ mut evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n      \
    \      evens.push(d as isize);\n        }\n    }\n    for e in evens {\n     \
    \   if !result.contains(&e) {\n            result.push(e);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpa1rn2ih7.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for &x in x {\n        if x % 2 == 0 {\n            result.push(x);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1igkvcgd.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = Vec::new();\n    let mut odd = Vec::new();\n    \n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            evens.push(digit);\n        } else {\n            odd.push(digit);\n\
    \        }\n    }\n    \n    odd.sort();\n    evens.sort();\n    \n    for i in\
    \ 0..odd.len() {\n        if odd[i] == evens[i] {\n            result.push(odd[i]);\n\
    \        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp802cyxq0.rs:16:38\n   |\n16 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = false;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            even = true;\n        }\n        if even {\n       \
    \     result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp3lad24zn.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    let mut i = 0;\n\
    \    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n            even\
    \ = true;\n        } else {\n            result.push(digits[i]);\n        }\n\
    \        i += 1;\n    }\n    if even {\n        result.sort();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpuclocp64.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = Vec::new();\n    let mut odd = Vec::new();\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    let mut j = 0;\n    while j < evens.len() {\n        if evens[j] <\
    \ odd.len() {\n            result.push(evens[j]);\n        }\n        j += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmjezowvz.rs:25:23\n   |\n\
    25 |         if evens[j] < odd.len() {\n   |                       ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |         if evens[j]\
    \ < odd.len().try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < x.len() {\n \
    \       if x[i] % 2 == 0 {\n            digits.push(x[i]);\n        }\n      \
    \  i += 1;\n    }\n    for i in 0..digits.len() {\n        if !result.contains(&digits[i])\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpunyfcm4r.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n    let mut\
    \ evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n          \
    \  evens.push(d)\n        } else {\n            result.push(d);\n        }\n \
    \   }\n    for e in evens {\n        if result.contains(&e) {\n            continue;\n\
    \        }\n        result.push(e);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2]`,\n right: `[1, 15, 33]`', /tmp/tmp2sl8kpfy.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n      \
    \      i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmppjztl3j0.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n \
    \   let mut evens = false;\n    let mut i = 1;\n    while i < digits.size() {\n\
    \        if digits[i] != digits[i - 1] {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            evens = !evens;\n        }\n\
    \    }\n    if evens {\n        result\n    } else {\n        vec![]\n    }\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpin3_smsg.rs:14:22\n   |\n14 |     while i <\
    \ digits.size() {\n   |                      ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpin3_smsg.rs:23:9\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |         result\n   |         ^^^^^^ expected\
    \ `isize`, found struct `String`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp8orb82ah.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp74g6fzrf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
