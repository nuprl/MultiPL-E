name: HumanEval_16_count_distinct_characters
language: rust
prompt: "/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n/// 3\n\
  /// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
  abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")),\
  \ 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n"
completions: ['    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  "    let mut counter = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            counter += 1;\n        } else if c.is_uppercase() {\n       \
    \     counter += 2;\n        } else {\n            counter += 3;\n        }\n\
    \    }\n    counter", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', "    let mut count = 0;\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            count += 1;\n        } else if\
    \ c.is_uppercase() {\n            count += 1;\n        } else {\n            count\
    \ += 2;\n        }\n    }\n    count", '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', "    let mut count = 0;\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            count += 1;\n        } else if\
    \ c.is_uppercase() {\n            count += 2;\n        } else {\n            count\
    \ += 3;\n        }\n    }\n    count", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut counter = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            counter += 1;\n        } else if c.is_uppercase() {\n       \
    \     counter += 2;\n        } else {\n            counter += 3;\n        }\n\
    \    }\n    counter", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| c.is_ascii_lowercase()).count()', "    let mut char_count\
    \ = HashMap::new();\n    for c in string.chars() {\n        if char_count.contains_key(&c)\
    \ {\n            char_count.entry(c).or_insert(0) += 1;\n        } else {\n  \
    \          char_count.insert(c, 1);\n        }\n    }\n    char_count.len()",
  "    let mut count = 1;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut count = 1;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 1;\n        } else {\n            count += 1;\n        }\n    }\n\
    \    count", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', "    let mut char_count\
    \ = HashMap::new();\n    for c in string.chars() {\n        let count = char_count.entry(c).or_insert(0);\n\
    \        *count += 1;\n    }\n    char_count.iter().filter(|(_, count)| count\
    \ > 1).count()", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut count = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count", '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut counter = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            counter += 1;\n        } else if c.is_uppercase() {\n       \
    \     counter += 2;\n        } else {\n            counter += 3;\n        }\n\
    \    }\n    counter", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut count = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', "    let mut counter\
    \ = 0;\n    for c in string.chars() {\n        if let Some(lower) = c.to_lowercase()\
    \ {\n            if let Some(upper) = c.to_uppercase() {\n                if lower\
    \ == upper {\n                    counter += 1;\n                }\n         \
    \   }\n        }\n    }\n    counter", '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_whitespace()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut char_count = HashMap::new();\n    for c in string.chars() {\n     \
    \   let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\
    \    char_count.iter().filter(|(_, count)| count > 1).count()", '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  "    let mut char_count = HashMap::new();\n    for c in string.chars() {\n     \
    \   char_count.entry(c).or_insert(0) += 1;\n    }\n    char_count.len()", '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_whitespace()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_whitespace()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()']
stop_tokens:
- "\n}"
