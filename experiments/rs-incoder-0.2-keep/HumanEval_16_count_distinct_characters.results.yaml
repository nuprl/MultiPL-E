name: HumanEval_16_count_distinct_characters
language: rust
results:
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfbpr358y.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3v46xq4x.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplb18_287.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy8prjeon.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj4dynshd.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvg89rdwc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            counter += 1;\n        } else if c.is_uppercase()\
    \ {\n            counter += 2;\n        } else {\n            counter += 3;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmpoef7mk_y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp02znjp0r.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7zyv71f0.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprbuqcg7h.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 1;\n        } else {\n            count += 2;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpr93otkpj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfz6um61w.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuw6yhq9u.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpub21d3rr.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgpzl2kp1.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbji65y27.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4jxg9ro5.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj4tgcr_y.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpygl2i_3r.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgfhas2wo.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd9nminvc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5m2vnu2g.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzcsn012n.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 2;\n        } else {\n            count += 3;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp4qk8kvrx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcvtb_ome.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx80wd6cr.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprgsgbggw.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzddw478n.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjfi9660.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpubbg466w.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfnpxqxco.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjs6xwcpr.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4qjt8yiu.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg88m_kod.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9hhz8brr.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp85_t744.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0x8msx94.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1kvutm7p.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwr4jilu9.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8932yer_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxji7iixs.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpszqvz1k4.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm8fls1sy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            counter += 1;\n        } else if c.is_uppercase()\
    \ {\n            counter += 2;\n        } else {\n            counter += 3;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp8l7ew6_3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx3q8y0hd.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1c2wo8g9.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1raayncl.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp83ux_lno.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdyqvaweg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_count = HashMap::new();\n    for c in string.chars()\
    \ {\n        if char_count.contains_key(&c) {\n            char_count.entry(c).or_insert(0)\
    \ += 1;\n        } else {\n            char_count.insert(c, 1);\n        }\n \
    \   }\n    char_count.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp6whcn5cw.rs:7:26\n  |\n7 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmp6whcn5cw.rs:10:46\n   |\n\
    10 |             char_count.entry(c).or_insert(0) += 1;\n   |             --------------------------------\
    \ ^^\n   |             |\n   |             cannot assign to this expression\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0433.\nFor more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 2;\n        } else {\n            count += 3;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxnkgaxx3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp25jym5qy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3qu26rg_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphx1xmym_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqmtttk87.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpazvhgktt.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpft08i51m.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6k8odynu.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 1;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 1;\n        } else {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp20_9_vvy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppaf37zfv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5r4ruggf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptj9qpxh_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_cgdqtjq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0lmdyimw.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi9iu57lg.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmadnm32s.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpucma4c1g.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsjh2eimd.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptdol7u48.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_rdwxkj0.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4nipg19j.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo5rdxxze.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1xdyj3ts.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpagcsh52l.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3z4xbebq.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiak802vn.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2er1498f.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppaj7cqua.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00kbuy9t.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj78j_ymi.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg7z016ml.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpypegvq8t.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpft3gvlpv.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe1pk2mrs.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpptrnb8da.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfbca3i7o.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm1gxujk6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp8ddffd1.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr7i__5q5.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ata96wc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfxt6ppme.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_count = HashMap::new();\n    for c in string.chars()\
    \ {\n        let count = char_count.entry(c).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    char_count.iter().filter(|(_, count)| count > 1).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp8qhm0c6h.rs:7:26\n  |\n7 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxtp8xsd2.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8yky_wmx.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyt8ma1i3.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp04g1fzy_.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 2;\n        } else {\n            count += 3;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp56_u8l2d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxf5qf88u.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvsakuhfx.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5z0rs_lc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgucgko53.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp506lom8q.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9w24ws4g.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            counter += 1;\n        } else if c.is_uppercase()\
    \ {\n            counter += 2;\n        } else {\n            counter += 3;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmph51n8nr9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp48tejb0u.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnu2dre3g.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj50clxfo.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr7k8hp7i.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n\
    \        if c.is_lowercase() {\n            count += 1;\n        } else if c.is_uppercase()\
    \ {\n            count += 2;\n        } else {\n            count += 3;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmpug3j3aok.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsctvz2yi.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgo3aa30u.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5rt_anm.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3b90iri.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxl4jz98y.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprihmyl4h.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx2k50g9t.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu7nlm7bs.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    for c in string.chars() {\n\
    \        if let Some(lower) = c.to_lowercase() {\n            if let Some(upper)\
    \ = c.to_uppercase() {\n                if lower == upper {\n                \
    \    counter += 1;\n                }\n            }\n        }\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2tlvayr_.rs:9:16\n  |\n9 |\
    \         if let Some(lower) = c.to_lowercase() {\n  |                ^^^^^^^^^^^\
    \   ---------------- this expression has type `ToLowercase`\n  |             \
    \   |\n  |                expected struct `ToLowercase`, found enum `Option`\n\
    \  |\n  = note: expected struct `ToLowercase`\n               found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2tlvayr_.rs:10:20\n   |\n10 |\
    \             if let Some(upper) = c.to_uppercase() {\n   |                  \
    \  ^^^^^^^^^^^   ---------------- this expression has type `ToUppercase`\n   |\
    \                    |\n   |                    expected struct `ToUppercase`,\
    \ found enum `Option`\n   |\n   = note: expected struct `ToUppercase`\n      \
    \          found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdd7in2ov.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6ewqffi.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpczt1thvs.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_1u1xb1a.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpok3y4m3g.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmparsjud8d.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8yhw93c1.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpinpmaquh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv1s0c_av.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgoqy27x3.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptl0zzj92.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp46p1ksji.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprv741t10.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5dl19bhf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfnaqizv5.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3097eq9x.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprer02koh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg3iqh1l7.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy04_8tm4.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpldoiktf7.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb77as7vh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp83f9jj_a.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8t6pu5l4.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpulke5kpt.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_gz3j7wt.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7dtja1kf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9b7_1f18.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzd7_p5x5.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnyzs5mwb.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkqivcb0j.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnt1197ez.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt1ryy82n.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy2ksmhld.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1nn5n17d.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl2s_0in1.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwacxh_a6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvll_nu9r.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpofz9z3pc.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_k_qy7jb.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpipypujss.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8d7tii4z.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppze_em81.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjself1b.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp78v39atf.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvmlshidm.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi4n_3zp6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjp0zx49j.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1t0b_5oh.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe94hfw41.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzsudfzta.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpho905xe6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkjgxekaa.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_count = HashMap::new();\n    for c in string.chars()\
    \ {\n        let count = char_count.entry(c).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    char_count.iter().filter(|(_, count)| count > 1).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmps5aypc10.rs:7:26\n  |\n7 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsgocef0b.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4a87yh6z.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_count = HashMap::new();\n    for c in string.chars()\
    \ {\n        char_count.entry(c).or_insert(0) += 1;\n    }\n    char_count.len()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp_kkdaxq4.rs:7:26\n  |\n7 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n --> /tmp/tmp_kkdaxq4.rs:9:42\n  |\n9\
    \ |         char_count.entry(c).or_insert(0) += 1;\n  |         --------------------------------\
    \ ^^\n  |         |\n  |         cannot assign to this expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0067, E0433.\n\
    For more information about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkesglv9p.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9z4ug5ku.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnkmz0253.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3caphlm8.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpppafw2__.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzozds_4n.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkm9_6rhx.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3i7pup0k.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwnkpa0zp.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4t_dde06.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpruv81_ni.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqhe83ika.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb44wtn72.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxzz76j3q.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxut97xf9.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp71ttm89l.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_whitespace()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph6d5duh6.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_whitespace()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_whitespace()).count().try_into().unwrap()\n  |                       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0two4ccs.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzh_o0_jt.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcxtg2gat.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                   \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoe31ul14.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq4o9kj44.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxryopewj.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp779u557s.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9qc5dkgy.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr_g3amyp.rs:7:5\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    7 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |                  \
    \                                             ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
