name: HumanEval_20_find_closest_elements
language: rust
prompt: "/// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64)\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0,\
  \ 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]),\
  \ (2.2, 3.1));\n}\n"
completions: ["    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n \
    \   let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n\n\
    \    for number in numbers {\n        let distance = number.abs() - min_distance;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = number;\n        }\n        if distance > max_distance\
    \ {\n            max_distance = distance;\n            max_number = number;\n\
    \        }\n    }\n\n    (min_number, max_number)", "    let mut min_distance\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n\n    for &n in numbers {\n        let distance = n.abs() - min_distance;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n        if distance > max_distance {\n\
    \            max_distance = distance;\n            max_number = n;\n        }\n\
    \    }\n\n    (min_number, max_number)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for &n in\
    \ numbers {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = n;\n        }\n  \
    \      if dist > max_dist {\n            max_dist = dist;\n            max_number\
    \ = n;\n        }\n    }\n    (min_number, max_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_element;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_element = n;\n\
    \        }\n    }\n    (min_element, min_dist)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        let\
    \ distance = number.abs() - min_distance;\n        if distance < min_distance\
    \ {\n            min_distance = distance;\n            min_number = number;\n\
    \        }\n        if distance > max_distance {\n            max_distance = distance;\n\
    \            max_number = number;\n        }\n    }\n    (min_number, max_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n    (smallest_number, largest_number)", "    let mut min_dist =\
    \ std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for number in numbers\
    \ {\n        let dist = number.abs() - min_dist;\n        if dist < min_dist {\n\
    \            min_dist = dist;\n            min_number = number;\n        }\n \
    \   }\n    (min_number, min_dist)", "    let mut smallest = numbers[0];\n    let\
    \ mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut max_element\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = std::f64::MAX;\n\
    \        if n < min_element {\n            min_element = n;\n            min_dist\
    \ = dist;\n        } else if n > max_element {\n            max_element = n;\n\
    \            dist = std::f64::MAX;\n        } else {\n            dist = std::f64::MAX;\n\
    \        }\n        if dist < min_dist {\n            min_dist = dist;\n     \
    \       min_element = n;\n        }\n    }\n    (min_element, max_element)", " \
    \   let mut smallest_distance = std::f64::MAX;\n    let mut smallest_number =\
    \ std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n    let mut largest_number\
    \ = std::f64::MIN;\n\n    for n in numbers {\n        let distance = n.abs() -\
    \ smallest_distance;\n        if distance < smallest_distance {\n            smallest_distance\
    \ = distance;\n            smallest_number = n;\n        }\n        if distance\
    \ > largest_distance {\n            largest_distance = distance;\n           \
    \ largest_number = n;\n        }\n    }\n\n    (smallest_number, largest_number)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for number in numbers {\n     \
    \   if number < smallest_number {\n            smallest_number = number;\n   \
    \     }\n        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number;\n        }\n        if number > largest {\n            largest = number;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut max_element = numbers[0];\n    for &n in numbers {\n        let dist\
    \ = n.abs() - min_dist;\n        if dist < min_dist {\n            min_dist =\
    \ dist;\n            min_element = n;\n        }\n        if dist > max_dist {\n\
    \            max_dist = dist;\n            max_element = n;\n        }\n    }\n\
    \    (min_element, max_element)", "    let mut smallest = numbers[0];\n    let\
    \ mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut max_element\
    \ = numbers[0];\n    for n in numbers {\n        let dist = std::f64::MAX;\n \
    \       for m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let d = std::f64::abs(n - m);\n            if d <\
    \ dist {\n                dist = d\n            }\n        }\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = n;\n \
    \       }\n        if dist > max_dist {\n            max_dist = dist;\n      \
    \      max_element = n;\n        }\n    }\n    (min_element, max_element)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n\n    for number in numbers.iter().rev() {\n        let distance\
    \ = number.abs() - smallest_number;\n        if distance < smallest_distance {\n\
    \            smallest_distance = distance;\n            smallest_number = number;\n\
    \        }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_distance;\n        if distance < min_distance {\n          \
    \  min_distance = distance;\n            min_number = n;\n        }\n        if\
    \ distance > max_distance {\n            max_distance = distance;\n          \
    \  max_number = n;\n        }\n    }\n    (min_number, max_number)", "    let\
    \ mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let\
    \ mut min_element_index = -1;\n    let mut max_element = numbers[0];\n    let\
    \ mut max_element_index = -1;\n    for i in 1..numbers.len() {\n        let dist\
    \ = numbers[i] - min_element;\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = numbers[i];\n            min_element_index\
    \ = i;\n        }\n        if numbers[i] > max_element {\n            max_element\
    \ = numbers[i];\n            max_element_index = i;\n        }\n    }\n    (min_element,\
    \ min_element_index), (max_element, max_element_index)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for number in\
    \ numbers {\n        let dist = number.abs() - min_dist;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = number;\n        }\n\
    \    }\n    (min_number, min_dist)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = numbers.iter().position(|&x|\
    \ x == min_element);\n    let mut max_element = numbers[0];\n    let mut max_element_index\
    \ = numbers.iter().position(|&x| x == max_element);\n\n    for i in numbers.iter().rev()\
    \ {\n        let dist = std::f64::MAX;\n        let element = i;\n        let\
    \ element_index = numbers.iter().position(|&x| x == element);\n\n        if element_index\
    \ > min_element_index {\n            dist = std::f64::MAX;\n        } else {\n\
    \            if element_index < max_element_index {\n                dist = std::f64::MAX;\n\
    \            } else {\n                dist = std::f64::MAX;\n            }\n\
    \        }\n\n        if dist < min_dist {\n            min_dist = dist;\n   \
    \         min_element = element;\n            min_element_index = element_index;\n\
    \        }\n\n        if dist > max_dist {\n            max_dist = dist;\n   \
    \         max_element = element;\n            max_element_index = element_index;\n\
    \        }\n    }\n\n    (min_element, max_element)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = std::f64::MAX;\n        for &m in\
    \ numbers {\n            if m == n {\n                continue;\n            }\n\
    \            let dist = dist + f64::abs(n - m);\n        }\n        if dist <\
    \ min_dist {\n            min_dist = dist;\n            min_element = n;\n   \
    \     }\n        if dist > max_dist {\n            max_dist = dist;\n        \
    \    max_element = n;\n        }\n    }\n    (min_element, max_element)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = -1;\n\
    \    let mut max_element = numbers[0];\n    let mut max_element_index = -1;\n\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n        let dist\
    \ = max_element - numbers[i];\n        if dist < min_dist {\n            max_element\
    \ = numbers[i];\n            max_element_index = i;\n        }\n    }\n\n    (min_element,\
    \ min_element_index), (max_element, max_element_index)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number <\
    \ smallest {\n            smallest = number;\n        }\n        if number > largest\
    \ {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_val;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_val = n;\n     \
    \   }\n        if dist > max_dist {\n            max_dist = dist;\n          \
    \  max_val = n;\n        }\n    }\n    (min_val, max_val)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        let\
    \ distance = number.abs() - min_distance;\n        if distance < min_distance\
    \ {\n            min_distance = distance;\n            min_number = number;\n\
    \        }\n        if distance > max_distance {\n            max_distance = distance;\n\
    \            max_number = number;\n        }\n    }\n    (min_number, max_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number;\n        }\n        if number > largest {\n  \
    \          largest = number;\n        }\n    }\n    (smallest, largest)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number <\
    \ smallest {\n            smallest = number;\n        }\n        if number > largest\
    \ {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number < smallest\
    \ {\n            smallest = number;\n        }\n        if number > largest {\n\
    \            largest = number;\n        }\n    }\n    (smallest, largest)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for &n in numbers {\n        let dist = std::f64::MAX;\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n        if n < min_dist {\n            min_dist =\
    \ n;\n        }\n        if n > max_dist {\n            max_dist = n;\n      \
    \  }\n    }\n    (min_val, max_val)", "    let mut smallest = numbers[0];\n  \
    \  let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \n    for &n in numbers {\n        let distance = n.abs() - min_distance;\n  \
    \      if distance < min_distance {\n            min_distance = distance;\n  \
    \          min_number = n;\n        }\n    }\n\n    (min_number, min_distance)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest_number {\n        \
    \    smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        let distance = number.abs() - min_number;\n        if distance <\
    \ min_distance {\n            min_distance = distance;\n            min_number\
    \ = number;\n        }\n        if distance > max_distance {\n            max_distance\
    \ = distance;\n            max_number = number;\n        }\n    }\n    (min_number,\
    \ max_number)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number;\n        }\n        if number > largest {\n            largest = number;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for\
    \ &n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_val = n;\n        }\n     \
    \   if dist > max_dist {\n            max_dist = dist;\n            max_val =\
    \ n;\n        }\n    }\n    (min_val, max_val)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for number in\
    \ numbers.iter() {\n        if number < smallest_number {\n            smallest_number\
    \ = number;\n        }\n\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n \
    \   for &n in numbers {\n        let dist = n.abs() - min_element;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_element = n;\n\
    \        }\n    }\n    (min_element, min_dist)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers.iter().rev() {\n        if number < smallest {\n         \
    \   smallest = number;\n        }\n        if number > largest {\n           \
    \ largest = number;\n        }\n    }\n    (smallest, largest)", "    let mut\
    \ smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers\
    \ {\n        if n < smallest {\n            smallest = n;\n        }\n       \
    \ if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let\
    \ mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for\
    \ number in numbers {\n        let dist = number.abs() - min_dist;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_number = number;\n\
    \        }\n        if dist > max_dist {\n            max_dist = dist;\n     \
    \       max_number = number;\n        }\n    }\n    (min_number, max_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n    let\
    \ mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n\n    for\
    \ n in numbers {\n        let distance = n.abs() - min_distance;\n        if distance\
    \ < min_distance {\n            min_distance = distance;\n            min_number\
    \ = n;\n        }\n        if distance > max_distance {\n            max_distance\
    \ = distance;\n            max_number = n;\n        }\n    }\n    (min_number,\
    \ max_number)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_distance\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        let distance = number.abs()\
    \ - min_distance;\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = number;\n        }\n        if distance\
    \ > max_distance {\n            max_distance = distance;\n            max_number\
    \ = number;\n        }\n    }\n    (min_number, max_number)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_number;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let\
    \ mut min_element = numbers[0];\n    let mut min_element_index = -1;\n    let\
    \ mut max_element = numbers[0];\n    let mut max_element_index = -1;\n\n    for\
    \ i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n    \
    \    if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n        if dist\
    \ > max_dist {\n            max_dist = dist;\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n\n    (min_element, min_element_index),\
    \ (max_element, max_element_index)", "    let mut smallest = numbers[0];\n   \
    \ let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for &n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = n;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = n;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut max_element = numbers[0];\n    for i in numbers.iter().rev() {\n\
    \        let dist = std::f64::MAX;\n        for j in numbers.iter().rev() {\n\
    \            if i != j {\n                let dist = dist + f64::abs(i - j);\n\
    \            }\n        }\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = i;\n        }\n        if dist > max_dist\
    \ {\n            max_dist = dist;\n            max_element = i;\n        }\n \
    \   }\n    (min_element, max_element)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut smallest_number = std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n\
    \    let mut largest_number = std::f64::MIN;\n    for number in numbers {\n  \
    \      let distance = std::f64::abs(number - smallest_number);\n        if distance\
    \ < smallest_distance {\n            smallest_distance = distance;\n         \
    \   smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let\
    \ mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for val in\
    \ numbers {\n        let dist = val - min_val;\n        if dist < min_dist {\n\
    \            min_dist = dist;\n            min_val = val;\n        }\n       \
    \ if dist > max_dist {\n            max_dist = dist;\n            max_val = val;\n\
    \        }\n    }\n    (min_val, max_val)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = n;\n \
    \       }\n        if dist > max_dist {\n            max_dist = dist;\n      \
    \      max_element = n;\n        }\n    }\n    (min_element, max_element)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n    (smallest_number, largest_number)", "    let mut smallest =\
    \ numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n   \
    \     if n < smallest {\n            smallest = n;\n        }\n        if n >\
    \ largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64", "    let mut smallest = numbers[0];\n   \
    \ let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_val;\n \
    \       if dist < min_dist {\n            min_dist = dist;\n            min_val\
    \ = numbers[i];\n        }\n        if dist > max_dist {\n            max_dist\
    \ = dist;\n            max_val = numbers[i];\n        }\n    }\n    (min_val,\
    \ max_val)", "    let mut min_dist = std::f64::MAX;\n    let mut min_number =\
    \ numbers[0];\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        let dist = std::f64::MAX;\n        for other_number in numbers {\n\
    \            if number < other_number {\n                dist = other_number -\
    \ number;\n            }\n        }\n        if dist < min_dist {\n          \
    \  min_dist = dist;\n            min_number = number;\n        }\n        if dist\
    \ > max_dist {\n            max_dist = dist;\n            max_number = number;\n\
    \        }\n    }\n    (min_number, max_number)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = n.abs() - min_dist;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_number\
    \ = n;\n        }\n        if dist > max_dist {\n            max_dist = dist;\n\
    \            max_number = n;\n        }\n    }\n    (min_number, max_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_distance =\
    \ std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for &n in numbers {\n        let distance = n.abs() - min_distance;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n        if distance > max_distance {\n\
    \            max_distance = distance;\n            max_number = n;\n        }\n\
    \    }\n    (min_number, max_number)", "    let mut smallest = numbers[0];\n \
    \   let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n    let\
    \ mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for\
    \ &n in numbers {\n        let distance = n.abs() - min_distance;\n        if\
    \ distance < min_distance {\n            min_distance = distance;\n          \
    \  min_number = n;\n        }\n        if distance > max_distance {\n        \
    \    max_distance = distance;\n            max_number = n;\n        }\n    }\n\
    \    (min_number, max_number)", "    let mut smallest_number = numbers[0];\n \
    \   let mut largest_number = numbers[0];\n    for &n in numbers {\n        if\
    \ n < smallest_number {\n            smallest_number = n;\n        }\n       \
    \ if n > largest_number {\n            largest_number = n;\n        }\n    }\n\
    \    (smallest_number, largest_number)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_number = n;\n  \
    \      }\n        if dist > max_dist {\n            max_dist = dist;\n       \
    \     max_number = n;\n        }\n    }\n    (min_number, max_number)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers.iter() {\n        if number < smallest_number {\n\
    \            smallest_number = number;\n        }\n\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    let mut max_number = numbers[0];\n\n    for n in numbers\
    \ {\n        let distance = n.abs() - min_distance;\n        if distance < min_distance\
    \ {\n            min_distance = distance;\n            min_number = n;\n     \
    \   }\n        if distance > max_distance {\n            max_distance = distance;\n\
    \            max_number = n;\n        }\n    }\n    (min_number, max_number)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for &n in numbers {\n        let dist\
    \ = std::f64::MAX;\n        for &i in &numbers {\n            if *i < n {\n  \
    \              let d = *i - n;\n                if d < dist {\n              \
    \      dist = d;\n                }\n            }\n        }\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = n;\n \
    \           min_element_index = numbers.iter().position(|&n| *n == n);\n     \
    \   }\n    }\n    (min_element, min_element_index)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let\
    \ mut max_val = numbers[0];\n    for n in numbers {\n        let dist = n.abs()\
    \ - min_dist;\n        if dist < min_dist {\n            min_dist = dist;\n  \
    \          min_val = n;\n        }\n        if dist > max_dist {\n           \
    \ max_dist = dist;\n            max_val = n;\n        }\n    }\n    (min_val,\
    \ max_val)", "    let mut min_dist = std::f64::MAX;\n    let mut min_number =\
    \ numbers[0];\n    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        let dist = number.f64() - min_number.f64();\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = number;\n        }\n\
    \        if dist > max_dist {\n            max_dist = dist;\n            max_number\
    \ = number;\n        }\n    }\n    (min_number, max_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n\n    for number in numbers {\n        if\
    \ number < smallest_number {\n            smallest_number = number;\n        }\n\
    \        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)"]
stop_tokens:
- "\n}"
