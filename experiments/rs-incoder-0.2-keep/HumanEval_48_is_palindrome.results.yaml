name: HumanEval_48_is_palindrome
language: rust
results:
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp9hhjwxwe.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpki2st_w2.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmph3qjnblp.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpm7gbbhbn.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1]);\n   |      \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm7gbbhbn.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = text.chars().fold(String::new(),\
    \ |mut acc, c| {\n        acc.push_str(&c.to_string());\n        acc\n    });\n\
    \    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp7qsfn5mi.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_wvw7n2s.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp_wvw7n2s.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpy1723b0k.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i <= j {\n   \
    \     reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n       \
    \ j -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate =\
    \ is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmprm4h5yc8.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp69fikr19.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.char_indices().rev();\n\
    \    let mut i = 0;\n    while i < it.len() {\n        reversed.push(*it[i]);\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: the method `len` exists for struct `Rev<CharIndices<'_>>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmp15lzyd7k.rs:14:18\n\
    \    |\n14  |       while i < it.len() {\n    |                    ^^^ method\
    \ cannot be called on `Rev<CharIndices<'_>>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `CharIndices<'_>: ExactSizeIterator`\n            which is required by `Rev<CharIndices<'_>>:\
    \ ExactSizeIterator`\n\nerror[E0608]: cannot index into a value of type `Rev<CharIndices<'_>>`\n\
    \  --> /tmp/tmp15lzyd7k.rs:15:24\n   |\n15 |         reversed.push(*it[i]);\n\
    \   |                        ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() && j < text.len()\
    \ {\n        reversed.push(*text.chars().nth(j).unwrap());\n        i += 1;\n\
    \        j += 1;\n    }\n    reversed.reverse();\n    text == reversed\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp7ccfhqjp.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(j).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp7ccfhqjp.rs:20:14\n\
    \   |\n20 |     reversed.reverse();\n   |              ^^^^^^^ help: there is\
    \ an associated function with a similar name: `reserve`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.push_str(&text[..]);\n\
    \    reversed.rev();\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpgyxmariu.rs:13:14\n\
    \    |\n13  |       reversed.rev();\n    |                ^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for ch in text.chars() {\n        reversed.push(*ch);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp_4gj3yao.rs:14:23\n\
    \   |\n14 |         reversed.push(*ch);\n   |                       ^^^\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp_4gj3yao.rs:16:14\n   |\n16 |     reversed.reverse();\n   |    \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpasdw1hcq.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp6v81z7_v.rs:15:29\n   |\n15 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \   |                             ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n15 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \   |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reverse = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reverse.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reverse == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpiow_7a07.rs:16:22\n\
    \   |\n16 |         reverse.push(*text.chars().nth(i).unwrap());\n   |       \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp3w0mf_wg.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpe5mfe6u8.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len()\
    \ * 2);\n    for &c in text.chars() {\n        reversed.push(c);\n        reversed.push(c);\n\
    \    }\n    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp765r5jrt.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp765r5jrt.rs:17:14\n   |\n17 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    reversed.is_empty() || text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmp4sr1pgsn.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpm_xxx2g8.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut acc,\
    \ c| {\n        acc.push_str(&c.to_string());\n        acc\n    });\n    reversed.chars().fold(true,\
    \ |acc, c| {\n        if *c != *acc.last() {\n            acc = false;\n     \
    \   }\n        acc\n    });\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpkcpwdj2p.rs:16:12\n\
    \   |\n16 |         if *c != *acc.last() {\n   |            ^^\n\nerror[E0599]:\
    \ `bool` is not an iterator\n  --> /tmp/tmpkcpwdj2p.rs:16:23\n   |\n16 |     \
    \    if *c != *acc.last() {\n   |                       ^^^^ `bool` is not an\
    \ iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `bool: Iterator`\n           which is required by `&mut bool: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkcpwdj2p.rs:10:35\n   |\n10 |\
    \ fn is_palindrome(text: String) -> bool {\n   |    -------------            \
    \      ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n20 |     });\n   |\
    \       - help: remove this semicolon\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push((text[i..].chars().collect::<Vec<_>>()).rev().collect::<String>());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmp7ljj06sx.rs:15:63\n\
    \    |\n15  |           reversed.push((text[i..].chars().collect::<Vec<_>>()).rev().collect::<String>());\n\
    \    |                                                                 ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    let mut i = 0;\n    while i < text.len() && i < reversed.len() {\n      \
    \  if text[i] != reversed[i] {\n            return false;\n        }\n       \
    \ i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmpbethah9h.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpbethah9h.rs:14:12\n   |\n14 |         if text[i] !=\
    \ reversed[i] {\n   |            ^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut reverse = String::new();\n   \
    \ reverse.resize(s.len(), 0);\n    for i in s.chars().rev() {\n        reverse[s.len()\
    \ - i - 1] = i;\n    }\n    reverse == s\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp4ue3nqao.rs:13:13\n   |\n13 |     reverse.resize(s.len(),\
    \ 0);\n   |             ^^^^^^ method not found in `String`\n\nerror[E0277]: cannot\
    \ subtract `char` from `usize`\n  --> /tmp/tmp4ue3nqao.rs:15:25\n   |\n15 |  \
    \       reverse[s.len() - i - 1] = i;\n   |                         ^ no implementation\
    \ for `usize - char`\n   |\n   = help: the trait `Sub<char>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmprw13sae7.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpz92lge8d.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpfjbbnlec.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.char_indices().rev();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*it);\n\
    \        i += 1;\n        it.next();\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Rev<CharIndices<'_>>` cannot be dereferenced\n  -->\
    \ /tmp/tmp0onab4p5.rs:15:23\n   |\n15 |         reversed.push(*it);\n   |    \
    \                   ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmphs9db84o.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphs9db84o.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push(c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        if char != reversed[0] {\n            is_palindrome\
    \ = false;\n        }\n        is_palindrome\n    })\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp_bfwb3gc.rs:16:20\n   |\n16 |         if char != reversed[0] {\n   |\
    \                    ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n \
    \  |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpigc19sxm.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push_str(&text[len\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed.is_eq(&text)\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmps59j2ysk.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[len - i - 1]);\n   |             \
    \               ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `is_eq` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmps59j2ysk.rs:18:14\n   |\n18 |     reversed.is_eq(&text)\n   |      \
    \        ^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push_str(&text[len\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpcn9q6qv1.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[len - i - 1]);\n   |             \
    \               ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpuhepgj9g.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpuhepgj9g.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpebynip_6.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push_str(&text[len\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6nesnyx4.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[len - i - 1]);\n   |             \
    \               ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `is_equal` found for struct `String` in the current scope\n\
    \  --> /tmp/tmp6nesnyx4.rs:18:14\n   |\n18 |     reversed.is_equal(text)\n   |\
    \              ^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_owned();\n    reversed_text.reverse();\n\
    \    text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpofc_hmlj.rs:12:19\n   |\n12 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_owned();\n    reversed_text.reverse();\n\
    \    text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp_fzspk8c.rs:12:19\n   |\n12 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp_717k0s5.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push_str(&c.to_string());\n        reversed\n    });\n\
    \    reversed.chars().fold(true, |mut is_palindrome, char| {\n        is_palindrome\
    \ && char == reversed.chars().next().unwrap()\n    })\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6j6bwa4a.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpz990ppoi.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut i = 0;\n    let mut j = s.len()\
    \ - 1;\n    while i < j {\n        if s[i] != s[j] {\n            return false;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpy7ll3soa.rs:15:12\n\
    \   |\n15 |         if s[i] != s[j] {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpy7ll3soa.rs:15:20\n   |\n15 |         if s[i] != s[j] {\n   | \
    \                   ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp2ct24s24.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpdfnks91e.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpud367ftt.rs:15:29\n   |\n15 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \   |                             ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n15 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \   |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpfcg1etb5.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reverse = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() {\n        reverse.push_str(&text[j..].to_lowercase());\n\
    \        i += 1;\n        j += 1;\n    }\n    reverse == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk0136rpc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpwtv9zwn3.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpcafqv9at.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len()\
    \ * 2);\n    for ch in text.chars() {\n        reversed.push(*ch as char);\n \
    \   }\n    reversed.reverse();\n    reversed == text\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpwakjl9zs.rs:14:23\n\
    \   |\n14 |         reversed.push(*ch as char);\n   |                       ^^^\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpwakjl9zs.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0c4yrbw.rs:18:28\n   |\n\
    18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut reverse = s.chars().collect::<String>();\n\
    \    reverse.reverse();\n    s == reverse\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpwxceel6z.rs:13:13\n   |\n13 |     reverse.reverse();\n\
    \   |             ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push_str(&text[len\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp4i6cf3ai.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[len - i - 1]);\n   |             \
    \               ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `is_equal` found for struct `String` in the current scope\n\
    \  --> /tmp/tmp4i6cf3ai.rs:18:14\n   |\n18 |     reversed.is_equal(text)\n   |\
    \              ^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplieshic7.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmplieshic7.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpo5m02emz.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i <= j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpavh77gje.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpditp0dx7.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpqzb7w9ub.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[i..]);\n\
    \        i += 1;\n    }\n    reversed.reverse();\n    text == reversed\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpjuenlw4h.rs:18:14\n   |\n18 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = text.chars().fold(String::new(),\
    \ |mut acc, c| {\n        acc.push_str(&c.to_string());\n        acc\n    });\n\
    \    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp5vs2t0jz.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpb_6v0jf6.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<String>().rev();\n\
    \    reversed.is_equal(text)\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpu5p6l4c5.rs:11:57\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<String>().rev();\n\
    \    |                                                           ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpd43mo9dq.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp1wjkcrz1.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.chars().enumerate().rev();\n\
    \    for &(i, c) in it {\n        reversed.push(c);\n        if i == 0 {\n   \
    \         return true;\n        }\n    }\n    reversed.reverse();\n    text ==\
    \ reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpk_kjq7en.rs:12:43\n     |\n12   |     let mut it = text.chars().enumerate().rev();\n\
    \     |                                           ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n  --> /tmp/tmpk_kjq7en.rs:13:20\n\
    \   |\n13 |     for &(i, c) in it {\n   |                    ^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n   |\n   = help: the following other types\
    \ implement trait `ExactSizeIterator`:\n             &mut I\n             Args\n\
    \             ArgsOs\n             ArrayChunks<'_, T, N>\n             ArrayChunksMut<'_,\
    \ T, N>\n             ArrayWindows<'_, T, N>\n             Box<I, A>\n       \
    \      Chunks<'_, T>\n           and 109 others\n   = note: required because of\
    \ the requirements on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Rev<Enumerate<Chars<'_>>>`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `Rev<Enumerate<Chars<'_>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk_kjq7en.rs:13:9\n   |\n13 |     for &(i, c)\
    \ in it {\n   |         ^^^^^^^    -- this expression has type `Option<(usize,\
    \ char)>`\n   |         |\n   |         expected tuple, found reference\n   |\n\
    \   = note:  expected tuple `(usize, char)`\n           found reference `&_`\n\
    \nerror[E0599]: no method named `reverse` found for struct `Str"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp1lra33yg.rs:15:29\n   |\n15 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \   |                             ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n15 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \   |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp1is24j9i.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp1is24j9i.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpssel0882.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpdhac2lry.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpyammz7eo.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpcv4usts4.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    reversed.is_empty() || text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmpupx4s1pq.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpdcke2_b4.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp8td5j_28.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpmu9rkcwn.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpgxlh9o7a.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgxlh9o7a.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpaxmfs05g.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    text == reversed\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6d15_a8m.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpvsvtj0v3.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.clone();\n    reversed_text.reverse();\n    text == reversed_text\n}\n\
    \nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpipx2upcn.rs:13:19\n   |\n13 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmprctjha6d.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpheywpafp.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpheywpafp.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpqzr1hsgv.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpddt5fu81.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push(c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        is_palindrome = char == reversed[0];\n\
    \        reversed.remove(0);\n        is_palindrome\n    })\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpmvhvq3_o.rs:16:33\n   |\n16 |         is_palindrome = char == reversed[0];\n\
    \   |                                 ^^^^^^^^^^^ `String` cannot be indexed by\
    \ `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp_160eyta.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp_160eyta.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpralq73a1.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() && j < text.len()\
    \ {\n        reversed.push(*text.chars().nth(j).unwrap());\n        i += 1;\n\
    \        j += 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpwwqseg8c.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(j).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `is_equal` found for struct `String` in the current scope\n  --> /tmp/tmpwwqseg8c.rs:20:14\n\
    \   |\n20 |     reversed.is_equal(text)\n   |              ^^^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut reversed_len =\
    \ text.len() / 2;\n    for &c in text.chars() {\n        reversed.push(c);\n \
    \       reversed_len -= 1;\n    }\n    reversed.reverse();\n    reversed == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmu5rvc3t.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpmu5rvc3t.rs:17:14\n   |\n17 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpdqp8ed3u.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpdqp8ed3u.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn\
    \ main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmphrhufhhf.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `is_equal` found for struct `String` in the current scope\n  --> /tmp/tmphrhufhhf.rs:19:14\n\
    \   |\n19 |     reversed.is_equal(text)\n   |              ^^^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpv54iyen9.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp8w3xpe4s.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpcqq7u5dq.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpcqq7u5dq.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push(c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        if char == char.into() {\n            is_palindrome\
    \ = false;\n        }\n        is_palindrome\n    });\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfz0ke8b.rs:10:35\n   |\n\
    10 | fn is_palindrome(text: String) -> bool {\n   |    -------------         \
    \         ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n20 |     });\n   |\
    \       - help: remove this semicolon\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp2zmfvnt8.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpw8yq3plk.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push(*text[len - i\
    \ - 1]);\n        i += 1;\n    }\n    reversed.is_eq(text)\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqp1p_pv8.rs:15:24\n\
    \   |\n15 |         reversed.push(*text[len - i - 1]);\n   |                 \
    \       ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `is_eq` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpqp1p_pv8.rs:18:14\n   |\n18 |     reversed.is_eq(text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpw9fh49cg.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpery5o1wm.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpery5o1wm.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpdol7fk58.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmphtpjhah5.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.char_indices().rev();\n\
    \    let mut i = 0;\n    while i < it.len() {\n        reversed.push_str(&text[it.next()]);\n\
    \        i += 1;\n    }\n    reversed.is_eq(text)\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: the method `len` exists for struct `Rev<CharIndices<'_>>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmptf8gmdnx.rs:14:18\n\
    \    |\n14  |       while i < it.len() {\n    |                    ^^^ method\
    \ cannot be called on `Rev<CharIndices<'_>>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `CharIndices<'_>: ExactSizeIterator`\n            which is required by `Rev<CharIndices<'_>>:\
    \ ExactSizeIterator`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<(usize,\
    \ char)>`\n  --> /tmp/tmptf8gmdnx.rs:15:28\n   |\n15 |         reversed.push_str(&text[it.next()]);\n\
    \   |                            ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `Option<(usize, char)>`\n   |\n   = help: the trait `Index<Option<(usize, char)>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `is_eq` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmptf8gmdnx.rs:18:14\n   |\n18 |     reversed.is_eq(text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpv2q_3x4e.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpv2q_3x4e.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for ch in text.chars() {\n        reversed.push(*ch);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp0_pg0rbl.rs:14:23\n\
    \   |\n14 |         reversed.push(*ch);\n   |                       ^^^\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp0_pg0rbl.rs:16:14\n   |\n16 |     reversed.reverse();\n   |    \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.char_indices().rev();\n\
    \    let mut i = 0;\n    while i < it.len() {\n        reversed.push_str(&text[it.next()]);\n\
    \        i += 1;\n    }\n    reversed.is_eq(&text)\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: the method `len` exists for struct `Rev<CharIndices<'_>>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpi8ra_t1x.rs:14:18\n\
    \    |\n14  |       while i < it.len() {\n    |                    ^^^ method\
    \ cannot be called on `Rev<CharIndices<'_>>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `CharIndices<'_>: ExactSizeIterator`\n            which is required by `Rev<CharIndices<'_>>:\
    \ ExactSizeIterator`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<(usize,\
    \ char)>`\n  --> /tmp/tmpi8ra_t1x.rs:15:28\n   |\n15 |         reversed.push_str(&text[it.next()]);\n\
    \   |                            ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `Option<(usize, char)>`\n   |\n   = help: the trait `Index<Option<(usize, char)>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `is_eq` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpi8ra_t1x.rs:18:14\n   |\n18 |     reversed.is_eq(&text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut iter = text.chars().rev().peekable();\n\
    \    loop {\n        let c = iter.next().unwrap();\n        reversed.push(c);\n\
    \        if c.is_whitespace() {\n            break;\n        }\n    }\n    reversed.chars().all(|c|\
    \ c == text.chars().nth(text.len() - 1 - c))\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `char` from `usize`\n  --> /tmp/tmppnw_abl5.rs:20:67\n\
    \   |\n20 |     reversed.chars().all(|c| c == text.chars().nth(text.len() - 1\
    \ - c))\n   |                                                                \
    \   ^ no implementation for `usize - char`\n   |\n   = help: the trait `Sub<char>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppnw_abl5.rs:20:35\n\
    \   |\n20 |     reversed.chars().all(|c| c == text.chars().nth(text.len() - 1\
    \ - c))\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnhchat82.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpn8izvtq2.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i <= j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpit48d5tc.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpit48d5tc.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpym6cd25c.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i <= j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpr5ryi109.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_lowercase().chars().collect::<String>();\n\
    \    reversed_text.reverse();\n    reversed_text == text\n}\n\nfn main() {\n \
    \   let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpv3321rz8.rs:12:19\n   |\n12 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = text.len()\
    \ - 1;\n    while i >= 0 {\n        reversed.push_str(&text[i..i + 1]);\n    \
    \    i -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp5dgry_9u.rs:12:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpr55s_y49.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzi2f0qsk.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpzi2f0qsk.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().cloned().rev().collect::<String>();\n\
    \    reversed.cmp(&text) == Ordering::Equal\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpr77jwgr9.rs:12:28\n   |\n12 |     reversed.cmp(&text) == Ordering::Equal\n\
    \   |                            ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpr77jwgr9.rs:11:37\n     |\n11   |     let mut reversed = text.chars().cloned().rev().collect::<String>();\n\
    \     |                                     ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `rev`\
    \ exists for struct `Cloned<Chars<'_>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpr77jwgr9.rs:11:46\n   |\n11 |       let mut reversed = text.chars().cloned().rev().collect::<String>();\n\
    \   |                                                ^^^ method cannot be called\
    \ on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `<Chars<'_> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<Chars<'_>>: Iterator`\n     \
    \      `Cloned<Chars<'_>>: Iterator`\n           which is required by `&mut Cloned<Chars<'_>>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0433, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    while\
    \ i < text.len() {\n        reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \        i += 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8t0a_9f2.rs:14:28\n\
    \   |\n14 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `is_equal` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp8t0a_9f2.rs:17:14\n   |\n17 |     reversed.is_equal(text)\n\
    \   |              ^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() && j < text.len()\
    \ {\n        reversed.push(*text.chars().nth(j).unwrap());\n        i += 1;\n\
    \        j += 1;\n    }\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpddqyrcqb.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(j).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpoosd7nr6.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoosd7nr6.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmppg0cka2r.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpr2flo8z2.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2flo8z2.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut i = 0;\n    let mut j = s.len()\
    \ - 1;\n    while i < j {\n        if s[i] != s[j] {\n            return false;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5_s9wq1d.rs:15:12\n\
    \   |\n15 |         if s[i] != s[j] {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5_s9wq1d.rs:15:20\n   |\n15 |         if s[i] != s[j] {\n   | \
    \                   ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpay4i22om.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpmeodn85c.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpj_5qqxt0.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpsb55r5sl.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.rsplit(|&x|\
    \ x == ' ').nth(i).unwrap());\n        i += 1;\n    }\n    reversed.cmp(&text)\
    \ == 0\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0631]: type mismatch in closure arguments\n  --> /tmp/tmpdqyi5v1i.rs:15:29\n\
    \   |\n15 |         reversed.push(*text.rsplit(|&x| x == ' ').nth(i).unwrap());\n\
    \   |                             ^^^^^^ ------------- found signature of `fn(&_)\
    \ -> _`\n   |                             |\n   |                            \
    \ expected signature of `fn(char) -> _`\n   |\n   = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `[closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49]`\n\nerror[E0599]: the method `nth` exists for struct `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpdqyi5v1i.rs:15:36: 15:49]>`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpdqyi5v1i.rs:15:51\n    |\n15  |           reversed.push(*text.rsplit(|&x|\
    \ x == ' ').nth(i).unwrap());\n    |                                      -------------\
    \  ^^^ method cannot be called on `std::str::RSplit<'_, [closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49]>` due to unsatisfied trait bounds\n    |                            \
    \          |\n    |                                      doesn't satisfy `<_ as\
    \ FnOnce<(char,)>>::Output = bool`\n    |                                    \
    \  doesn't satisfy `_: FnMut<(char,)>`\n    |                                \
    \      doesn't satisfy `_: Pattern<'_>`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `[closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49]: Pattern<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpdqyi5v1i.rs:15:36: 15:49]>: Iterator`\n            `<[closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49] as FnOnce<(char,)>>::Output = bool`\n            which is required by\
    \ `std::str::RSplit<'_, [closure@/tmp/tmpdqyi5v1i.rs:15:36: 15:49]>: Iterator`\n\
    \            `[closure@/tmp/tmpdqyi5v1i.rs:15:36: 15:49]: FnMut<(char,)>`\n  \
    \          which is required by `std::str::RSplit<'_, [closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49]>: Iterator`\n            `CharPredicateSearcher<'_, [closure@/tmp/tmpdqyi5v1i.rs:15:36:\
    \ 15:49]>: ReverseSearcher<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmptxtmt7i0.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<String>().rev();\n\
    \    reversed.cmp(&text) == Ordering::Equal\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpvfb_93ri.rs:12:28\n   |\n12 |     reversed.cmp(&text) == Ordering::Equal\n\
    \   |                            ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0599]: `String` is not an iterator\n   --> /tmp/tmpvfb_93ri.rs:11:57\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<String>().rev();\n\
    \    |                                                           ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    reversed.push_str(&text[len..]);\n    reversed.push_str(&text[0..len]);\n\
    \    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6jftnvl1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    reversed.cmp(&text) == 0\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp2e31d5oh.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2e31d5oh.rs:18:28\n   |\n18 |     reversed.cmp(&text) == 0\n  \
    \ |                            ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.chars().collect::<String>().rev();\n\
    \    reversed_text == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpjimvz7ej.rs:11:62\n\
    \    |\n11  |       let mut reversed_text = text.chars().collect::<String>().rev();\n\
    \    |                                                                ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpinnv1yo3.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp1cv78no0.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp9c_kapuo.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp7rqkreky.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `is_equal` found for struct `String` in the current scope\n  --> /tmp/tmp7rqkreky.rs:20:14\n\
    \   |\n20 |     reversed.is_equal(text)\n   |              ^^^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1]);\n        i += 1;\n    }\n    text == reversed\n}\n\nfn main() {\n\
    \    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\"\
    )), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnoultbj5.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1]);\n   |      \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.chars().collect::<String>();\n    reversed_text.reverse();\n    reversed_text\
    \ == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpzp7tc7gj.rs:13:19\n   |\n13 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = text.len()\
    \ - 1;\n    while i >= 0 {\n        reversed.push_str(&text[i..].to_lowercase());\n\
    \        i -= 1;\n    }\n    reversed.eq_ignore_ascii_case(text)\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8gmkdu8g.rs:17:35\n   |\n\
    17 |     reversed.eq_ignore_ascii_case(text)\n   |                           \
    \        ^^^^\n   |                                   |\n   |                \
    \                   expected `&str`, found struct `String`\n   |             \
    \                      help: consider borrowing here: `&text`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpbd_e582g.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpb5s2kgcv.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    text.rev();\n    text ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmplg34f3wy.rs:12:10\n\
    \    |\n12  |       text.rev();\n    |            ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpm5db_ub0.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reverse = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reverse.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reverse == text\n}\n\nfn\
    \ main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpi3od83wn.rs:15:27\n\
    \   |\n15 |         reverse.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reverse = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reverse.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reverse == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpjpuavjdk.rs:16:22\n\
    \   |\n16 |         reverse.push(*text.chars().nth(i).unwrap());\n   |       \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    reversed.is_empty() || text == &reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmp02e49ry8.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    reversed.is_empty()\n        || reversed.iter().zip(text.chars().collect::<Vec<char>>()).all(|(a,\
    \ b)| a == b)\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmpm0gi0iwv.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmprauflihu.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed_text\
    \ = text.clone();\n    reversed_text.rev();\n    text == reversed_text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpefy6yt2_.rs:13:19\n\
    \    |\n13  |       reversed_text.rev();\n    |                     ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpg0owfe52.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut s, c|\
    \ {\n        s.append(&c.to_string());\n        s\n    });\n    reversed.chars().fold(true,\
    \ |mut b, c| {\n        if b {\n            return false;\n        }\n       \
    \ if c != b {\n            return false;\n        }\n        b\n    });\n    true\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp326z038d.rs:12:11\n   |\n12 |         s.append(&c.to_string());\n\
    \   |           ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp326z038d.rs:19:17\n   |\n19 |         if c != b {\n   |\
    \                 ^ expected `char`, found `bool`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpto8x6u1i.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push(*text[len-i-1]);\n\
    \        i += 1;\n    }\n    reversed.is_eq(text)\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpr2oyy8ln.rs:15:24\n\
    \   |\n15 |         reversed.push(*text[len-i-1]);\n   |                     \
    \   ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `is_eq` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpr2oyy8ln.rs:18:14\n   |\n18 |     reversed.is_eq(text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut i = 0;\n    let mut j = s.len()\
    \ - 1;\n    while i < j {\n        if s[i] != s[j] {\n            return false;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq_t81ck9.rs:15:12\n\
    \   |\n15 |         if s[i] != s[j] {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpq_t81ck9.rs:15:20\n   |\n15 |         if s[i] != s[j] {\n   | \
    \                   ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    while len > 0 {\n        reversed.push((text[len - 1] as char).to_string());\n\
    \        len -= 1;\n    }\n    reversed.is_eq(text)\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxf7l1prh.rs:14:24\n\
    \   |\n14 |         reversed.push((text[len - 1] as char).to_string());\n   |\
    \                        ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxf7l1prh.rs:14:23\n\
    \   |\n14 |         reversed.push((text[len - 1] as char).to_string());\n   |\
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0599]: no method named `is_eq` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpxf7l1prh.rs:17:14\n   |\n17 |     reversed.is_eq(text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut iter = text.chars().rev();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*iter);\n\
    \        i += 1;\n        iter.next();\n    }\n    reversed.is_eq(text)\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Rev<Chars<'_>>` cannot be dereferenced\n  --> /tmp/tmpwoi93tle.rs:15:23\n\
    \   |\n15 |         reversed.push(*iter);\n   |                       ^^^^^\n\n\
    error[E0599]: no method named `is_eq` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpwoi93tle.rs:19:14\n   |\n19 |     reversed.is_eq(text)\n\
    \   |              ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    let mut i = 0;\n    let mut j = s.len()\
    \ - 1;\n    while i < j {\n        if s[i] != s[j] {\n            return false;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpchprs8r6.rs:15:12\n\
    \   |\n15 |         if s[i] != s[j] {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpchprs8r6.rs:15:20\n   |\n15 |         if s[i] != s[j] {\n   | \
    \                   ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_string();\n    s.reverse();\n    s == text\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpiwktmm5p.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.cmp(&text) == 0\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpz45ref_u.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz45ref_u.rs:18:28\n\
    \   |\n18 |     reversed.cmp(&text) == 0\n   |                            ^ expected\
    \ enum `std::cmp::Ordering`, found integer\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reverse = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reverse.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    reverse == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp4f65logk.rs:15:22\n\
    \   |\n15 |         reverse.push(*text.chars().nth(i).unwrap());\n   |       \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    reversed.is_empty() || text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<char>` is not an iterator\n   --> /tmp/tmpcvgo9ab1.rs:11:60\n\
    \    |\n11  |       let mut reversed = text.chars().collect::<Vec<char>>().rev();\n\
    \    |                                                              ^^^ `Vec<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<char>: Iterator`\n            which is required by `&mut Vec<char>:\
    \ Iterator`\n            `[char]: Iterator`\n            which is required by\
    \ `&mut [char]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpara6_gq1.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpzmfujuai.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp8xyj020u.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.chars().enumerate().rev();\n\
    \    for &(ref i, ref c) in it {\n        reversed.push(c);\n        if i == 0\
    \ {\n            return true;\n        }\n    }\n    reversed.reverse();\n   \
    \ text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n   \
    \ assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpnrly8ije.rs:12:43\n     |\n12   |     let mut it = text.chars().enumerate().rev();\n\
    \     |                                           ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n  --> /tmp/tmpnrly8ije.rs:13:28\n\
    \   |\n13 |     for &(ref i, ref c) in it {\n   |                            ^^\
    \ the trait `ExactSizeIterator` is not implemented for `Chars<'_>`\n   |\n   =\
    \ help: the following other types implement trait `ExactSizeIterator`:\n     \
    \        &mut I\n             Args\n             ArgsOs\n             ArrayChunks<'_,\
    \ T, N>\n             ArrayChunksMut<'_, T, N>\n             ArrayWindows<'_,\
    \ T, N>\n             Box<I, A>\n             Chunks<'_, T>\n           and 109\
    \ others\n   = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Rev<Enumerate<Chars<'_>>>`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `Rev<Enumerate<Chars<'_>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnrly8ije.rs:13:9\n   |\n13 | \
    \    for &(ref i, ref c) in it {\n   |         ^^^^^^^^^^^^^^^    -- this expression\
    \ has type `Option<(usize, char)>`\n   |         |\n   |         expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(usize, char)`\n        \
    \   found reference `&_`\n\nerror[E0308]: mismatched type"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_owned();\n    reversed_text.reverse();\n\
    \    text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp1ac7pv17.rs:12:19\n   |\n12 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n    \
    \    reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n        j\
    \ -= 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp7ltblql0.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len()\
    \ * 2);\n    for &c in text.chars() {\n        reversed.push(c);\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpytavz_p3.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpytavz_p3.rs:16:14\n   |\n16 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len()\
    \ * 2);\n    for c in text.chars() {\n        reversed.push(c);\n        reversed.push(c);\n\
    \    }\n    reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let\
    \ candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n\
    \    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpieyhro9f.rs:17:14\n   |\n17 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut iter = text.chars().rev();\n\
    \    iter.for_each(|c| {\n        reversed.push(c);\n    });\n    reversed ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpuaauq5h7.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmplnrtm_z7.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text.to_lowercase();\n    s.reverse();\n    s ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpzkqwgpwf.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed_text = text.to_owned();\n    reversed_text.reverse();\n\
    \    text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpj_af61ad.rs:12:19\n   |\n12 |     reversed_text.reverse();\n\
    \   |                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = text.chars().fold(String::new(), |mut reversed,\
    \ c| {\n        reversed.push(c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        if char != reversed.chars().nth(0) {\n\
    \            is_palindrome = false;\n        }\n        is_palindrome\n    });\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6wukf9xz.rs:16:20\n   |\n\
    16 |         if char != reversed.chars().nth(0) {\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6wukf9xz.rs:10:35\n   |\n10 | fn is_palindrome(text: String) ->\
    \ bool {\n   |    -------------                  ^^^^ expected `bool`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n...\n20 |     });\n   |       - help: remove this semicolon\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    reversed.reverse();\n    text == reversed\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp5vt33z8u.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp5vt33z8u.rs:18:14\n\
    \   |\n18 |     reversed.reverse();\n   |              ^^^^^^^ help: there is\
    \ an associated function with a similar name: `reserve`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp664pnhr1.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp664pnhr1.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpovsd3c8n.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < text.len() && j < text.len() {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j += 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpyh71f_j0.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut len = text.len();\n\
    \    let mut i = 0;\n    while i < len {\n        reversed.push_str(&text[len\
    \ - i - 1]);\n        i += 1;\n    }\n    reversed.is_equal(text)\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpznb7s18d.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[len - i - 1]);\n   |             \
    \               ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `is_equal` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpznb7s18d.rs:18:14\n   |\n18 |     reversed.is_equal(text)\n   |\
    \              ^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut iter = text.chars().enumerate();\n\
    \    for &(ref i, c) in iter {\n        reversed.push(c);\n        if i == text.len()\
    \ - 1 {\n            break;\n        }\n        reversed.push(c);\n    }\n   \
    \ reversed.reverse();\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zam0mev.rs:13:9\n   |\n\
    13 |     for &(ref i, c) in iter {\n   |         ^^^^^^^^^^^    ---- this expression\
    \ has type `Option<(usize, char)>`\n   |         |\n   |         expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(usize, char)`\n        \
    \   found reference `&_`\n\nerror[E0277]: can't compare `&_` with `usize`\n  -->\
    \ /tmp/tmp4zam0mev.rs:15:14\n   |\n15 |         if i == text.len() - 1 {\n   |\
    \              ^^ no implementation for `&_ == usize`\n   |\n   = help: the trait\
    \ `PartialEq<usize>` is not implemented for `&_`\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp4zam0mev.rs:20:14\n\
    \   |\n20 |     reversed.reverse();\n   |              ^^^^^^^ help: there is\
    \ an associated function with a similar name: `reserve`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    reversed.reserve(text.len());\n\
    \    for &c in text.chars() {\n        reversed.push(c).unwrap();\n    }\n   \
    \ reversed.reverse().unwrap() == text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq4beqjd6.rs:13:9\n   |\n\
    13 |     for &c in text.chars() {\n   |         ^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `c`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `unwrap` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpq4beqjd6.rs:14:26\n   |\n14 |         reversed.push(c).unwrap();\n\
    \   |                          ^^^^^^ method not found in `()`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpq4beqjd6.rs:16:14\n   |\n16 |     reversed.reverse().unwrap() ==\
    \ text\n   |              ^^^^^^^ help: there is an associated function with a\
    \ similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpf2dhou2z.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.chars();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*it);\n\
    \        i += 1;\n        it.next();\n    }\n    reversed.chars().eq(text.chars())\n\
    }\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `Chars<'_>` cannot be dereferenced\n  --> /tmp/tmpu_82fat9.rs:15:23\n\
    \   |\n15 |         reversed.push(*it);\n   |                       ^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp08l9q_iu.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp6tm7j1yv.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut iter = text.chars().rev();\n\
    \    iter.for_each(|c| {\n        reversed.push(c);\n    });\n    reversed ==\
    \ text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut i = 0;\n   \
    \ let mut j = text.len() - 1;\n    while i < j {\n        if text[i] != text[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpruc54nxw.rs:15:12\n\
    \   |\n15 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpruc54nxw.rs:15:23\n   |\n15 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_string();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() && j < text.len()\
    \ {\n        if text[i] != text[j] {\n            return false;\n        }\n \
    \       i += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx810au5r.rs:16:12\n\
    \   |\n16 |         if text[i] != text[j] {\n   |            ^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx810au5r.rs:16:23\n   |\n16 |         if text[i] != text[j] {\n\
    \   |                       ^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reverse = String::new();\n\
    \    reverse.resize(text.len(), 0);\n    for &c in text.chars() {\n        reverse[text.len()\
    \ - c - 1] += 1;\n    }\n    text == reverse\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp2l_ca8uy.rs:13:13\n   |\n13 |     reverse.resize(text.len(),\
    \ 0);\n   |             ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2l_ca8uy.rs:14:9\n   |\n14 |     for &c in text.chars()\
    \ {\n   |         ^^    ------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `c`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut it = text.chars().enumerate();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        let (index, value) =\
    \ it.next();\n        reversed.push(value);\n        i += 1;\n    }\n    reversed.reverse();\n\
    \    text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n\
    \    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"\
    aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n \
    \   assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"\
    xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0y3a87g4.rs:15:13\n   |\n\
    15 |         let (index, value) = it.next();\n   |             ^^^^^^^^^^^^^^\
    \   --------- this expression has type `Option<(usize, char)>`\n   |         \
    \    |\n   |             expected enum `Option`, found tuple\n   |\n   = note:\
    \ expected enum `Option<(usize, char)>`\n             found tuple `(_, _)`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp0y3a87g4.rs:19:14\n   |\n19 |     reversed.reverse();\n\
    \   |              ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.iter().rev().next().unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpy5pu09bd.rs:15:29\n   |\n15 |         reversed.push(*text.iter().rev().next().unwrap());\n\
    \   |                             ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n15 |         reversed.push(*text.chars().rev().next().unwrap());\n\
    \   |                             ~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < text.len() && j < text.len()\
    \ {\n        reversed.push(*text.chars().nth(i).unwrap());\n        i += 1;\n\
    \        j += 1;\n    }\n    text == reversed\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp9qxr42sq.rs:16:23\n\
    \   |\n16 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut reversed = String::new();\n    let mut i = 0;\n    let\
    \ mut j = text.len() - 1;\n    while i < j {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n        j -= 1;\n    }\n    reversed == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpcgke0qyf.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut s = text;\n    s.reverse();\n    s == text\n}\n\nfn main()\
    \ {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmppv2ue4ay.rs:12:7\n   |\n12 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    text == reversed\n}\n\n\
    fn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
    \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe72i1_db.rs:15:28\n\
    \   |\n15 |         reversed.push_str(&text[text.len() - i - 1].to_string());\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push(*text.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    reversed == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmprxhin80y.rs:15:23\n\
    \   |\n15 |         reversed.push(*text.chars().nth(i).unwrap());\n   |      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
    /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
    /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfn is_palindrome(text: String)\
    \ -> bool {\n    let mut text = text.to_lowercase();\n    let mut reverse = String::new();\n\
    \    reverse.resize(text.len(), 0);\n    for &c in text.chars() {\n        reverse[text.len()\
    \ - c - 1] += 1;\n    }\n    reverse == text\n}\n\nfn main() {\n    let candidate\
    \ = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n   \
    \ assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
    aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n\
    \    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
    xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpxj57nu1c.rs:13:13\n   |\n13 |     reverse.resize(text.len(),\
    \ 0);\n   |             ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxj57nu1c.rs:14:9\n   |\n14 |     for &c in text.chars()\
    \ {\n   |         ^^    ------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `c`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
