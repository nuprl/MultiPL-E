name: HumanEval_131_digits
language: rust
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n/// digits(4)\
  \  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ['    n / 10', "    n.checked_mul(2).expect(\"n must be positive\")\n\
    \        .checked_div(10).expect(\"n must be positive\")\n        .checked_div(10).expect(\"\
    n must be positive\")\n        .unwrap_or(0)", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n      \
    \  digits(n / 2)\n    }", "    let mut product = 1;\n    while n > 0 {\n     \
    \   product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", '    n / 10', "    if n % 2 == 0 {\n   \
    \     n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n \
    \       n\n    } else {\n        digits(n / 2)\n    }", "    let mut product =\
    \ 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        0\n    }", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n  \
    \  }", "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n\
    \        n /= 10;\n    }\n    product", '    n.checked_mul(2).unwrap()', "   \
    \ let mut product = 1;\n    for digit in n.digits().take(n.len() / 2) {\n    \
    \    product *= digit;\n    }\n    if n.len() % 2 == 0 {\n        product\n  \
    \  } else {\n        0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        digits(n / 2)\n    }", "    let mut product = 1;\n    for d in n.digits(2)\
    \ {\n        product *= d;\n    }\n    product", "    debug_assert!(n % 2 == 0);\n\
    \    n / 2", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n  \
    \  }", "    match n % 10 {\n        0 => 1,\n        1 => 1,\n        2 => 2,\n\
    \        _ => n,\n    }", '    n.checked_mul(2).unwrap()', "    if n % 2 == 0\
    \ {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n  \
    \      n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        digits(n / 2)\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    fn odd(n: isize) -> bool {\n        n % 2 == 1\n    }\n\n\
    \    if odd(n) {\n        0\n    } else {\n        n.checked_mul(2).unwrap()\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", '    n
    / 10', "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", " \
    \   let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n    \
    \    n /= 10;\n    }\n    product", '    n.checked_mul(2).unwrap()', "    if n\
    \ % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n \
    \   while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    debug_assert!(n\
    \ % 2 == 0);\n    let mut product = 1;\n    for d in n.digits() as isize {\n \
    \       product *= d;\n    }\n    product", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2 * 3\n    }", "    if n % 2 == 0 {\n        n\n  \
    \  } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n        n\n    }\
    \ else {\n        0\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      n\n    } else {\n        digits(n / 2)\n    }", "    n.checked_mul(2).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .checked_div(10).expect(\"n must be positive\")\n        .unwrap_or(0)",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2 * 3\n    }", "   \
    \ let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n      \
    \  n /= 10;\n    }\n    product", "    let mut product = 1;\n    for digit in\
    \ n.to_digits().iter() {\n        if digit % 2 == 1 {\n            product *=\
    \ digit;\n        }\n    }\n    product", "    let mut product = 1;\n    for digit\
    \ in n.digits().take(n.len() / 2) {\n        product *= digit;\n    }\n    if\
    \ product % 2 == 0 {\n        product\n    } else {\n        0\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product\
    \ *= n % 10;\n        }\n        n /= 10;\n    }\n    product", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n % 10\n    }", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2) * digits(n\
    \ / 2)\n    }", "    fn digit(n: isize) -> isize {\n        if n % 2 == 0 {\n\
    \            1\n        } else {\n            n\n        }\n    }\n    (0..n).map(digit).sum()",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n % 10\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n \
    \       digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n % 10\n    }", "    let mut product = 1;\n    for digit in n.to_string().chars().take(n.bit_length()\
    \ / 2) {\n        product *= digit as isize;\n    }\n    product", "    debug_assert!(n\
    \ >= 0);\n    let mut product = 1;\n    let mut digits = n.to_digits();\n    while\
    \ digits.len() > 0 {\n        if digits.len() % 2 == 1 {\n            product\
    \ *= digits.pop() as isize;\n        } else {\n            product *= digits.pop()\
    \ as isize;\n            product *= digits.pop() as isize;\n        }\n    }\n\
    \    product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2 * 3\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n    \
    \    digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n % 10\n    }", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      0\n    } else {\n        n % 10\n    }", "    let mut product = 1;\n  \
    \  while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n  \
    \      }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n      \
    \  n / 2\n    } else {\n        n * 3 + 1\n    }", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n % 10\n    }", "    n.checked_mul(2).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .checked_div(10).expect(\"n must be positive\")\n        .unwrap_or(0)",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    n.checked_mul(2).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .checked_div(10).expect(\"n must be positive\")\n        .unwrap_or(0)",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if\
    \ n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    if n % 2 == 0\
    \ {\n        n\n    } else {\n        0\n    }", "    let mut product = 1;\n \
    \   for digit in n.digits().filter(|&d| d % 2 != 0) {\n        product *= digit;\n\
    \    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n   \
    \ }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n \
    \   }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    n.checked_mul(2).expect(\"n must be positive\")\n        .checked_div(10).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .unwrap_or(0)", "    let mut product = 1;\n    while n > 0 {\n    \
    \    product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2\
    \ == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if n %\
    \ 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if n\
    \ % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    for digit in n.to_string().chars().skip(1) {\n       \
    \ product *= digit;\n    }\n    product", "    let mut product = 1;\n    while\
    \ n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    debug_assert!(n % 2 == 0);\n    n / 2",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n      \
    \  digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n    \
    \    digits(n / 2)\n    }", "    n.checked_mul(2).expect(\"n must be positive\"\
    )\n        .checked_div(10).expect(\"n must be positive\")\n        .checked_div(10).expect(\"\
    n must be positive\")\n        .unwrap_or(0)", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    let mut product = 1;\n    while\
    \ n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    let mut product = 1;\n    while n > 0\
    \ {\n        product *= n % 10;\n        n /= 10;\n    }\n    product", "    if\
    \ n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if\
    \ n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    for digit in n.digits().take(n.len() / 2) {\n        product\
    \ *= digit;\n    }\n    if product % 2 == 0 {\n        0\n    } else {\n     \
    \   product\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ * digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n   \
    \     digits(n / 2) * digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for digit\
    \ in n.digits().take(n.len() / 2) {\n        product *= digit;\n    }\n    if\
    \ n.is_even() {\n        product\n    } else {\n        0\n    }", "    if n %\
    \ 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ * digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n   \
    \     n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n   \
    \ }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    if\
    \ n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    let mut product = 1;\n    while n > 0 {\n   \
    \     product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2\
    \ == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    n.checked_mul(2).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .checked_mul(10).expect(\"n must be positive\")\n        .unwrap_or(0)",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2 * 3\n    }", "    if\
    \ n % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product\
    \ = 1;\n    for digit in n.digits().take(n.digits() as usize) {\n        product\
    \ *= digit % 2;\n    }\n    product", "    let mut product = 1;\n    while n >\
    \ 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n        }\n  \
    \      n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n  \
    \      digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", " \
    \   let mut product = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n\
    \            product *= d;\n        }\n    }\n    product", "    n.checked_mul(2).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .checked_div(10).expect(\"n must be positive\")\n        .unwrap_or(0)",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2 * 3\n    }", "    if\
    \ n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product\
    \ *= n % 10;\n        }\n        n /= 10;\n    }\n    product", "    let mut product\
    \ = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n            product\
    \ *= d;\n        }\n    }\n    product", "    let mut product = 1;\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n        }\n\
    \        n /= 10;\n    }\n    product", "    let mut product = 1;\n    while n\
    \ > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product", " \
    \   let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n    \
    \    n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n      \
    \  0\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n / 2\n    } else {\n        0\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    let mut product = 1;\n    for digit in n.digits().take(n.len() / 2) {\n   \
    \     product *= digit;\n    }\n    if n.len() % 2 == 0 {\n        product\n \
    \   } else {\n        0\n    }", "    let mut product = 1;\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            product *= n % 10;\n        }\n        n\
    \ /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n % 10\n    }", "    let mut product = 1;\n    while n > 0 {\n      \
    \  product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", '    n / 10', " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   fn odd(x: isize) -> bool {\n        x % 2 != 0\n    }\n\n    let mut product\
    \ = 1;\n    let mut digits = n.to_digits();\n    while !digits.is_empty() {\n\
    \        if odd(digits.len()) {\n            product *= digits.len() - 1;\n  \
    \      } else {\n            product *= digits.len();\n        }\n        digits.truncate(0);\n\
    \    }\n    product", "    let mut product = 1;\n    for digit in n.to_string().chars().skip(1)\
    \ {\n        product *= digit;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      n\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n        n\n \
    \   } else {\n        digits(n / 2)\n    }", "    let mut product = 1;\n    while\
    \ n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n  \
    \      digits(n / 2)\n    }", "    let mut product = 1;\n    while n > 0 {\n \
    \       product *= n % 10;\n        n /= 10;\n    }\n    product", "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", '    n.checked_mul(2).unwrap()',
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", '    n / 10', "    let mut product = 1;\n    for digit in n.digits().take(n.len()\
    \ / 2) {\n        product *= digit;\n    }\n    if product % 2 == 0 {\n      \
    \  product\n    } else {\n        0\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits().take(n.len() / 2) {\n        product *= digit;\n    }\n\
    \    if n.is_even() {\n        product\n    } else {\n        0\n    }", "   \
    \ let mut product = 1;\n    for d in n.digits(2) {\n        product *= d;\n  \
    \  }\n    if product % 2 == 0 {\n        product\n    } else {\n        0\n  \
    \  }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2 * 3\n  \
    \  }", "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n\
    \        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    }\
    \ else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        digits(n / 2)\n    }"]
stop_tokens:
- "\n}"
