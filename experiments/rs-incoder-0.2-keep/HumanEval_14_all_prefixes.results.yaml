name: HumanEval_14_all_prefixes
language: rust
results:
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzmsejucw.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr068twvm.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    prefixes.push(prefix);\n    for c in string.chars() {\n\
    \        prefix.push_str(&c.to_string());\n        prefixes.push(prefix);\n  \
    \  }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpc8a998ub.rs:9:9\n\
    \  |\n6 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    7 |     prefixes.push(prefix);\n  |                   ------ value moved here\n\
    8 |     for c in string.chars() {\n9 |         prefix.push_str(&c.to_string());\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4yqa80gc.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpb5iy1auv.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string);\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmpc_djikxl.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefix.push(string);\n\
    \  |                     ------ value moved here\n9 |         string = string.chars().next().unwrap().to_string();\n\
    \  |                  ^^^^^^^^^^^^^^ value borrowed here after move\n  |\n  =\
    \ note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5mnovm2g.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n        s =\
    \ &s[..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6ej84k75.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[..];\n  |             ^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[..]).to_string();\n  |             +      +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut i = string.len()\
    \ - 1;\n    while i >= 0 {\n        prefix.push(string.chars().nth(i).unwrap());\n\
    \        i--;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n --> /tmp/tmp7vo001ms.rs:9:12\n\
    \  |\n9 |         i--;\n  |            ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7vo001ms.rs:11:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n11 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplbutlbzp.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      prefixes.push(&string[i..]);\n        i += 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt8607b0j.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string.chars().next().unwrap();\n    while current != \"\" {\n        prefix.push(current);\n\
    \        current = string.chars().skip(1).take(1).next().unwrap();\n    }\n  \
    \  prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnax3i3g0.rs:7:22\n  |\n7 |\
    \     while current != \"\" {\n  |                      ^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnax3i3g0.rs:11:5\n \
    \  |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |            \
    \                        ----------- expected `Vec<String>` because of return\
    \ type\n...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa2clpwdq.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            if current_prefix.len()\
    \ > 0 {\n                prefixes.push(current_prefix);\n                current_prefix\
    \ = \"\";\n            }\n        }\n    }\n    if current_prefix.len() > 0 {\n\
    \        prefixes.push(current_prefix);\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpfhvkrlrl.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfhvkrlrl.rs:20:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n20 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5xfhqfyr.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = &s[..];\n   \
    \ }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2coy3mfx.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[..];\n  |             ^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[..]).to_string();\n  |             +      +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix += c;\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpq_w4kw34.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c;\n  |             --------------^^^^^\n  |             |\n  |            \
    \ cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_w4kw34.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string[0..]);\n\
    \        string = &string[1..];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmpt4_pp70s.rs:8:21\n    |\n8   |         prefix.push(string[0..]);\n\
    \    |                ---- ^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                |\n    |                required by a bound introduced by\
    \ this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmpt4_pp70s.rs:5:22\n\
    \    |\n5   |     let mut prefix = vec![];\n    |                      ^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \    = note: this error originates in the macro `vec` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0277]: the size for values\
    \ of type `str` cannot be known at compilation time\n   --> /tmp/tmpt4_pp70s.rs:5:22\n\
    \    |\n5   |     let mut prefix = vec![];\n    |                      ^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec`\n    = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt4_pp70s.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[1..];\n  |   \
    \               ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         string = (&string[1..]).to_string();\n\
    \  |                  +            +++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4_pp70s.rs:11:5\n   |\n4  | fn all_prefixes(string: String) ->\
    \ Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n11 |     prefix\n   |     ^^^^^^\
    \ exp"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(&string[..len]);\n        len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6jtzrv2j.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpk993h6vr.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk993h6vr.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n\
    \            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpbm8c95c_.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbm8c95c_.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    prefixes.push(prefix);\n    for c in string.chars() {\n\
    \        prefix = prefix.push_str(&c.to_string());\n        prefixes.push(prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkmspuxzw.rs:9:18\n  |\n6 |\
    \     let mut prefix = String::new();\n  |                      -------------\
    \ expected due to this value\n...\n9 |         prefix = prefix.push_str(&c.to_string());\n\
    \  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n  |\nnote: method `push_str` modifies its receiver in-place\n -->\
    \ /tmp/tmpkmspuxzw.rs:9:25\n  |\n9 |         prefix = prefix.push_str(&c.to_string());\n\
    \  |                  ------ ^^^^^^^^ this call modifies `prefix` in-place\n \
    \ |                  |\n  |                  you probably want to use this value\
    \ after calling the method...\n  = note: ...instead of the `()` output of method\
    \ `push_str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      let mut j = i;\n        while j < string.len() && string[j] == string[j\
    \ + 1] {\n            j = j + 1;\n        }\n        prefixes.push(&string[i..j]);\n\
    \        i = j;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvhf7trpv.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvhf7trpv.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvhf7trpv.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut suffix = String::new();\n    let mut i = 1;\n\
    \    while i < string.len() {\n        prefix.push_str(&string[0..i]);\n     \
    \   suffix.push_str(&string[i..string.len()]);\n        prefixes.push(prefix);\n\
    \        i += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmph9w64l_g.rs:10:9\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n10 |         prefix.push_str(&string[0..i]);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n11 |         suffix.push_str(&string[i..string.len()]);\n\
    12 |         prefixes.push(prefix);\n   |                       ------ value moved\
    \ here, in previous iteration of loop\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq4am5hey.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n\
    \            current_prefix += c.to_string();\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpzx41ant_.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c.to_string();\n  |             --------------^--^^^^^^^^^^^^^^\n  |       \
    \      |              |\n  |             |              `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n  |             cannot use `+=` on type\
    \ `&str`\n  |\n  = note: string concatenation requires an owned `String` on the\
    \ left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzx41ant_.rs:16:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpu26kxeu0.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        prefix.push(c);\n \
    \       if prefix.len() > 0 {\n            prefixes.push(prefix);\n          \
    \  prefix.clear();\n        }\n    }\n    prefixes\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpsq3adlel.rs:8:9\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n7  |     for c in string.chars() {\n8  |         prefix.push(c);\n  \
    \ |         ^^^^^^^^^^^^^^ value borrowed here after move\n9  |         if prefix.len()\
    \ > 0 {\n10 |             prefixes.push(prefix);\n   |                       \
    \    ------ value moved here, in previous iteration of loop\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n\
    \            current_prefix += c.to_string();\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpwcgokvoq.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c.to_string();\n  |             --------------^--^^^^^^^^^^^^^^\n  |       \
    \      |              |\n  |             |              `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n  |             cannot use `+=` on type\
    \ `&str`\n  |\n  = note: string concatenation requires an owned `String` on the\
    \ left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwcgokvoq.rs:16:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string.to_string();\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = &s[..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp01gh08ff.rs:9:13\n  |\n6 |\
    \     let mut s = string.to_string();\n  |                 ------------------\
    \ expected due to this value\n...\n9 |         s = &s[..];\n  |             ^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         s = (&s[..]).to_string();\n  |             +      +++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while string.len() > 0 {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| c != prefix[0]).collect();\n \
    \   }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpn8e99xsx.rs:9:50\n\
    \  |\n9 |         string = string.chars().take_while(|c| c != prefix[0]).collect();\n\
    \  |                                                  ^^ no implementation for\
    \ `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n  = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn8e99xsx.rs:11:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n11 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push_str(&c.to_string());\n        } else {\n\
    \            prefixes.push(current_prefix);\n            current_prefix.clear();\n\
    \        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `current_prefix`\n  --> /tmp/tmpahqs03u_.rs:9:13\n\
    \   |\n6  |     let mut current_prefix = String::new();\n   |         ------------------\
    \ move occurs because `current_prefix` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n9  |             current_prefix.push_str(&c.to_string());\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here\
    \ after move\n10 |         } else {\n11 |             prefixes.push(current_prefix);\n\
    \   |                           -------------- value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0143obe1.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string.chars().enumerate().map(|(i, c)| {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        }\n        prefix.push(string[..i]);\n\
    \        prefix\n    }).collect::<Vec<_>>();\n    prefix.push(string);\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7i_3m7rp.rs:10:21\n   |\n\
    10 |         prefix.push(string[..i]);\n   |                     ^^^^^^^^^^^ expected\
    \ `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i_3m7rp.rs:13:17\n\
    \   |\n13 |     prefix.push(string);\n   |                 ^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i_3m7rp.rs:14:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut string = string.to_string();\n    while !string.is_empty()\
    \ {\n        prefix.push_str(&string[0..]);\n        prefixes.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6t74yzhc.rs:11:18\n   |\n\
    7  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n11 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n11 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix)\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfhspoze_.rs:15:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n15 |     prefixes.push(prefix)\n   |     ^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n        \
    \   found unit type `()`\nnote: method `push` modifies its receiver in-place\n\
    \  --> /tmp/tmpfhspoze_.rs:15:14\n   |\n15 |     prefixes.push(prefix)\n   | \
    \    -------- ^^^^ this call modifies `prefixes` in-place\n   |     |\n   |  \
    \   you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      prefixes.push(string.chars().take(i).collect::<String>());\n        i +=\
    \ 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpqr9zu2n1.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      let mut j = i;\n        while j < string.len() && string[j] == string[j\
    \ + 1] {\n            j += 1; // skip duplicates\n        }\n        prefixes.push(&string[i..j]);\n\
    \        i = j;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp05_qqzv9.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp05_qqzv9.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05_qqzv9.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    loop {\n        prefix.push(string);\n        if string.len()\
    \ == 0 {\n            break;\n        }\n        string = string.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjlffkrh3.rs:12:18\n   |\n\
    6  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n12 |         string = string.chars().next().unwrap();\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `char`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut string = string.to_string();\n    while string.len()\
    \ > 0 {\n        prefix.push(string.chars().next().unwrap());\n        string\
    \ = string.to_string();\n    }\n    prefixes.push(prefix);\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpco8jkl_h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkf_mf371.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix = String::new();\n        }\n    }\n    prefixes.push(prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpczocfdgl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string;\n    while !current.is_empty() {\n        prefix.push(current);\n\
    \        current = &current[1..];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzulyozgh.rs:9:19\n  |\n6 |\
    \     let mut current = string;\n  |                       ------ expected due\
    \ to this value\n...\n9 |         current = &current[1..];\n  |              \
    \     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp: try using\
    \ a conversion method\n  |\n9 |         current = (&current[1..]).to_string();\n\
    \  |                   +             +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string.chars().collect::<Vec<_>>();\n    while !current.is_empty() {\n   \
    \     prefix.push(current.clone());\n        current = string.chars().skip(1).collect::<Vec<_>>();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnxnh3xp.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<char>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut len\
    \ = string.len();\n    while len > 0 {\n        prefixes.push(&string[0..len]);\n\
    \        len -= 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3c1mw1dr.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n\
    \            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmp2p_bag7n.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2p_bag7n.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkbimq1x9.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.clone());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqgl2mjus.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut string = string.to_string();\n    while !string.is_empty()\
    \ {\n        prefix.push_str(&string[0..]);\n        prefixes.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps355h9fi.rs:11:18\n   |\n\
    7  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n11 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n11 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect::<String>().to_string();\n  \
    \  }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qsejr15.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpi4hge5jj.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzl1i9yem.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current\
    \ = String::from(\"\");\n    for c in string.chars() {\n        current = current.push_str(&c);\n\
    \        if current.len() == string.len() {\n            prefixes.push(current);\n\
    \        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7dkjm6fq.rs:8:36\n  |\n8 |\
    \         current = current.push_str(&c);\n  |                               \
    \     ^^ expected `str`, found `char`\n  |\n  = note: expected reference `&str`\n\
    \             found reference `&char`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp7dkjm6fq.rs:8:19\n  |\n6 |     let mut current = String::from(\"\");\n\
    \  |                       ---------------- expected due to this value\n7 |  \
    \   for c in string.chars() {\n8 |         current = current.push_str(&c);\n \
    \ |                   ^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n\
    \  |\nnote: method `push_str` modifies its receiver in-place\n --> /tmp/tmp7dkjm6fq.rs:8:27\n\
    \  |\n8 |         current = current.push_str(&c);\n  |                   -------\
    \ ^^^^^^^^ this call modifies `current` in-place\n  |                   |\n  |\
    \                   you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsm4l3ujo.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect::<String>().to_string();\n  \
    \  }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7tbsrx3.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnvqayz1o.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = string.clone();\n    while !prefix.is_empty() {\n        prefixes.push(prefix.clone());\n\
    \        prefix = prefix.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmplcm_nr_t.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7nki1gd.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp909wox_p.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix = String::new();\n        }\n    }\n    prefixes.push(prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpc5628md_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = 0;\n    for c in string.chars() {\n        if prefix_len == 0 {\n        \
    \    prefix.push(c);\n            prefix_len = 1;\n        } else {\n        \
    \    if c == prefix[prefix_len - 1] {\n                prefix_len += 1;\n    \
    \        } else {\n                prefix.push(&c[..prefix_len]);\n          \
    \      prefix_len = 1;\n            }\n        }\n    }\n    prefix.push(&string[..prefix_len]);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `char`\n  --> /tmp/tmppa03ppht.rs:15:30\n\
    \   |\n15 |                 prefix.push(&c[..prefix_len]);\n   |             \
    \                 ^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppa03ppht.rs:20:17\n\
    \   |\n20 |     prefix.push(&string[..prefix_len]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppa03ppht.rs:21:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n21 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string);\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmp94tqa7a7.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefix.push(string);\n\
    \  |                     ------ value moved here\n9 |         string = string.chars().next().unwrap().to_string();\n\
    \  |                  ^^^^^^^^^^^^^^ value borrowed here after move\n  |\n  =\
    \ note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpo_9l_yid.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n        s =\
    \ s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcpesy70s.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string);\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmpxe2opvpz.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefixes.push(string);\n\
    \  |                       ------ value moved here\n9 |         string = string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n  |                  ^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplldaoktb.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix += c.to_string();\n        } else {\n        \
    \    prefixes.push(current_prefix);\n            current_prefix = \"\";\n    \
    \    }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpllknwtva.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c.to_string();\n  |             --------------^--^^^^^^^^^^^^^^\n  |       \
    \      |              |\n  |             |              `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n  |             cannot use `+=` on type\
    \ `&str`\n  |\n  = note: string concatenation requires an owned `String` on the\
    \ left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpllknwtva.rs:16:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpwmfzt4fp.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n        s =\
    \ s.chars().next().unwrap().to_string();\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmp3k6uq7sh.rs:9:13\n\
    \  |\n6 |     let mut s = string;\n  |         ----- move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n7 |     while !s.is_empty()\
    \ {\n8 |         prefixes.push(s);\n  |                       - value moved here\n\
    9 |         s = s.chars().next().unwrap().to_string();\n  |             ^^^^^^^^^\
    \ value borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = 0;\n    for c in string.chars() {\n        if prefix_len > 0 {\n         \
    \   prefix.push(&string[prefix_len..c]);\n        }\n        prefix_len = prefix_len\
    \ + c.len_utf8();\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxpzl19j3.rs:9:45\n  |\n9 |\
    \             prefix.push(&string[prefix_len..c]);\n  |                      \
    \                       ^ expected integer, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxpzl19j3.rs:13:5\n   |\n4  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n13 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix.clear();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `current_prefix`\n  --> /tmp/tmpgt427jpg.rs:9:13\n\
    \   |\n6  |     let mut current_prefix = String::new();\n   |         ------------------\
    \ move occurs because `current_prefix` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n9  |             current_prefix.push(c);\n   |      \
    \       ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n10 |         }\
    \ else {\n11 |             prefixes.push(current_prefix);\n   |              \
    \             -------------- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpz6_in_a8.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n    \
    \    prefix.push(string[i..]);\n        i += 1;\n    }\n    prefix\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmpsm7wgnid.rs:9:21\n    |\n9   |         prefix.push(string[i..]);\n\
    \    |                ---- ^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                |\n    |                required by a bound introduced by\
    \ this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmpsm7wgnid.rs:5:22\n\
    \    |\n5   |     let mut prefix = vec![];\n    |                      ^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \    = note: this error originates in the macro `vec` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0277]: the size for values\
    \ of type `str` cannot be known at compilation time\n   --> /tmp/tmpsm7wgnid.rs:5:22\n\
    \    |\n5   |     let mut prefix = vec![];\n    |                      ^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec`\n    = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsm7wgnid.rs:12:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected struct `Vec<String>`\n              found struct\
    \ `Vec<str>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvq6gstbp.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmp0ndbiv73.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0ndbiv73.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push_str(&c.to_string());\n        } else {\n        \
    \    prefix.push_str(&c.to_ascii_lowercase());\n        }\n        prefixes.push(prefix);\n\
    \        prefix.clear();\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparoz8op4.rs:11:29\n   |\n\
    11 |             prefix.push_str(&c.to_ascii_lowercase());\n   |             \
    \                ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while string.len() > 0 {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjmzb1g6.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut prefix_len\
    \ = 0;\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric() {\n\
    \            prefix.push(c.to_string());\n            prefix_len += 1;\n     \
    \   }\n    }\n    prefix.truncate(prefix_len);\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplwd1w_aw.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3ywgdzw2.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpatk81wk2.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpkaliuuea.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4putayl.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmppgetupda.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if !prefix.is_empty()\
    \ {\n            prefixes.push(prefix);\n            prefix = String::new();\n\
    \        }\n        prefix.push(c);\n    }\n    prefixes.push(prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpybtno_10.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpydinsgo6.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix += c;\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpm2rob0mx.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c;\n  |             --------------^^^^^\n  |             |\n  |            \
    \ cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2rob0mx.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string\
    \ = string.to_string();\n    prefix.push(string);\n    while !string.is_empty()\
    \ {\n        prefix.push(string);\n        string = string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n    }\n    prefix\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmp1eznhe7m.rs:8:12\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     prefix.push(string);\n  |                 ------ value moved\
    \ here\n8 |     while !string.is_empty() {\n  |            ^^^^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n\nerror[E0382]: borrow of moved value: `string`\n\
    \  --> /tmp/tmp1eznhe7m.rs:10:18\n   |\n6  |     let mut string = string.to_string();\n\
    \   |         ---------- move occurs because `string` has type `String`, which\
    \ does not implement the `Copy` trait\n...\n9  |         prefix.push(string);\n\
    \   |                     ------ value moved here\n10 |         string = string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n   |                  ^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n   |\n   = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = string.clone();\n    while !prefix.is_empty() {\n        prefixes.push(prefix);\n\
    \        prefix.remove(0);\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpil25plps.rs:7:12\n\
    \  |\n6 |     let mut prefix = string.clone();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    7 |     while !prefix.is_empty() {\n  |            ^^^^^^^^^^^^^^^^^ value borrowed\
    \ here after move\n8 |         prefixes.push(prefix);\n  |                   \
    \    ------ value moved here, in previous iteration of loop\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n    \
    \    let mut j = i;\n        while j < string.len() && string[j] == string[j +\
    \ 1] {\n            j += 1; // skip duplicates\n        }\n        prefix.push(&string[i..j]);\n\
    \        i = j;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpv9pmotdb.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpv9pmotdb.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv9pmotdb.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp6_eb7a9u.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdnsjkog.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpjvnuhhzm.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut s = string;\n    while !s.is_empty() {\n     \
    \   prefix.push_str(s);\n        prefixes.push(prefix);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd3sphneo.rs:9:25\n  |\n9 |\
    \         prefix.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd3sphneo.rs:11:13\n   |\n7  |     let mut s\
    \ = string;\n   |                 ------ expected due to this value\n...\n11 |\
    \         s = s.chars().next().unwrap();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |             |\n  \
    \ |             expected struct `String`, found `char`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvrqw4_ed.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp96vuzjwn.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      prefixes.push(&string[i..]);\n        i += 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpobstqsig.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char);\n        } else {\n            prefix.push(char.to_string());\n\
    \        }\n        if index == string.len() - 1 {\n            break;\n     \
    \   }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnwpesxaj.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .chars()\n        .map(|c| c.to_string())\n\
    \        .collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpxf1gekvv.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while string.len() > 0 {\n        prefixes.push(string.chars().take_while(|&c|\
    \ !c.is_ascii_lowercase()).collect::<String>());\n        string = string.chars().take_while(|&c|\
    \ !c.is_ascii_lowercase()).collect::<String>()\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp5ywx5m19.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpfhk20mlo.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpcj1s4su8.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph029fq2i.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(&string[..prefix_len]);\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp73_13_3c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut string = string.to_string();\n    while string.len()\
    \ > 0 {\n        prefix.push_str(&string[0..]);\n        prefixes.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ot0zdfh.rs:11:18\n   |\n\
    7  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n11 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n11 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut i = string.len();\n\
    \    while i > 0 {\n        prefix.push(&string[..i]);\n        i -= 1;\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwx9o3z_5.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut s =\
    \ string;\n    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_1aq8hi.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.clone());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpfwwmbidx.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmp7d4qw_w_.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix\
    \ = vec![];\n    for c in string.chars() {\n        if current_prefix.len() >\
    \ 0 {\n            prefix.push(current_prefix);\n            current_prefix =\
    \ vec![];\n        }\n        current_prefix.push(c);\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4guw65ne.rs:15:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n15 |     prefix\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<char>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcbskpqi9.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmph0_c2fo7.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_rdbs3xl.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpbcage08d.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        if let Some(index)\
    \ = iter.next() {\n            prefix.push(&string[i..index]);\n            i\
    \ = index;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4tn0gglz.rs:10:36\n   |\n\
    10 |             prefix.push(&string[i..index]);\n   |                       \
    \             ^^^^^ expected `usize`, found tuple\n   |\n   = note: expected type\
    \ `usize`\n             found tuple `(usize, char)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4tn0gglz.rs:11:17\n   |\n7  |     let mut i = 0;\n   |\
    \                 - expected due to this value\n...\n11 |             i = index;\n\
    \   |                 ^^^^^ expected `usize`, found tuple\n   |\n   = note: expected\
    \ type `usize`\n             found tuple `(usize, char)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4tn0gglz.rs:14:5\n   |\n4  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n14 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().map(|c| c.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyhr77007.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .chars()\n        .enumerate()\n\
    \        .map(|(i, c)| {\n            if i == 0 {\n                vec![]\n  \
    \          } else {\n                vec![string[..i].to_string(), string[i..].to_string()]\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `Vec<String>`\n    --> /tmp/tmp6k_hitb9.rs:15:10\n   \
    \  |\n15   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=Vec<String>>`\n     |\n     =\
    \ help: the trait `FromIterator<Vec<String>>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      prefixes.push(string.substr(i, string.len() - i));\n        i += 1;\n \
    \   }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `substr` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpfknjd7vq.rs:9:30\n  |\n9 |         prefixes.push(string.substr(i,\
    \ string.len() - i));\n  |                              ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmptg21b_bc.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9deliwio.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpexfaxd35.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpe9s1uifb.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpys14a3m2.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n  \
    \      let mut prefix = String::new();\n        prefix.push_str(&string[0..i]);\n\
    \        prefix.push_str(&string[i..]);\n        prefix\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"]`,\n\
    \ right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpp5qq98_k.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::new();\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpggoeblt_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push_str(&c.to_string());\n        } else {\n        \
    \    prefix.push_str(&c.to_ascii_lowercase());\n        }\n        if prefix.len()\
    \ > 0 {\n            prefixes.push(prefix);\n            prefix.clear();\n   \
    \     }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr0g6ojau.rs:11:29\n   |\n\
    11 |             prefix.push_str(&c.to_ascii_lowercase());\n   |             \
    \                ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpr0w8x5gb.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4pke1jpu.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut i = string.len();\n\
    \    while i >= 0 {\n        prefix.push(string.chars().nth(i).unwrap());\n  \
    \      i -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd4wxc508.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix += c.to_string();\n        } else {\n        \
    \    prefix.push(current_prefix);\n            current_prefix = \"\";\n      \
    \  }\n    }\n    prefix.push(current_prefix);\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpn1ziq7cc.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c.to_string();\n  |             --------------^--^^^^^^^^^^^^^^\n  |       \
    \      |              |\n  |             |              `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n  |             cannot use `+=` on type\
    \ `&str`\n  |\n  = note: string concatenation requires an owned `String` on the\
    \ left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1ziq7cc.rs:16:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n16 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi92yyd7j.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      let mut j = i;\n        while j < string.len() && string[j] == string[j\
    \ + 1] {\n            j += 1; // skip duplicates\n        }\n        prefixes.push(&string[i..j]);\n\
    \        i = j;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvxbfjivy.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvxbfjivy.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvxbfjivy.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmpnrp0u4k3.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(_, c)| c.to_string()).collect()\n  |        \
    \                                          ^^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_ascii`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap().to_string();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmp6z8xde3k.rs:9:13\n\
    \  |\n6 |     let mut s = string;\n  |         ----- move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n7 |     while !s.is_empty()\
    \ {\n8 |         prefix.push(s);\n  |                     - value moved here\n\
    9 |         s = s.chars().next().unwrap().to_string();\n  |             ^^^^^^^^^\
    \ value borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3chbtqwj.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpwt_udrte.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = 0;\n    let mut string = string.to_string();\n    while string.len() > 0 {\n\
    \        let mut pos = 0;\n        while pos < string.len() {\n            let\
    \ mut c = string[pos];\n            if c != 'a' {\n                break;\n  \
    \          }\n            pos += 1;\n        }\n        prefix.push(&string[0..pos]);\n\
    \        prefix_len += pos;\n        string = &string[pos..];\n    }\n    prefix.reverse();\n\
    \    prefix.push(&string[0..prefix_len]);\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpsdx9s82u.rs:11:25\n\
    \   |\n11 |             let mut c = string[pos];\n   |                       \
    \  ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n   = help: the following other\
    \ types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsdx9s82u.rs:19:18\n\
    \   |\n7  |     let mut string = string.to_string();\n   |                   \
    \   ------------------ expected due to this value\n...\n19 |         string =\
    \ &string[pos..];\n   |                  ^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n19 |        \
    \ string = (&string[pos..]).to_string();\n   |                  +            \
    \  +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsdx9s82u.rs:23:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n23 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current\
    \ = String::new();\n    let mut current_len = string.len();\n    while current_len\
    \ > 0 {\n        current.push_str(&string[..current_len]);\n        prefixes.push(current);\n\
    \        current_len -= 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `current`\n  --> /tmp/tmp28fg4605.rs:9:9\n\
    \   |\n6  |     let mut current = String::new();\n   |         ----------- move\
    \ occurs because `current` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |         current.push_str(&string[..current_len]);\n   |   \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n\
    10 |         prefixes.push(current);\n   |                       ------- value\
    \ moved here, in previous iteration of loop\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      prefixes.push(string.substr(i, 1));\n        i += 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `substr` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpv7l2spxj.rs:9:30\n  |\n9 |         prefixes.push(string.substr(i,\
    \ 1));\n  |                              ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc0188ehd.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char);\n        } else {\n            prefix.push(char.to_string());\n\
    \        }\n        if index == string.len() - 1 {\n            break;\n     \
    \   }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa6x7kuuz.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzzpcok07.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(&string[0..current_len]);\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpme58iqgu.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmprhm51ueg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpmuqc1984.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpe3djuf__.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpy3mo6hn2.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy3mo6hn2.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix += c;\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = c.to_ascii_lowercase();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpdwvz6cwc.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c;\n  |             --------------^^^^^\n  |             |\n  |            \
    \ cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdwvz6cwc.rs:12:30\n\
    \   |\n6  |     let mut current_prefix = \"\";\n   |                         \
    \     -- expected due to this value\n...\n12 |             current_prefix = c.to_ascii_lowercase();\n\
    \   |                              ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdwvz6cwc.rs:16:5\n \
    \  |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |            \
    \                        ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string[0..]);\n\
    \        string = string.to_string();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmpergpsv8d.rs:8:23\n    |\n8   |         prefixes.push(string[0..]);\n\
    \    |                  ---- ^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                  |\n    |                  required by a bound introduced\
    \ by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmpergpsv8d.rs:5:24\n\
    \    |\n5   |     let mut prefixes = Vec::new();\n    |                      \
    \  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmpergpsv8d.rs:5:24\n    |\n5   |     let mut prefixes = Vec::new();\n\
    \    |                        ^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpergpsv8d.rs:11:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected struct `Vec<String>`\n              found struct\
    \ `Vec<str>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string.chars();\n    while let Some(next) = current.next() {\n        prefix.push(next.to_string());\n\
    \        current = string.chars();\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n        s =\
    \ s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw807mue_.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphbvbyz2i.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    let mut s = string.to_string();\n    while !s.is_empty()\
    \ {\n        prefix.push_str(s);\n        prefixes.push(prefix);\n        s =\
    \ &s[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpchjsi4im.rs:9:25\n  |\n9 |\
    \         prefix.push_str(s);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&str`, found struct `String`\n\
    \  |                         help: consider borrowing here: `&s`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpchjsi4im.rs:11:13\n   |\n7  |     let mut s\
    \ = string.to_string();\n   |                 ------------------ expected due\
    \ to this value\n...\n11 |         s = &s[1..];\n   |             ^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n11 |         s = (&s[1..]).to_string();\n   |             +       +++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n  \
    \      if c.is_ascii() {\n            c.to_string()\n        } else {\n      \
    \      format!(\"{:?}\", c)\n        }\n    }).collect()\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmppq0yo8gn.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current\
    \ = string.chars();\n    while let Some(next) = current.next() {\n        prefixes.push(next.to_string());\n\
    \        current = string.chars();\n    }\n    prefixes\n}\n\nfn main() {\n  \
    \  let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut s\
    \ = string.to_string();\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap().to_string();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmppeia16d3.rs:9:13\n\
    \  |\n6 |     let mut s = string.to_string();\n  |         ----- move occurs because\
    \ `s` has type `String`, which does not implement the `Copy` trait\n7 |     while\
    \ !s.is_empty() {\n8 |         prefixes.push(s);\n  |                       -\
    \ value moved here\n9 |         s = s.chars().next().unwrap().to_string();\n \
    \ |             ^^^^^^^^^ value borrowed here after move\n  |\n  = note: borrow\
    \ occurs due to deref coercion to `str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii()).map(|(i,\
    \ c)| {\n        string.chars()\n            .enumerate()\n            .filter(|(_,\
    \ c)| c.is_ascii())\n            .filter(|(_, c)| c.is_ascii_lowercase())\n  \
    \          .filter(|(_, c)| c.is_ascii_uppercase())\n            .filter(|(_,\
    \ c)| c.is_ascii_punctuation())\n            .filter(|(_, c)| c.is_ascii_digit())\n\
    \            .filter(|(_, c)| c.is_ascii_letter())\n            .filter(|(_, c)|\
    \ c.is_ascii_symbol())\n            .filter(|(_, c)| c.is_ascii_punctuation())\n\
    \            .filter(|(_, c)| c.is_ascii_digit())\n            .filter(|(_, c)|\
    \ c.is_ascii_letter())\n            .filter(|(_, c)| c.is_ascii_symbol())\n  \
    \          .filter(|(_, c)| c.is_ascii_punctuation())\n            .filter(|(_,\
    \ c)| c.is_ascii_digit())\n            .filter(|(_, c)| c.is_ascii_letter())\n\
    \            .filter(|(_, c)| c.is_ascii_symbol())\n            .filter(|(_, c)|\
    \ c.is_ascii_punctuation())\n            .filter(|(_, c)| c.is_ascii_digit())\n\
    \            .filter(|(_, c)| c.is_ascii_letter())\n            .filter(|(_, c)|\
    \ c.is_ascii_symbol())\n            .filter(|(_, c)| c.is_ascii_punctuation())\n\
    \            .filter(|(_, c)| c.is_ascii_digit())\n            .filter(|(_, c)|\
    \ c.is_ascii_letter())\n            .filter(|(_, c)| c.is_ascii_symbol())\n  \
    \          .filter(|(_, c)| c.is_ascii_punctuation())\n            .filter(|(_,\
    \ c)| c.is_ascii_digit())\n            .filter(|(_, c)| c.is_ascii_letter())\n\
    \            .filter(|(_, c)| c.is_ascii_symbol())\n            .filter(|(_, c)|\
    \ c.is_ascii_punctuation())\n            .filter(|(_, c)| c.is_ascii_digit())\n\
    \            .filter(|(_, c)| c.is_ascii_letter())\n            .filter(|(_, c)|\
    \ c.is_ascii_symbol())\n            .filter(|(_, c)| c.is_ascii_punctuation())\n\
    \            .filter(|(_, c)| c.is_ascii_digit())\n            .filter(|(_, c)|\
    \ c.is_ascii_letter())\n            .filter(|(_, c)| c.is_ascii_symbol())\n  \
    \          .filter(|(_, c)| c.is_ascii\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpslb3djb6.rs:51:3\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                                     - unclosed delimiter\n5  |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii()).map(|(i, c)| {\n   |                                     \
    \                            - unclosed delimiter\n...\n51 | }\n   |   ^\n\nerror:\
    \ expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `fn`\n  -->\
    \ /tmp/tmpslb3djb6.rs:43:20\n   |\n43 |             .filter(|(_, c)| c.is_ascii\n\
    \   |                    ^ unclosed delimiter\n44 | }\n   |  - help: `)` may belong\
    \ here\n45 | \n46 | fn main() {\n   | ^^\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpxrhnebc5.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = string.clone();\n    while !prefix.is_empty() {\n        prefixes.push(prefix);\n\
    \        prefix = prefix.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmphyktthu9.rs:9:18\n\
    \  |\n6 |     let mut prefix = string.clone();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    7 |     while !prefix.is_empty() {\n8 |         prefixes.push(prefix);\n  |  \
    \                     ------ value moved here\n9 |         prefix = prefix.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n  |                  ^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpdnk6p927.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpamnm75ga.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmphddlr66u.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push_str(&c.to_string());\n        } else {\n\
    \            prefix.push(current_prefix);\n            current_prefix = String::new();\n\
    \        }\n    }\n    prefix.push(current_prefix);\n    prefix\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp46o7c36a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string.chars().next();\n    while let Some(next) = string.chars().next() {\n\
    \        if next == current {\n            prefix.push(current);\n        }\n\
    \        current = next;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbj_l33w3.rs:8:20\n  |\n8 |\
    \         if next == current {\n  |                    ^^^^^^^ expected `char`,\
    \ found enum `Option`\n  |\n  = note: expected type `char`\n             found\
    \ enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbj_l33w3.rs:11:19\n\
    \   |\n6  |     let mut current = string.chars().next();\n   |               \
    \        --------------------- expected due to this value\n...\n11 |         current\
    \ = next;\n   |                   ^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |         current = Some(next);\n\
    \   |                   +++++    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbj_l33w3.rs:13:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ enum `Option`\n   |\n   = note: expected struct `Vec<String>`\n            \
    \  found struct `Vec<Option<char>>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmp9k6m8cex.rs:9:28\n  |\n9 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9k6m8cex.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len\
    \ = string.len();\n    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5p_9ln3l.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if !c.is_ascii_alphanumeric()\
    \ {\n            continue;\n        }\n        prefix.push(c);\n        if prefix.len()\
    \ == string.len() {\n            prefixes.push(prefix);\n            prefix =\
    \ String::new();\n        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp64zlw4o8.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current_prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp4a4tzrcz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzp4sw4k0.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq19i49zh.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    while !string.is_empty() {\n        prefix.push(string);\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmpxm3rhwxu.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefix.push(string);\n\
    \  |                     ------ value moved here\n9 |         string = string.chars().next().unwrap().to_string();\n\
    \  |                  ^^^^^^^^^^^^^^ value borrowed here after move\n  |\n  =\
    \ note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpj_2s4gnl.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(&string[0..current_len]);\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3zab55k.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string);\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmpfd9xj3bg.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefixes.push(string);\n\
    \  |                       ------ value moved here\n9 |         string = string.chars().next().unwrap().to_string();\n\
    \  |                  ^^^^^^^^^^^^^^ value borrowed here after move\n  |\n  =\
    \ note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix\
    \ = \"\";\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix += c;\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpmhgqyln0.rs:9:13\n  |\n9 |             current_prefix +=\
    \ c;\n  |             --------------^^^^^\n  |             |\n  |            \
    \ cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmhgqyln0.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string =\
    \ string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n    \
    \    prefix.push(string.as_bytes()[0..i].to_str().unwrap());\n        i += 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_str` found for slice `[u8]` in the current\
    \ scope\n --> /tmp/tmp8r4gzi42.rs:9:45\n  |\n9 |         prefix.push(string.as_bytes()[0..i].to_str().unwrap());\n\
    \  |                                             ^^^^^^ method not found in `[u8]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > 1 {\n            prefix.pop();\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9lq6k_av.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > 1 {\n            prefix.pop();\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg9ij2346.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string\n        .chars()\n        .filter(|c|\
    \ !c.is_alphanumeric())\n        .map(|c| c.to_string())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmp9tmz_h8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    let mut i = 0;\n    while i < string.len() {\n  \
    \      let mut j = i;\n        while j < string.len() && string[j] == string[j\
    \ + 1] {\n            j += 1; // skip duplicates\n        }\n        prefixes.push(&string[i..j]);\n\
    \        i = j;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkumzryg6.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j + 1] {\n \
    \  |                                   ^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpkumzryg6.rs:10:48\n   |\n10 |         while j < string.len() &&\
    \ string[j] == string[j + 1] {\n   |                                         \
    \       ^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkumzryg6.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current\
    \ = string;\n    while current.len() > 0 {\n        prefix.push(current);\n  \
    \      current = &current[..current.len() - 1];\n    }\n    prefix\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpks1_p0cf.rs:9:19\n  |\n6 |\
    \     let mut current = string;\n  |                       ------ expected due\
    \ to this value\n...\n9 |         current = &current[..current.len() - 1];\n \
    \ |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         current\
    \ = (&current[..current.len() - 1]).to_string();\n  |                   +    \
    \                         +++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push(c);\n        } else {\n            prefixes.push(prefix);\n\
    \            prefix.clear();\n        }\n    }\n    prefixes.push(prefix);\n \
    \   prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpfj38xcjh.rs:9:13\n\
    \   |\n6  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n9  |             prefix.push(c);\n   |             ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n10 |         } else {\n11 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpei3aayg2.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0gxvrd75.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpri77nv__.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_alphanumeric()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpts2kvh7v.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsuj5hg38.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplsciqcoc.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpnoh3i6gi.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsd6wpihb.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpebib51gk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut s =\
    \ string;\n    while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9ltdvo_4.rs:9:13\n  |\n6 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut current\
    \ = String::new();\n    current.push_str(string);\n    while current.len() > 0\
    \ {\n        prefixes.push(current);\n        current.clear();\n        for c\
    \ in string.chars() {\n            if *current == c {\n                current.push_str(&c.to_string());\n\
    \            }\n        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk69zyiyo.rs:7:22\n  |\n7 |\
    \     current.push_str(string);\n  |                      ^^^^^^\n  |        \
    \              |\n  |                      expected `&str`, found struct `String`\n\
    \  |                      help: consider borrowing here: `&string`\n\nerror[E0277]:\
    \ can't compare `str` with `char`\n  --> /tmp/tmpk69zyiyo.rs:12:25\n   |\n12 |\
    \             if *current == c {\n   |                         ^^ no implementation\
    \ for `str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpfo0im3r4.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string);\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmp2cpkde69.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefixes.push(string);\n\
    \  |                       ------ value moved here\n9 |         string = string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n  |                  ^^^^^^^^^^^^^^ value\
    \ borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefix.push(string);\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmp3j5hl652.rs:9:18\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     while !string.is_empty() {\n8 |         prefix.push(string);\n\
    \  |                     ------ value moved here\n9 |         string = string.chars().next().unwrap().to_string();\n\
    \  |                  ^^^^^^^^^^^^^^ value borrowed here after move\n  |\n  =\
    \ note: borrow occurs due to deref coercion to `str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut string\
    \ = string.to_string();\n    while !string.is_empty() {\n        prefixes.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf33cg8do.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefix = Vec::new();\n    let mut prefix_len\
    \ = 0;\n    let mut string = string.to_string();\n    while string.len() > 0 {\n\
    \        prefix.push(string.chars().take(prefix_len).collect::<String>());\n \
    \       prefix_len += 1;\n        string = string.chars().skip(prefix_len).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"s\", \"fg\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]`', /tmp/tmpvqx4cxi0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfn all_prefixes(string:\
    \ String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    let mut prefix\
    \ = String::new();\n    for c in string.chars() {\n        prefix.push(c);\n \
    \       if prefix.len() == string.len() {\n            prefixes.push(prefix);\n\
    \            prefix = String::new();\n        }\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmpl3qa_2ys.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
