name: HumanEval_37_sort_even
language: rust
results:
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        } else {\n\
    \            odd[i] = even[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, 3, -3, 2, 1, 3, 3, 0, 5, 1, 123]`,\n right: `[-10, 3, -5, 2, -3, 3, 5,\
    \ 0, 9, 1, 123]`', /tmp/tmpkxyjel27.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp878yq8_8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp9rxx77i2.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd = even.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    even.extend(odd);\n    even.sort_by_key(|x|\
    \ x.0);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&(usize, isize)` by `{integer}`\n  --> /tmp/tmpsnl9s0bw.rs:10:70\n\
    \   |\n10 |     let mut odd = even.iter().cloned().enumerate().filter(|(_, x)|\
    \ x % 2 == 1).collect::<Vec<_>>();\n   |                                     \
    \                               - ^ - {integer}\n   |                        \
    \                                            |\n   |                         \
    \                                           &(usize, isize)\n\nerror[E0277]: the\
    \ trait bound `Vec<(usize, isize)>: Extend<(usize, (usize, isize))>` is not satisfied\n\
    \  --> /tmp/tmpsnl9s0bw.rs:11:10\n   |\n11 |     even.extend(odd);\n   |     \
    \     ^^^^^^ the trait `Extend<(usize, (usize, isize))>` is not implemented for\
    \ `Vec<(usize, isize)>`\n   |\n   = help: the following other types implement\
    \ trait `Extend<A>`:\n             <Vec<T, A> as Extend<&'a T>>\n            \
    \ <Vec<T, A> as Extend<T>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsnl9s0bw.rs:13:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    13 |     even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        } else {\n\
    \            odd[i] = even[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp38629op2.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp0qpf11d3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() && odd_index < odd.len() {\n        if even[even_index]\
    \ < odd[odd_index] {\n            even[even_index] = even[even_index];\n     \
    \       even_index += 1;\n        } else {\n            odd[odd_index] = odd[odd_index];\n\
    \            odd_index += 1;\n        }\n    }\n    even.extend(odd.iter().cloned());\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpepvhfwh1.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(0..even.len()).map(|(a, b)| {\n\
    \        if a % 2 == 0 {\n            even[b]\n        } else {\n            a\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp5r64_lz5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).collect::<Vec<_>>();\n    even.sort_by_key(|&i| &odd[i]);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[(usize, isize)]` cannot be indexed by `(usize,\
    \ isize)`\n  --> /tmp/tmp6ltuzber.rs:11:28\n   |\n11 |     even.sort_by_key(|&i|\
    \ &odd[i]);\n   |                            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[(usize,\
    \ isize)]>` is not implemented for `(usize, isize)`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(usize, isize)>` for `Vec<(usize,\
    \ isize)>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ltuzber.rs:12:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    12 |     even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        if even[even_index] % 2 == 0 {\n\
    \            even[even_index] = even[even_index] + 1;\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index] - 1;\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index] = odd[odd_index]\
    \ + 1;\n            odd_index += 1;\n        } else {\n            odd[odd_index]\
    \ = odd[odd_index] - 1;\n            odd_index += 1;\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpogt8iqbz.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n   \
    \         even[i] = even[i / 2];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpthzxdafn.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpjevhi2tf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpvrpfgjk8.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpqtxq1j96.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        if even[even_index] % 2 == 0 {\n\
    \            even[even_index] = even[even_index] + 1;\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index] - 1;\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index] = odd[odd_index]\
    \ + 1;\n            odd_index += 1;\n        } else {\n            odd[odd_index]\
    \ = odd[odd_index] - 1;\n            odd_index += 1;\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp70ag21qw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmptvpad5cp.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_idx = 1;\n    let mut odd_idx = 1;\n \
    \   while even_idx < even.len() {\n        if even[even_idx] % 2 == 0 {\n    \
    \        even[even_idx] = even[even_idx];\n            even_idx++;\n        }\
    \ else {\n            even[even_idx] = even[even_idx];\n            even_idx++;\n\
    \            odd.push(even[even_idx]);\n        }\n    }\n    while odd_idx <\
    \ odd.len() {\n        if odd[odd_idx] % 2 == 0 {\n            odd[odd_idx] =\
    \ odd[odd_idx];\n            odd_idx++;\n        } else {\n            odd[odd_idx]\
    \ = odd[odd_idx];\n            odd_idx++;\n            even.push(odd[odd_idx]);\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpxd4ywrlx.rs:16:21\n\
    \   |\n16 |             even_idx++;\n   |                     ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n16 |             { let tmp =\
    \ even_idx; even_idx += 1; tmp };\n   |             +++++++++++         ~~~~~~~~~~~~~~~~~~~~~~\n\
    16 -             even_idx++;\n16 +             even_idx += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmpxd4ywrlx.rs:19:21\n  \
    \ |\n19 |             even_idx++;\n   |                     ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n19 |             { let tmp =\
    \ even_idx; even_idx += 1; tmp };\n   |             +++++++++++         ~~~~~~~~~~~~~~~~~~~~~~\n\
    19 -             even_idx++;\n19 +             even_idx += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmpxd4ywrlx.rs:26:20\n  \
    \ |\n26 |             odd_idx++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n26 |             { let tmp =\
    \ odd_idx; odd_idx += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    26 -             odd_idx++;\n26 +             odd_idx += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmpxd4ywrlx.rs:29:20\n   |\n29\
    \ |             odd_idx++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n29 |             { let tmp = odd_idx; odd_idx\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n29\
    \ -             odd_idx++;\n29 +             odd_idx += 1;\n   | \n\nerror: aborting\
    \ due to 4 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp42vy6o82.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpdkfnuvwr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp2l5kefju.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a as isize\n        } else {\n  \
    \          b as isize\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq25_yb3k.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq25_yb3k.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmpq25_yb3k.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpq25_yb3k.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpdvie8f28.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxj7lrzie.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n    }\n    for i in odd.iter_mut() {\n      \
    \  *i ^= 1;\n    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpc6aglij1.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter_mut().cloned().for_each(|&x| {\n   \
    \     if x % 2 == 0 {\n            *x = *x + (*x % 2);\n        }\n    });\n \
    \   even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp____98i3.rs:11:21\n     |\n11   |\
    \     even.iter_mut().cloned().for_each(|&x| {\n     |                     ^^^^^^\
    \ types differ in mutability\n     |\n     = note:      expected reference `&_`\n\
    \             found mutable reference `&mut isize`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmp____98i3.rs:11:30\n\
    \    |\n11  |       even.iter_mut().cloned().for_each(|&x| {\n    |          \
    \                      ^^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpk_pl0rf4.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    let mut even_idx = even.iter().cloned().enumerate().map(|(i,\
    \ e)| {\n        if i % 2 == 0 {\n            Some(e)\n        } else {\n    \
    \        None\n        }\n    }).collect::<Vec<_>>();\n    let mut odd_idx = odd.iter().cloned().enumerate().map(|(i,\
    \ e)| {\n        if i % 2 == 0 {\n            Some(e)\n        } else {\n    \
    \        None\n        }\n    }).collect::<Vec<_>>();\n    let mut even_idx_iter\
    \ = even_idx.iter();\n    let mut odd_idx_iter = odd_idx.iter();\n    let mut\
    \ even_idx_next = even_idx_iter.next();\n    let mut odd_idx_next = odd_idx_iter.next();\n\
    \    while even_idx_next.is_some() && odd_idx_next.is_some() {\n        let (even_idx,\
    \ odd_idx) = match even_idx_next.unwrap() {\n            Some(idx) => idx,\n \
    \           None => odd_idx_next.unwrap(),\n        };\n        let (even, odd)\
    \ = match even_idx_next.unwrap() {\n            Some(idx) => even[idx],\n    \
    \        None => odd_idx_next.unwrap(),\n        };\n        let (even, odd) =\
    \ match odd_idx_next.unwrap() {\n            Some(idx) => odd[idx],\n        \
    \    None => even,\n        };\n        even.swap(odd);\n        even_idx_next\
    \ = even_idx_iter.next();\n        odd_idx_next = odd_idx_iter.next();\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpc18zh44s.rs:32:21\n\
    \   |\n30 |           let (even_idx, odd_idx) = match even_idx_next.unwrap() {\n\
    \   |  ___________________________________-\n31 | |             Some(idx) => idx,\n\
    \   | |                          --- this is found to be of type `&isize`\n32\
    \ | |             None => odd_idx_next.unwrap(),\n   | |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n33 | |         };\n   | |_________- `match`\
    \ arms have incompatible types\n   |\n   = note: expected reference `&isize`\n\
    \              found reference `&Option<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpc18zh44s.rs:35:26\n   |\n35 | \
    \            Some(idx) => even[idx],\n   |                          ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc18zh44s.rs:34:13\n   |\n34 |           let\
    \ (even, odd) = match even_idx_next.unwrap() {\n   |  _____________^^^^^^^^^^^___-\n\
    \   | |             |\n   | |             expected enum `Option`, found tuple\n\
    35 | |             Some(idx) => even[idx],\n36 | |             None => odd_idx_next.unwrap(),\n\
    37 | |         };\n   | |_________- this expression has type `&Option<isize>`\n\
    \   |\n   = note: expected enum `Option<isize>`\n             found tuple `(_,\
    \ _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpbbrgrs39.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_8breg70.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i %= 2;\n    \
    \    *i += 1;\n    }\n    for i in odd.iter_mut() {\n        *i %= 2;\n      \
    \  *i -= 1;\n    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp22ozrtii.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in 0..even.len() {\n        if i %\
    \ 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n           \
    \ odd[i / 2] = even[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpgnbypi94.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter_mut().cloned().for_each(|x| {\n        if x %\
    \ 2 == 0 {\n            *x = *x + (*x % 2);\n        }\n    });\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpzarxd3d8.rs:11:21\n     |\n11   |\
    \     even.iter_mut().cloned().for_each(|x| {\n     |                     ^^^^^^\
    \ types differ in mutability\n     |\n     = note:      expected reference `&_`\n\
    \             found mutable reference `&mut isize`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmpzarxd3d8.rs:11:30\n\
    \    |\n11  |       even.iter_mut().cloned().for_each(|x| {\n    |           \
    \                     ^^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n  \
    \  --> /tmp/tmphz_ircms.rs:11:52\n     |\n11   |     even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    \     |                                                    ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(_, _)`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmphz_ircms.rs:11:61\n   |\n11 |        even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    \   |                                                                ^^^^^^^ method\
    \ cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_, isize>>,\
    \ Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>,\
    \ Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even.clone();\n    odd.swap(0, even.len());\n\
    \    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmpqhmy0m7z.rs:12:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_idx = 1;\n    let mut odd_idx = 1;\n \
    \   while even_idx < even.len() {\n        if even[even_idx] > even[even_idx -\
    \ 1] {\n            odd.swap(odd_idx, even_idx);\n            odd_idx += 1;\n\
    \        }\n        even_idx += 1;\n    }\n    while odd_idx < odd.len() {\n \
    \       if odd[odd_idx] > odd[odd_idx - 1] {\n            even.swap(even_idx,\
    \ odd_idx);\n            even_idx += 1;\n        }\n        odd_idx += 1;\n  \
    \  }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpk7z0jcnh.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_idx = 1;\n    let mut odd_idx = 1;\n \
    \   while even_idx < even.len() {\n        if even[even_idx] < even[even_idx +\
    \ 1] {\n            even[even_idx] = even[even_idx + 1];\n            even[even_idx\
    \ + 1] += 1;\n            even_idx += 2;\n        } else {\n            even[even_idx]\
    \ = even[even_idx - 1];\n            even[even_idx - 1] += 1;\n            even_idx\
    \ -= 2;\n        }\n    }\n    while odd_idx < odd.len() {\n        if odd[odd_idx]\
    \ < odd[odd_idx + 1] {\n            odd[odd_idx] = odd[odd_idx + 1];\n       \
    \     odd[odd_idx + 1] += 1;\n            odd_idx += 2;\n        } else {\n  \
    \          odd[odd_idx] = odd[odd_idx - 1];\n            odd[odd_idx - 1] += 1;\n\
    \            odd_idx -= 2;\n        }\n    }\n    even\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpd3ysi5je.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpxpkmjx7_.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n    }\n    for i in odd.iter_mut()\
    \ {\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n\
    \    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp8v97vje1.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp29foa0l6.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpguk_ndio.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpys2cx8mz.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n\
    \            odd[i] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpett_q4dw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n   \
    \         even[i] = even[i / 2];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpv19mp1qf.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmp3fuxuuff.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp3b6a4q4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    let mut odd = even;\n    odd.swap(0, even.len());\n\
    \    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpyv0sa7s9.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort_unstable();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        if even[even_index] % 2 == 0 {\n\
    \            even[even_index] = even[even_index + 1];\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index];\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index] = odd[odd_index\
    \ + 1];\n            odd_index += 1;\n        } else {\n            odd[odd_index]\
    \ = odd[odd_index];\n            odd_index += 1;\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpxeb7mf2s.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    even.sort_by_key(|&x| odd.iter().position(|&y|\
    \ x == y).unwrap());\n    even.extend(odd);\n    even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzwrixmx7.rs:13:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n13 | \
    \    even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i -= 2;\n    \
    \    *i += 1;\n    }\n    for i in odd.iter_mut() {\n        *i -= 1;\n      \
    \  *i += 1;\n    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpzjcwt6dy.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpfvxift33.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpp4ni8c95.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmplavljdyo.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpkt2h8xx4.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpg6qv5b5a.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp8n8lblcz.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        } else {\n\
    \            even[i] = even[i - 1];\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpw8tejuln.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_values = even.clone();\n    let mut odd_values\
    \ = odd.clone();\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even_values[i] = even[i];\n        }\
    \ else {\n            odd_values[i] = odd[i];\n        }\n    }\n    even_values\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp5gzzlgep.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpw2sq9q26.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpnxcam7n2.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i] = odd[i\
    \ / 2];\n        }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmplrs6tr61.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i\
    \ ^= 1;\n    }\n    for i in odd.iter_mut() {\n        *i ^= 1;\n        *i ^=\
    \ 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n\
    \    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpor3ixcka.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpp465wddc.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(a,\
    \ b)| {\n        if *a % 2 == 0 {\n            *a = *b;\n        }\n    });\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp7zpz_1p4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpnmket4sn.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp0u633arj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpx8bqz9ho.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        if a % 2\
    \ == 0 {\n            *a = *b;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpi9jgs_j2.rs:14:14\n\
    \   |\n14 |         if a % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `a`\n   |\n14 |         if *a % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i];\n        } else {\n            odd[i] = odd[i];\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpkx7h_r0t.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n    }\n    for i in odd.iter_mut()\
    \ {\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n\
    \    }\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpic_3qp9l.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in even.iter_mut() {\n        if i\
    \ % 2 == 0 {\n            *i = *i / 2;\n        } else {\n            *i = *i\
    \ + 1;\n        }\n    }\n    for i in even.iter_mut() {\n        *i = *i / 2;\n\
    \    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n    for i\
    \ in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp5_9hw4jx.rs:103:1\n    |\n\
    103 | }\n    | ^ expected `{`\n\nerror[E0369]: cannot mod `&mut isize` by `{integer}`\n\
    \  --> /tmp/tmp5_9hw4jx.rs:12:14\n   |\n12 |         if i % 2 == 0 {\n   |   \
    \         - ^ - {integer}\n   |            |\n   |            &mut isize\n   |\n\
    help: `%` can be used on `isize`, you can dereference `i`\n   |\n12 |        \
    \ if *i % 2 == 0 {\n   |            +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpudydhhrq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp3bym_5gl.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(a,\
    \ b)| {\n        if *a % 2 == 0 {\n            *a = *b;\n        }\n    });\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpuo8takuk.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_values = even.clone();\n    let mut odd_values\
    \ = odd.clone();\n    even.sort_unstable();\n    odd.sort_unstable();\n    for\
    \ i in 0..even.len() {\n        if i % 2 == 0 {\n            even_values[i] =\
    \ even[i];\n        } else {\n            odd_values[i] = odd[i];\n        }\n\
    \    }\n    even_values\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp3ofevlg7.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    even.sort_by_key(|&x| x.0);\n    odd.sort_by_key(|&x|\
    \ x.0);\n    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu4g339c7.rs:14:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n14 | \
    \    even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    let mut odd = even;\n    odd.swap(0, even.len());\n\
    \    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpj6qscbl0.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort_unstable();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).map(|(_, x)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 2, 3]`', /tmp/tmp_9bntyhi.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp12bjvh0a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    let mut even_idx = even.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).collect::<Vec<_>>();\n    even_idx.sort_by_key(|&i| &odd[i]);\n\
    \    odd_idx.sort_by_key(|&i| &even[i]);\n    even_idx.extend(odd_idx);\n    even.extend(even_idx);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `(usize, isize)`\n\
    \  --> /tmp/tmp7w0kqdt0.rs:13:32\n   |\n13 |     even_idx.sort_by_key(|&i| &odd[i]);\n\
    \   |                                ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `(usize, isize)`\n   = help: the trait `SliceIndex<[T]>` is\
    \ implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(usize, isize)>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `(usize, isize)`\n  -->\
    \ /tmp/tmp7w0kqdt0.rs:14:31\n   |\n14 |     odd_idx.sort_by_key(|&i| &even[i]);\n\
    \   |                               ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `(usize, isize)`\n   = help: the trait `SliceIndex<[T]>` is\
    \ implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(usize, isize)>` for `Vec<isize>`\n\
    \nerror[E0277]: the trait bound `Vec<isize>: Extend<(usize, isize)>` is not satisfied\n\
    \  --> /tmp/tmp7w0kqdt0.rs:16:10\n   |\n16 |     even.extend(even_idx);\n   |\
    \          ^^^^^^ the trait `Extend<(usize, isize)>` is not implemented for `Vec<isize>`\n\
    \   |\n   = help: the following other types implement trait `Extend<A>`:\n   \
    \          <Vec<T, A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpkqpig24v.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpeq6uh3l7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpphv74emw.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpylvn8671.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i\
    \ ^= 1;\n    }\n    for i in odd.iter_mut() {\n        *i ^= 1;\n        *i ^=\
    \ 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n\
    \    }\n    even.extend(odd.iter().cloned());\n    even\n}\n\nfn main() {\n  \
    \  let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmppztole2s.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpmo_pb2z6.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpy4a98tq8.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| a % 2 == b % 2);\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpul3zt3bp.rs:9:31\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| a % 2 == b % 2);\n  |                        \
    \       ^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| a % 2 == b % 2);\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp01x7neld.rs:9:31\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| a % 2 == b % 2);\n  |                        \
    \       ^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    even.iter().cloned().zip(odd.iter().cloned()).map(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            a\n        } else {\n          \
    \  b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpw4dz_8s6.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).collect::<Vec<_>>();\n    even.sort_by_key(|&i| &odd[i]);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[(usize, isize)]` cannot be indexed by `(usize,\
    \ isize)`\n  --> /tmp/tmp9mrdtlcl.rs:11:28\n   |\n11 |     even.sort_by_key(|&i|\
    \ &odd[i]);\n   |                            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[(usize,\
    \ isize)]>` is not implemented for `(usize, isize)`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(usize, isize)>` for `Vec<(usize,\
    \ isize)>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9mrdtlcl.rs:12:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    12 |     even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp3pwhu0w5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpd7bvyuey.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n    }\n    for i in odd.iter_mut() {\n      \
    \  *i ^= 1;\n    }\n    even.extend(odd.iter().cloned());\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpiv8t03yj.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while odd_index < odd.len() {\n\
    \            if even[even_index] > odd[odd_index] {\n                odd.swap(odd_index,\
    \ even_index);\n            }\n            odd_index += 1;\n        }\n      \
    \  even_index += 1;\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpzuibqo1q.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpzuibqo1q.rs:10:19\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move occurs\
    \ because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    9  |     let mut even = l;\n   |                    - value moved here\n10 | \
    \    let mut odd = l;\n   |                   ^ value used here after move\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpf3luyaf2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while odd_index < odd.len() {\n\
    \            if even[even_index] > odd[odd_index] {\n                even[even_index]\
    \ = odd[odd_index];\n                even_index += 1;\n                odd_index\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        even_index += 1;\n        odd_index += 1;\n    }\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpqsetrrdg.rs:10:9\n\
    \   |\n10 |     let mut odd = l;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpqsetrrdg.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a as isize\n        } else {\n  \
    \          b as isize\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjsitxacq.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjsitxacq.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjsitxacq.rs:9:5\n   |\n8  |   fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n9  | /     l.sort_unstable_by(|a, b| {\n10 | |         if a\
    \ % 2 == 0 {\n11 | |             a as isize\n12 | |         } else {\n13 | | \
    \            b as isize\n14 | |         }\n15 | |     })\n   | |______^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror[E0606]: casting `&isize` as `isize` is\
    \ invalid\n  --> /tmp/tmpjsitxacq.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpjsitxacq.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in even.iter_mut() {\n        if i\
    \ % 2 == 0 {\n            *i = *i / 2;\n        } else {\n            *i = *i\
    \ + 1;\n        }\n    }\n    for i in even.iter_mut() {\n        *i = *i / 2;\n\
    \    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n    for i\
    \ in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even.iter_mut() {\n        *i =\
    \ *i / 2;\n    }\n    for i in even.iter_mut() {\n        *i = *i + 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i = *i / 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i = *i + 1;\n    }\n    for i in even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpndksehsq.rs:103:1\n    |\n\
    103 | }\n    | ^ expected `{`\n\nerror[E0369]: cannot mod `&mut isize` by `{integer}`\n\
    \  --> /tmp/tmpndksehsq.rs:12:14\n   |\n12 |         if i % 2 == 0 {\n   |   \
    \         - ^ - {integer}\n   |            |\n   |            &mut isize\n   |\n\
    help: `%` can be used on `isize`, you can dereference `i`\n   |\n12 |        \
    \ if *i % 2 == 0 {\n   |            +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmphrjvp4tm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        if even[even_index] % 2 == 0 {\n\
    \            even[even_index] = even[even_index] + 1;\n            even_index\
    \ += 1;\n        } else {\n            even[even_index] = even[even_index] - 1;\n\
    \            even_index += 1;\n        }\n    }\n    while odd_index < odd.len()\
    \ {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index] = odd[odd_index]\
    \ + 1;\n            odd_index += 1;\n        } else {\n            odd[odd_index]\
    \ = odd[odd_index] - 1;\n            odd_index += 1;\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpohuj3em0.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmps744d3er.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).map(|(_, x)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 2, 3]`', /tmp/tmp8222fked.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmp48ly129v.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        if v % 2\
    \ == 0 {\n            *w = v;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp64if54oe.rs:14:14\n\
    \   |\n14 |         if v % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `v`\n   |\n14 |         if *v % 2 == 0 {\n   |         \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64if54oe.rs:15:18\n   |\n\
    15 |             *w = v;\n   |             --   ^ expected `isize`, found `&mut\
    \ isize`\n   |             |\n   |             expected due to the type of this\
    \ binding\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |         \
    \    *w = *v;\n   |                  +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter_mut().cloned().for_each(|x| *x /= 2);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmp7f9_ax01.rs:11:21\n     |\n11   |\
    \     even.iter_mut().cloned().for_each(|x| *x /= 2);\n     |                \
    \     ^^^^^^ types differ in mutability\n     |\n     = note:      expected reference\
    \ `&_`\n             found mutable reference `&mut isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmp7f9_ax01.rs:11:30\n\
    \    |\n11  |       even.iter_mut().cloned().for_each(|x| *x /= 2);\n    |   \
    \                             ^^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even = even.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd\
    \ = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even = even.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd\
    \ = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even = even.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd\
    \ = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even = even.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even\
    \ = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = even.iter().cloned().collect::<Vec<_>>();\n    let mut odd\
    \ = odd.iter().cloned().collect::<Vec<_>>();\n    let mut even = even.iter().cloned().collect::<Vec<_>>\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: field expressions cannot have generic arguments\n  --> /tmp/tmpcdhfdrns.rs:35:50\n\
    \   |\n35 |     let mut even = even.iter().cloned().collect::<Vec<_>>\n   |  \
    \                                                ^^^^^^^^\n\nerror: expected `;`,\
    \ found `}`\n  --> /tmp/tmpcdhfdrns.rs:35:58\n   |\n35 |     let mut even = even.iter().cloned().collect::<Vec<_>>\n\
    \   |                                                          ^ help: add `;`\
    \ here\n36 | }\n   | - unexpected token\n\nerror[E0615]: attempted to take value\
    \ of method `collect` on type `Cloned<std::slice::Iter<'_, isize>>`\n  --> /tmp/tmpcdhfdrns.rs:35:41\n\
    \   |\n35 |     let mut even = even.iter().cloned().collect::<Vec<_>>\n   |  \
    \                                       ^^^^^^^ method, not a field\n   |\nhelp:\
    \ use parentheses to call the method\n   |\n35 |     let mut even = even.iter().cloned().collect::<Vec<_>>()\n\
    \   |                                                          ++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpcdhfdrns.rs:8:32\n  |\n8 | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n  |    ---------                   ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0615.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpb_z1_63n.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a - b\n        } else {\n       \
    \     b - a\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphm0i3lt4.rs:11:13\n   |\n\
    11 |             a - b\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphm0i3lt4.rs:13:13\n\
    \   |\n13 |             b - a\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphm0i3lt4.rs:9:5\n\
    \   |\n8  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    9  | /     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |\
    \             a - b\n12 | |         } else {\n13 | |             b - a\n14 | |\
    \         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in 0..even.len() {\n        if i %\
    \ 2 == 0 {\n            even[i] = even[i / 2];\n        } else {\n           \
    \ odd[i / 2] = odd[i];\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpjg78xy3u.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).map(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            a\n        } else {\n          \
    \  b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp7y27txap.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpd7mso0ke.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even = even.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut odd = odd.iter().cloned().collect::<Vec<_>>();\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd);\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp4yztkgxy.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nwarning: variable does not need to be mutable\n  --> /tmp/tmp4yztkgxy.rs:10:9\n\
    \   |\n10 |     let mut odd = l;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n\nerror[E0382]: use of moved value: `l`\n  -->\
    \ /tmp/tmp4yztkgxy.rs:10:19\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - move occurs because `l` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n9  |     let mut even = l;\n   |      \
    \              - value moved here\n10 |     let mut odd = l;\n   |           \
    \        ^ value used here after move\n\nerror: aborting due to previous error;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp45bqbxot.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_values = even.clone();\n    let mut odd_values\
    \ = odd.clone();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n    \
    \        even_values[i] = even[i];\n        } else {\n            odd_values[i]\
    \ = odd[i];\n        }\n    }\n    even.swap(even_values);\n    odd.swap(odd_values);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpkg6cn373.rs:20:10\n    |\n20  |     even.swap(even_values);\n\
    \    |          ^^^^ ----------- supplied 1 argument\n    |          |\n    |\
    \          expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpkg6cn373.rs:21:9\n    |\n21  |     odd.swap(odd_values);\n   \
    \ |         ^^^^ ---------- supplied 1 argument\n    |         |\n    |      \
    \   expected 2 arguments\n    |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp24esina0.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a - b\n        } else {\n       \
    \     b - a\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mizsegz.rs:11:13\n   |\n\
    11 |             a - b\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3mizsegz.rs:13:13\n\
    \   |\n13 |             b - a\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpiadnjs8f.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            b.cmp(a)\n        } else {\n    \
    \        a.cmp(b)\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgqr0spqg.rs:9:5\n   |\n8\
    \  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n9  | /\
    \     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |    \
    \         b.cmp(a)\n12 | |         } else {\n13 | |             a.cmp(b)\n14 |\
    \ |         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpdby2im_3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpsqq7nru2.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a as isize\n        } else {\n  \
    \          b as isize\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb0svyd8s.rs:11:13\n   |\n\
    11 |             a as isize\n   |             ^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb0svyd8s.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpb0svyd8s.rs:9:5\n   |\n8  |   fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n9  | /     l.sort_unstable_by(|a, b| {\n10 | |         if a\
    \ % 2 == 0 {\n11 | |             a as isize\n12 | |         } else {\n13 | | \
    \            b as isize\n14 | |         }\n15 | |     })\n   | |______^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror[E0606]: casting `&isize` as `isize` is\
    \ invalid\n  --> /tmp/tmpb0svyd8s.rs:11:13\n   |\n11 |             a as isize\n\
    \   |             -^^^^^^^^^\n   |             |\n   |             cannot cast\
    \ `&isize` as `isize`\n   |             help: dereference the expression: `*a`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpb0svyd8s.rs:13:13\n\
    \   |\n13 |             b as isize\n   |             -^^^^^^^^^\n   |        \
    \     |\n   |             cannot cast `&isize` as `isize`\n   |             help:\
    \ dereference the expression: `*b`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        if *a % 2\
    \ == 0 {\n            *a = *b;\n        }\n    });\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpvd1pzelz.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp0xbue9ta.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.iter().zip(odd.iter()).for_each(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            *a = *b;\n        }\n    });\n \
    \   even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0594]: cannot assign to `*a`, which is behind a `&` reference\n\
    \  --> /tmp/tmp1ax8fvro.rs:15:13\n   |\n13 |     even.iter().zip(odd.iter()).for_each(|(a,\
    \ b)| {\n   |                                            - help: consider changing\
    \ this to be a mutable reference: `&mut isize`\n14 |         if a % 2 == 0 {\n\
    15 |             *a = *b;\n   |             ^^^^^^^ `a` is a `&` reference, so\
    \ the data it refers to cannot be written\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0594`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp5jvgox9o.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpjz8lm0jn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_values = even.clone();\n    let mut odd_values\
    \ = odd.clone();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n    \
    \        even_values[i] = even[i];\n        } else {\n            odd_values[i]\
    \ = odd[i];\n        }\n    }\n    even.swap(even_values);\n    odd.swap(odd_values);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp5v7ppsai.rs:20:10\n    |\n20  |     even.swap(even_values);\n\
    \    |          ^^^^ ----------- supplied 1 argument\n    |          |\n    |\
    \          expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp5v7ppsai.rs:21:9\n    |\n21  |     odd.swap(odd_values);\n   \
    \ |         ^^^^ ---------- supplied 1 argument\n    |         |\n    |      \
    \   expected 2 arguments\n    |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            b.cmp(a)\n        } else {\n    \
    \        a.cmp(b)\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgjzkufz8.rs:9:5\n   |\n8\
    \  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n9  | /\
    \     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |    \
    \         b.cmp(a)\n12 | |         } else {\n13 | |             a.cmp(b)\n14 |\
    \ |         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i] = odd[i\
    \ / 2];\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp5alb3wek.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp29k7hdex.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpzp5doo5t.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_idx = 1;\n    let mut odd_idx = 1;\n \
    \   while even_idx < even.len() {\n        while odd_idx < odd.len() && even[even_idx]\
    \ == odd[odd_idx] {\n            odd_idx += 1;\n        }\n        even[even_idx]\
    \ = even[odd_idx];\n        even_idx += 1;\n        odd_idx += 1;\n    }\n   \
    \ even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpsby_zo8w.rs:10:9\n\
    \   |\n10 |     let mut odd = l;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpsby_zo8w.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpb2523x0o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while odd_index < odd.len() {\n\
    \            if even[even_index] < odd[odd_index] {\n                even[even_index]\
    \ = odd[odd_index];\n                even_index += 1;\n                odd_index\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        even_index += 1;\n        odd_index = 0;\n    }\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpmvbwa4hs.rs:10:9\n\
    \   |\n10 |     let mut odd = l;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpmvbwa4hs.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    for i\
    \ in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpvmy42lsd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i];\n        } else {\n            odd[i] = odd[i];\n\
    \        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp5x3_91js.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in even.iter_mut() {\n        *i -=\
    \ 1;\n        *i /= 2;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i /= 2;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i /= 2;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i /= 2;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i /= 2;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i /= 2;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i /= 2;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i /= 2;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i /= 2;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprurslph4.rs:121:3\n\
    \    |\n8   | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \                              - unclosed delimiter\n...\n111 |     for i in even.iter_mut()\
    \ {\n    |                              - this delimiter might not be properly\
    \ closed...\n...\n114 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n121 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmprurslph4.rs:8:32\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |    ---------                   ^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().rev().cloned().enumerate().for_each(|(i,\
    \ v)| {\n        if i % 2 == 0 {\n            *v = even[i];\n        }\n    });\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp8qf0wa3c.rs:11:32\n     |\n11   | \
    \    even.iter().cloned().rev().cloned().enumerate().for_each(|(i, v)| {\n   \
    \  |                                ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `enumerate` exists for struct `Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp8qf0wa3c.rs:11:41\n\
    \   |\n11 |       even.iter().cloned().rev().cloned().enumerate().for_each(|(i,\
    \ v)| {\n   |                                           ^^^^^^^^^ method cannot\
    \ be called on `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Rev<Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while odd_index < odd.len() {\n\
    \            if even[even_index] < odd[odd_index] {\n                even[even_index]\
    \ = even[even_index];\n                even_index += 1;\n            } else {\n\
    \                odd[odd_index] = odd[odd_index];\n                odd_index +=\
    \ 1;\n            }\n        }\n        even_index += 1;\n        odd_index +=\
    \ 1;\n    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp6aecjlre.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort();\n    even.iter_mut().zip(even.iter_mut()).for_each(|(v, e)|\
    \ {\n        *e = v;\n    });\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8edl51jk.rs:12:14\n   |\n\
    12 |         *e = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         *e = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even;\n    let mut even_index = 0;\n    let mut odd_index =\
    \ 0;\n    while even_index < even.len() {\n        while even[even_index] < even[even_index\
    \ + 2] {\n            even_index += 2;\n        }\n        even[even_index] =\
    \ even[even_index + 2];\n        even_index += 2;\n        while odd_index < odd.len()\
    \ {\n            while odd[odd_index] < even[even_index] {\n                odd_index\
    \ += 2;\n            }\n            odd[odd_index] = even[even_index];\n     \
    \       odd_index += 2;\n        }\n        odd.swap(odd_index, even_index);\n\
    \    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpk8h40ohi.rs:13:24\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     let\
    \ mut odd = even;\n   |                   ---- value moved here\n...\n13 |   \
    \  while even_index < even.len() {\n   |                        ^^^^^^^^^^ value\
    \ borrowed here after move\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(v,\
    \ w)| {\n        *w = v;\n    });\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpby3l9w9j.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 1, 2, 3]`,\n right: `[1, 2, 3]`', /tmp/tmprqrz_4f4.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmprvnarb95.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a - b\n        } else {\n       \
    \     b - a\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptq7t4ymx.rs:11:13\n   |\n\
    11 |             a - b\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptq7t4ymx.rs:13:13\n\
    \   |\n13 |             b - a\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpmf6wgte3.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i];\n        } else {\n\
    \            odd[i] = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpkfgjhlf7.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_values = even.clone();\n    let mut odd_values\
    \ = odd.clone();\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even_values[i] = even[i];\n        }\
    \ else {\n            odd_values[i] = odd[i];\n        }\n    }\n    even_values\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpdxp34nri.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpo19sh1pf.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    let mut even_idx = even.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).collect::<Vec<_>>();\n    even_idx.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    odd_idx.sort_by(|a, b| a.1.cmp(&b.1));\n    even_idx.zip(odd_idx).map(|(a,\
    \ b)| a.1.clone()).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<(usize, isize)>` is not an iterator\n   --> /tmp/tmppst0y0ca.rs:15:14\n\
    \    |\n15  |       even_idx.zip(odd_idx).map(|(a, b)| a.1.clone()).collect()\n\
    \    |                ^^^ `Vec<(usize, isize)>` is not an iterator\n    |\n  \
    \  = note: the following trait bounds were not satisfied:\n            `Vec<(usize,\
    \ isize)>: Iterator`\n            which is required by `&mut Vec<(usize, isize)>:\
    \ Iterator`\n            `[(usize, isize)]: Iterator`\n            which is required\
    \ by `&mut [(usize, isize)]: Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    even.sort_by_key(|&x| odd.iter().position(|&y|\
    \ x == y).unwrap());\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4uch4lx_.rs:12:5\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                       \
    \         ---------- expected `Vec<isize>` because of return type\n...\n12 | \
    \    even\n   |     ^^^^ expected `isize`, found tuple\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<(usize, isize)>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpzwu8btj7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while even[even_index] < even[even_index\
    \ + 2] {\n            even.swap(even_index, even_index + 2);\n            even_index\
    \ += 2;\n        }\n        even_index += 1;\n    }\n    while odd_index < odd.len()\
    \ {\n        while odd[odd_index] < odd[odd_index + 1] {\n            odd.swap(odd_index,\
    \ odd_index + 1);\n            odd_index += 1;\n        }\n        odd_index +=\
    \ 1;\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpklb9a_cd.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        while odd_index < odd.len() {\n\
    \            if even[even_index] > odd[odd_index] {\n                odd.swap(odd_index,\
    \ odd_index + 1);\n            }\n            odd_index += 1;\n        }\n   \
    \     even_index += 1;\n        odd_index = 0;\n    }\n    odd\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpf6g0b3xx.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `l`\n  --> /tmp/tmpf6g0b3xx.rs:10:19\n   |\n\
    8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move occurs\
    \ because `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    9  |     let mut even = l;\n   |                    - value moved here\n10 | \
    \    let mut odd = l;\n   |                   ^ value used here after move\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpjdjqn914.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n  \
    \  --> /tmp/tmpdt_uvjqo.rs:11:52\n     |\n11   |     even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    \     |                                                    ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(_, _)`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpdt_uvjqo.rs:11:61\n   |\n11 |        even.iter().cloned().zip(even.iter().cloned()).cloned().collect()\n\
    \   |                                                                ^^^^^^^ method\
    \ cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_, isize>>,\
    \ Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>,\
    \ Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    let mut even_idx = even.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n    let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n    let mut even_idx = even_idx.iter\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1ppuab2m.rs:25:37\n   |\n\
    25 |     let mut even_idx = even_idx.iter\n   |                              \
    \       ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0369]:\
    \ cannot mod `(usize, isize)` by `{integer}`\n  --> /tmp/tmp1ppuab2m.rs:13:80\n\
    \   |\n13 |     let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n   |                                 \
    \                                             - ^ - {integer}\n   |          \
    \                                                                    |\n   | \
    \                                                                            \
    \ (usize, isize)\n\nerror[E0369]: cannot mod `(usize, isize)` by `{integer}`\n\
    \  --> /tmp/tmp1ppuab2m.rs:14:78\n   |\n14 |     let mut odd_idx = odd_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 1).collect::<Vec<_>>();\n   |                                 \
    \                                           - ^ - {integer}\n   |            \
    \                                                                |\n   |     \
    \                                                                       (usize,\
    \ isize)\n\nerror[E0369]: cannot mod `(usize, (usize, isize))` by `{integer}`\n\
    \  --> /tmp/tmp1ppuab2m.rs:15:80\n   |\n15 |     let mut even_idx = even_idx.iter().cloned().enumerate().filter(|&(_,\
    \ x)| x % 2 == 0).collect::<Vec<_>>();\n   |                                 \
    \                                             - ^ - {integer}\n   |          \
    \                                                                    |\n   | \
    \                                                                            \
    \ (usize, (usize, isize))\n\nerror[E0369]: cannot mod `(usize, (usize, isize))`\
    \ by `{integer}`\n  --> /tmp/tmp1ppuab2m.rs:16:78\n   |\n16 |     let mut odd_idx\
    \ = odd_idx.iter().cloned().enumerate().filter(|&(_, x)| x % 2 == 1).collect::<Vec<_>>();\n\
    \   |                                                                        \
    \    - ^ - {integer}\n   |                                                   "
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpsyml0b1z.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpbw6p2_kz.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = l;\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            odd[i] = even[i];\n        } else {\n\
    \            odd[i] = even[i];\n            odd[i / 2] = even[i / 2];\n      \
    \  }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpd4ewa0qw.rs:11:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     even.sort();\n11 |     let mut odd = l;\n   |                   ^ value\
    \ used here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(a,\
    \ b)| {\n        if *a % 2 == 0 {\n            *a = *b;\n        }\n    });\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpw1foumyw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpw9pf54rh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(a, b)| {\n        *a = *b;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpr1ke_icp.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n   \
    \         even[i] = even[i / 2];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpr53imdao.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().rev().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp8xdi6mcz.rs:11:32\n     |\n11   | \
    \    even.iter().cloned().rev().cloned().collect()\n     |                   \
    \             ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&&_`\n                found reference `&isize`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp8xdi6mcz.rs:11:41\n \
    \  |\n11 |       even.iter().cloned().rev().cloned().collect()\n   |         \
    \                                  ^^^^^^^ method cannot be called on `Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Rev<Cloned<std::slice::Iter<'_, isize>>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even.clone();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            odd[i] = even[i];\n        } else {\n\
    \            odd[i] = even[i - 1];\n        }\n    }\n    odd\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpfcbimmsd.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().sort_by(|&(i,\
    \ v)| {\n        if i % 2 == 0 {\n            Some(v)\n        } else {\n    \
    \        None\n        }\n    }).map(|(i, v)| v).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmp4_2ddjt_.rs:9:35\n  |\n9 |     l.iter().cloned().enumerate().sort_by(|&(i,\
    \ v)| {\n  |                                   ^^^^^^^ method not found in `Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    let mut even_index = 0;\n    let mut odd_index = 0;\n\
    \    while even_index < even.len() {\n        if even[even_index] % 2 == 0 {\n\
    \            even[even_index] = even[even_index];\n            even_index += 1;\n\
    \        } else {\n            even[even_index] = even[even_index];\n        \
    \    even_index += 1;\n            odd.swap(odd_index, even_index);\n        \
    \    odd_index += 1;\n        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp6zm9vc9c.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp8fdj9a7u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        } else {\n\
    \            odd[i] = even[i];\n        }\n    }\n    even\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpf2cled2k.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_m\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmplwk_1zo6.rs:114:1\n    |\n\
    114 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        }\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp5ozmbj7y.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    let mut odd = even;\n    odd.swap(0, even.len());\n\
    \    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp9g1v7c04.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort_unstable();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n    }\n \
    \   for i in odd.iter_mut() {\n        *i ^= 1;\n        *i ^= 1;\n        *i\
    \ ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpz8hp6eyc.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).map(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            a\n        } else {\n          \
    \  b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpp7gjc9a_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp093k8gm9.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpq1037445.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    for i\
    \ in 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n\
    \        } else {\n            odd[i] = even[i];\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpw2ayptne.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpb5sj_2pi.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpc35lw2m3.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmp2c1kv81u.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            b.cmp(a)\n        } else {\n    \
    \        a.cmp(b)\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz28k0cyh.rs:9:5\n   |\n8\
    \  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n9  | /\
    \     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |    \
    \         b.cmp(a)\n12 | |         } else {\n13 | |             a.cmp(b)\n14 |\
    \ |         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpb_31aumh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpiman8dlh.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i] = odd[i\
    \ / 2];\n        }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp9xisr0kc.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even.iter_mut().cloned().for_each(|x| *x = *x\
    \ % 2);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpvsl6cqkc.rs:11:21\n     |\n11   |\
    \     even.iter_mut().cloned().for_each(|x| *x = *x % 2);\n     |            \
    \         ^^^^^^ types differ in mutability\n     |\n     = note:      expected\
    \ reference `&_`\n             found mutable reference `&mut isize`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct\
    \ `Cloned<std::slice::IterMut<'_, isize>>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpvsl6cqkc.rs:11:30\n    |\n11  |       even.iter_mut().cloned().for_each(|x|\
    \ *x = *x % 2);\n    |                                ^^^^^^^^ method cannot be\
    \ called on `Cloned<std::slice::IterMut<'_, isize>>` due to unsatisfied trait\
    \ bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `<std::slice::IterMut<'_, isize> as Iterator>::Item = &_`\n     \
    \       which is required by `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n            which\
    \ is required by `&mut Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp26mas1ip.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i / 2]\
    \ = odd[i];\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpsml6sqex.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    even.sort();\n    odd.sort();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(a,\
    \ b)| {\n        if *a % 2 == 0 {\n            *a = *b;\n        }\n    });\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp2ugerpvg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n\
    \    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n\
    \        *i += 1;\n    }\n    for i in even.iter_mut() {\n        *i -= 1;\n \
    \   }\n    for i in even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_mut()\
    \ {\n        *i -= 1;\n    }\n    for i in even.iter_mut() {\n        *i += 1;\n\
    \    }\n    for i in even.iter_mut() {\n        *i -= 1;\n    }\n    for i in\
    \ even.iter_mut() {\n        *i += 1;\n    }\n    for i in even.iter_m\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpckl4lxkd.rs:114:1\n    |\n\
    114 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut odd = even;\n    odd.swap(0, even.len());\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpnpye_9dn.rs:12:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     even.sort();\n\
    11 |     let mut odd = even;\n   |                   ---- value moved here\n12\
    \ |     odd.swap(0, even.len());\n   |                 ^^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n \
    \   even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = v;\n\
    \    });\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwqj2kmmr.rs:14:14\n   |\n\
    14 |         *w = v;\n   |         --   ^ expected `isize`, found `&mut isize`\n\
    \   |         |\n   |         expected due to the type of this binding\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         *w = *v;\n   |   \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 2;\n        *i ^= 4;\n        *i ^= 8;\n        *i ^= 16;\n       \
    \ *i ^= 32;\n        *i ^= 64;\n        *i ^= 128;\n        *i ^= 256;\n     \
    \   *i ^= 512;\n        *i ^= 1024;\n        *i ^= 2048;\n        *i ^= 4096;\n\
    \        *i ^= 8192;\n        *i ^= 16384;\n        *i ^= 32768;\n        *i ^=\
    \ 65536;\n        *i ^= 131072;\n        *i ^= 262144;\n        *i ^= 524288;\n\
    \        *i ^= 1048576;\n        *i ^= 2097152;\n        *i ^= 4194304;\n    \
    \    *i ^= 8388608;\n        *i ^= 16777216;\n        *i ^= 33554432;\n      \
    \  *i ^= 67108864;\n        *i ^= 134217728;\n        *i ^= 268435456;\n     \
    \   *i ^= 536870912;\n        *i ^= 1073741824;\n        *i ^= 2147483648;\n \
    \       *i ^= 4294967296;\n        *i ^= 8589934592;\n        *i ^= 17179869184;\n\
    \        *i ^= 34359738368;\n        *i ^= 68719476736;\n        *i ^= 137438953472;\n\
    \        *i ^= 274877906944;\n        *i ^= 549755813888;\n        *i ^= 1099511627776;\n\
    \        *i ^= 2199023255552;\n        *i ^= 4398046511104;\n        *i ^= 8796093022208;\n\
    \        *i ^= 1759218604448;\n        *i ^= 35184372088832;\n        *i ^= 70368744177664;\n\
    \        *i ^= 13466905235368;\n        *i ^= 281474976710656;\n        *i ^=\
    \ 562949953421312;\n        *i ^= 1125899906842624;\n        *i ^= 2251799813685248;\n\
    \        *i ^= 450\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpb1tgdloo.rs:72:3\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                           - unclosed delimiter\n...\n11 |     for i in even.iter_mut()\
    \ {\n   |                              - this delimiter might not be properly\
    \ closed...\n...\n65 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n72 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb1tgdloo.rs:8:32\n\
    \  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |    ---------      \
    \             ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().enumerate().filter_map(|(i, v)| {\n        if i % 2 ==\
    \ 0 {\n            Some(v)\n        } else {\n            None\n        }\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpwyszv8co.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().rev().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp2i2e555s.rs:11:32\n     |\n11   | \
    \    even.iter().cloned().rev().cloned().collect()\n     |                   \
    \             ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&&_`\n                found reference `&isize`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp2i2e555s.rs:11:41\n \
    \  |\n11 |       even.iter().cloned().rev().cloned().collect()\n   |         \
    \                                  ^^^^^^^ method cannot be called on `Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Rev<Cloned<std::slice::Iter<'_, isize>>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<Rev<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n\
    \            even[i] = even[i / 2];\n        } else {\n            odd[i] = odd[i\
    \ / 2];\n        }\n    }\n    even.sort();\n    odd.sort();\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmphmqw0tvl.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter().cloned().zip(even.iter().cloned()).map(|(a,\
    \ b)| {\n        if a % 2 == 0 {\n            a\n        } else {\n          \
    \  b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpjx2qxtko.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    for i in even.iter_mut() {\n        *i ^= 1;\n    \
    \    *i ^= 1;\n        *i ^= 1;\n        *i ^= 1;\n    }\n    for i in odd.iter_mut()\
    \ {\n        *i ^= 1;\n    }\n    even.extend(odd.iter().cloned());\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpcekiwzgv.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    odd.sort();\n    for i in 0..even.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = odd[i];\n        } else {\n\
    \            even[i] = even[i / 2];\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpe3h5w4sy.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpny_1sdcm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
