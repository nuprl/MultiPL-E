name: HumanEval_18_how_many_times
language: rust
results:
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring.chars()[pos] {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if found {\n            counter\
    \ += 1;\n        }\n        pos += 1;\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmppry231zn.rs:14:21\n\
    \   |\n14 |             if c == substring.chars()[pos] {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpjid4q6qj.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjid4q6qj.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut string_iter = string.char_indices();\n    let mut\
    \ substring_iter = substring.char_indices();\n    let mut char_iter = string_iter.clone();\n\
    \    let mut substring_iter = substring_iter.clone();\n    let mut char_iter =\
    \ char_iter.clone();\n    let mut substring_iter = substring_iter.clone();\n \
    \   while char_iter.any() || substring_iter.any() {\n        if char_iter.peek().unwrap()\
    \ == substring_iter.peek().unwrap() {\n            char_iter.next();\n       \
    \     substring_iter.next();\n            count += 1;\n        } else {\n    \
    \        char_iter.next();\n            substring_iter.next();\n            char_iter.peek().unwrap();\n\
    \            substring_iter.peek().unwrap();\n            count += 1;\n      \
    \  }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpj5qbr2ls.rs:16:21\n     |\n16   |     while char_iter.any() ||\
    \ substring_iter.any() {\n     |                     ^^^- supplied 0 arguments\n\
    \     |                     |\n     |                     expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpj5qbr2ls.rs:16:45\n\
    \     |\n16   |     while char_iter.any() || substring_iter.any() {\n     |  \
    \                                           ^^^- supplied 0 arguments\n     |\
    \                                             |\n     |                      \
    \                       expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `peek` found for struct `CharIndices`\
    \ in the current scope\n  --> /tmp/tmpj5qbr2ls.rs:17:22\n   |\n17 |         if\
    \ char_iter.peek().unwrap() == substring_iter.peek().unwrap() {\n   |        \
    \              ^^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]: no\
    \ method named `peek` found for struct `CharIndices` in the current scope\n  -->\
    \ /tmp/tmpj5qbr2ls.rs:17:56\n   |\n17 |         if char_iter.peek().unwrap() ==\
    \ substring_iter.peek().unwrap() {\n   |                                     \
    \                   ^^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]:\
    \ no method named `peek` found for struct `CharIndices` in the current scope\n\
    \  --> /tmp/tmpj5qbr2ls.rs:24:23\n   |\n24 |             char_iter.peek().unwrap();\n\
    \   |                       ^^^^ method not found in `CharIndices<'_>`\n\nerror[E0599]:\
    \ no method named `peek` found for struct `CharIndices` in the current scope\n\
    \  --> /tmp/tmpj5qbr2ls.rs:25:28\n   |\n25 |             substring_iter.peek().unwrap();\n\
    \   |                            ^^^^ method not found in `CharIndices<'_>`\n\n\
    error: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpmw2e58w8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.starts_with(substring, pos) {\n            count += 1;\n       \
    \ }\n        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpsy0uwtef.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpjdnkdou0.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjdnkdou0.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprykw3bhm.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpmsv5_pkx.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmsv5_pkx.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp9i18u_lz.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9i18u_lz.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp37d21s_c.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp37d21s_c.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpel9g5s5h.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnsx707kg.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpb1ie6ue0.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb1ie6ue0.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut index = string.find(substring);\n    while index\
    \ != String::npos {\n        counter += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    counter\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfvwizttr.rs:10:33\n     |\n10   |     let mut index = string.find(substring);\n\
    \     |                            ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                            |\n     |                 \
    \           required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing\
    \ here\n     |\n10   |     let mut index = string.find(&substring);\n     |  \
    \                               +\n\nerror[E0599]: no function or associated item\
    \ named `npos` found for struct `String` in the current scope\n  --> /tmp/tmpfvwizttr.rs:11:28\n\
    \   |\n11 |     while index != String::npos {\n   |                          \
    \  ^^^^ function or associated item not found in `String`\n\nerror[E0369]: cannot\
    \ add `{integer}` to `Option<usize>`\n  --> /tmp/tmpfvwizttr.rs:13:46\n   |\n\
    13 |         index = string.find(substring, index + 1);\n   |                \
    \                        ----- ^ - {integer}\n   |                           \
    \             |\n   |                                        Option<usize>\n\n\
    error[E0061]: this function takes 1 argument but 2 arguments were supplied\n \
    \   --> /tmp/tmpfvwizttr.rs:13:24\n     |\n13   |         index = string.find(substring,\
    \ index + 1);\n     |                        ^^^^ ---------  --------- supplied\
    \ 2 arguments\n     |                        |\n     |                       \
    \ expected 1 argument\n     |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmptlgiuopn.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptlgiuopn.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmplh5iw_7q.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmplh5iw_7q.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpq47mtsph.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpledagrah.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpledagrah.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpch028j2p.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp0yhbqj1f.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0yhbqj1f.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmppfj9s4gh.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppfj9s4gh.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpwodi9f9f.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp91qj4_xi.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpyj7v2mdx.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmptvwktap8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptvwktap8.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp7c08it8l.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9wfv659c.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpwnorxn_n.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpb0vloouk.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.chars().position(|c| c == substring[pos]).is_some() {\n        \
    \    count += 1;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe7x2bk23.rs:12:45\n\
    \   |\n12 |         if string.chars().position(|c| c == substring[pos]).is_some()\
    \ {\n   |                                             ^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string.starts_with(substring, i) {\n            i += substring.len();\n    \
    \        count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpjb72b98g.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ i) {\n     |                   ^^^^^^^^^^^ ---------  - supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpyrx_dslb.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmphr2tcwhu.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     if string.starts_with(substring, pos) {\n            counter += 1;\n   \
    \     }\n        pos += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp9gkg2244.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut index = string.find(substring, pos);\n        if index == String::npos\
    \ {\n            break;\n        }\n        pos = index + 1;\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpzyvc4wh_.rs:12:32\n     |\n12   |         let mut index = string.find(substring,\
    \ pos);\n     |                                ^^^^ ---------  --- supplied 2\
    \ arguments\n     |                                |\n     |                 \
    \               expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no function or associated item named `npos` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpzyvc4wh_.rs:13:29\n   |\n\
    13 |         if index == String::npos {\n   |                             ^^^^\
    \ function or associated item not found in `String`\n\nerror[E0369]: cannot add\
    \ `{integer}` to `Option<usize>`\n  --> /tmp/tmpzyvc4wh_.rs:16:21\n   |\n16 |\
    \         pos = index + 1;\n   |               ----- ^ - {integer}\n   |     \
    \          |\n   |               Option<usize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     if string.contains(substring, pos) {\n            counter += 1;\n      \
    \  }\n        pos += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpeqsemj8_.rs:12:19\n     |\n12   |         if string.contains(substring,\
    \ pos) {\n     |                   ^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2qmj5u19.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpfr797028.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfr797028.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for c in string.chars() {\n          \
    \  if c == substring[index] {\n                found = true;\n               \
    \ break;\n            }\n        }\n        if found {\n            count += 1;\n\
    \        }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprvj4qoau.rs:14:21\n\
    \   |\n14 |             if c == substring[index] {\n   |                     ^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmps960sxkm.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmps960sxkm.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsnt9sp3p.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4p325hj4.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmps_6wfism.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut i = string.find(substring, pos);\n        if i == String::npos {\n\
    \            break;\n        }\n        pos = i + 1;\n        count += 1;\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmplnncdm5l.rs:12:28\n     |\n12   |         let mut i = string.find(substring,\
    \ pos);\n     |                            ^^^^ ---------  --- supplied 2 arguments\n\
    \     |                            |\n     |                            expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no function or associated item named `npos` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmplnncdm5l.rs:13:25\n   |\n13 |         if i == String::npos\
    \ {\n   |                         ^^^^ function or associated item not found in\
    \ `String`\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmplnncdm5l.rs:16:17\n\
    \   |\n16 |         pos = i + 1;\n   |               - ^ - {integer}\n   |   \
    \            |\n   |               Option<usize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp7j1m6ghw.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7j1m6ghw.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3eevcl5u.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpp_2v5_9i.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpp_2v5_9i.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpzp3tr1v0.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzp3tr1v0.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp5bks8cey.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpe6x8uv23.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     if string.starts_with(substring, pos) {\n            counter += 1;\n   \
    \     }\n        pos += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpf7ogjpcf.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp5d6xjv9m.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring.chars()[pos] {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if found {\n            count +=\
    \ 1;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpgitflwqt.rs:14:21\n\
    \   |\n14 |             if c == substring.chars()[pos] {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpd9uooba6.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd9uooba6.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = string.find(substring);\n    while i != String::npos\
    \ {\n        count += 1;\n        i = string.find(substring, i + 1);\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgk56tvij.rs:10:29\n     |\n10   |     let mut i = string.find(substring);\n\
    \     |                        ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing here\n\
    \     |\n10   |     let mut i = string.find(&substring);\n     |             \
    \                +\n\nerror[E0599]: no function or associated item named `npos`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpgk56tvij.rs:11:24\n\
    \   |\n11 |     while i != String::npos {\n   |                        ^^^^ function\
    \ or associated item not found in `String`\n\nerror[E0369]: cannot add `{integer}`\
    \ to `Option<usize>`\n  --> /tmp/tmpgk56tvij.rs:13:38\n   |\n13 |         i =\
    \ string.find(substring, i + 1);\n   |                                    - ^\
    \ - {integer}\n   |                                    |\n   |               \
    \                     Option<usize>\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmpgk56tvij.rs:13:20\n     |\n13\
    \   |         i = string.find(substring, i + 1);\n     |                    ^^^^\
    \ ---------  ----- supplied 2 arguments\n     |                    |\n     | \
    \                   expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0277, E0369, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4tg3eb56.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxi0nitvg.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwxx163re.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpk0hav96p.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk0hav96p.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpnp8w8b6f.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnp8w8b6f.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpkga7t20p.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpunk8ofgg.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdyl2t8gr.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpfft0yfd8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpg3vwj41z.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpg3vwj41z.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpnqnx5u2i.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpn8ej2_to.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpn8ej2_to.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppf5ii1gj.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.contains(substring, pos) {\n            count += 1;\n        }\n\
    \        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpfnfoou7t.rs:12:19\n     |\n12   |         if string.contains(substring,\
    \ pos) {\n     |                   ^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpu3noigym.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpu3noigym.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpy20drjd1.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcsb6m1cu.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.contains(substring, pos) {\n            count += 1;\n        }\n\
    \        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp48551_bh.rs:12:19\n     |\n12   |         if string.contains(substring,\
    \ pos) {\n     |                   ^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpw_9fofxc.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmprdopodje.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprdopodje.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp1_fgyxbk.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpxncczt8m.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpidx017l_.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpidx017l_.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuxk1cc_7.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxtn0idvj.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpj3hu0rd_.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring[pos] {\n                count += 1;\n                found =\
    \ true;\n                break;\n            }\n        }\n        if !found {\n\
    \            break;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpcvkm5p9g.rs:14:21\n\
    \   |\n14 |             if c == substring[pos] {\n   |                     ^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpxgofpyym.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpxgofpyym.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp1r0cc2n8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1r0cc2n8.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpzgoej0b5.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzgoej0b5.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpevjq24y5.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmptzfram4n.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptzfram4n.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqsn5vfm5.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpi4gsnlvx.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi4gsnlvx.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmphumob7p5.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmprx7ql53c.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprx7ql53c.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp4kqy5nm4.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpj1n1pe1a.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj1n1pe1a.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp4pkjkllp.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4pkjkllp.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpvk1qkzrm.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvk1qkzrm.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpfdd2yrhz.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpicab_sla.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpff29fode.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpfkme0211.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt6n9qv0i.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp55jgv_f9.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp55jgv_f9.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut end = string.len();\n        if end > pos {\n            end = pos;\n\
    \        }\n        if string.contains(substring, pos) {\n            count +=\
    \ 1;\n            pos += 1;\n        }\n        pos = end;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpzsks0z4m.rs:16:19\n     |\n16   |         if string.contains(substring,\
    \ pos) {\n     |                   ^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.contains(substring, pos) {\n            count += 1;\n        }\n\
    \        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpr5ut22ln.rs:12:19\n     |\n12   |         if string.contains(substring,\
    \ pos) {\n     |                   ^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut end = string.len();\n        while end > pos && string[end - 1] ==\
    \ substring[end - 1] {\n            end -= 1;\n        }\n        if end > pos\
    \ {\n            count += 1;\n            pos = end;\n        } else {\n     \
    \       pos = end;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmphwc_5xdw.rs:13:28\n\
    \   |\n13 |         while end > pos && string[end - 1] == substring[end - 1] {\n\
    \   |                            ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmphwc_5xdw.rs:13:47\n   |\n13 |         while end > pos && string[end\
    \ - 1] == substring[end - 1] {\n   |                                         \
    \      ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.starts_with(substring, pos) {\n            count += 1;\n       \
    \ }\n        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp16ehtudy.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let index = string.find(substring, index);\n        if index == Some(string::npos)\
    \ {\n            break;\n        }\n        count += 1;\n        index = index\
    \ + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `string`\n\
    \  --> /tmp/tmp7vgo_uav.rs:13:26\n   |\n13 |         if index == Some(string::npos)\
    \ {\n   |                          ^^^^^^ use of undeclared crate or module `string`\n\
    \nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp7vgo_uav.rs:12:28\n     |\n12   |         let index = string.find(substring,\
    \ index);\n     |                            ^^^^ ---------  ----- supplied 2\
    \ arguments\n     |                            |\n     |                     \
    \       expected 1 argument\n     |\nnote: associated function defined here\n\n\
    error[E0369]: cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmp7vgo_uav.rs:17:23\n\
    \   |\n17 |         index = index + 1;\n   |                 ----- ^ - {integer}\n\
    \   |                 |\n   |                 Option<usize>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0369,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpd_ohbc89.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpd_ohbc89.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpi4d2_vxn.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpfkfsxyf8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfkfsxyf8.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp_ojyfm9r.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ojyfm9r.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp_287kn_y.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_287kn_y.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut end = string.len();\n        if end > pos {\n            end = pos;\n\
    \        }\n        if string.contains(substring, start, end) {\n            count\
    \ += 1;\n        }\n        pos = end;\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found built-in attribute `start`\n  --> /tmp/tmpi33aq1jj.rs:16:39\n\
    \   |\n16 |         if string.contains(substring, start, end) {\n   |        \
    \                               ^^^^^ not a value\n\nerror[E0061]: this function\
    \ takes 1 argument but 3 arguments were supplied\n    --> /tmp/tmpi33aq1jj.rs:16:19\n\
    \     |\n16   |         if string.contains(substring, start, end) {\n     |  \
    \                 ^^^^^^^^ ---------  -----  --- supplied 3 arguments\n     |\
    \                   |\n     |                   expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0423.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp9be8xgls.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9be8xgls.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpg1_hixna.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpg1_hixna.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring[pos] {\n                count += 1;\n                found =\
    \ true;\n                break;\n            }\n        }\n        if !found {\n\
    \            break;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp2a7nm1e9.rs:14:21\n\
    \   |\n14 |             if c == substring[pos] {\n   |                     ^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjb4vsghg.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4r13rctd.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpzl49qtkq.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzl49qtkq.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut end = string.len();\n        if end > pos {\n            end = pos;\n\
    \        }\n        let mut sub = string.char_indices()\n            .filter_map(|i|\
    \ i.ok())\n            .take_while(|&i| i <= end)\n            .find(|&i| i ==\
    \ pos)\n            .map(|i| i)\n            .unwrap_or(-1);\n        if sub ==\
    \ -1 {\n            break;\n        }\n        if string.chars().take_while(|&c|\
    \ c != sub).count() == 1 {\n            count += 1;\n        }\n        pos =\
    \ sub + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ok` found for tuple `(usize, char)` in the\
    \ current scope\n  --> /tmp/tmpr695f5kl.rs:17:31\n   |\n17 |             .filter_map(|i|\
    \ i.ok())\n   |                               ^^ method not found in `(usize,\
    \ char)`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  -->\
    \ /tmp/tmpr695f5kl.rs:21:24\n   |\n21 |             .unwrap_or(-1);\n   |    \
    \                    ^^ the trait `Neg` is not implemented for `usize`\n   |\n\
    \   = help: the following other types implement trait `Neg`:\n             &f32\n\
    \             &f64\n             &i128\n             &i16\n             &i32\n\
    \             &i64\n             &i8\n             &isize\n           and 8 others\n\
    \nerror[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpr695f5kl.rs:22:19\n\
    \   |\n22 |         if sub == -1 {\n   |                   ^^\n   |          \
    \         |\n   |                   cannot apply unary operator `-`\n   |    \
    \               help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr695f5kl.rs:25:48\n   |\n25 |         if string.chars().take_while(|&c|\
    \ c != sub).count() == 1 {\n   |                                             \
    \   ^^^ expected `char`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599, E0600.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp183ir642.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpa88mz4mq.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpa88mz4mq.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp50t4xps1.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpj3ywyeiv.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj3ywyeiv.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp0iiah2h6.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0iiah2h6.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpegovycc8.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpzmu_oezu.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzmu_oezu.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpc3vg2ak4.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpc3vg2ak4.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    for c in string.chars() {\n        if c == substring {\n\
    \            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz4qgxkb0.rs:11:17\n   |\n\
    11 |         if c == substring {\n   |                 ^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpj0t_pga2.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj0t_pga2.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpk9_0t2hn.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk9_0t2hn.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmprq2o317m.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprq2o317m.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring[pos] {\n                count += 1;\n                found =\
    \ true;\n                break;\n            }\n        }\n        if !found {\n\
    \            break;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqyhxs1zk.rs:14:21\n\
    \   |\n14 |             if c == substring[pos] {\n   |                     ^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpm48wgjnb.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut found = string.find(substring, pos);\n        if found == String::npos\
    \ {\n            count += 1;\n            pos = string.len();\n        } else\
    \ {\n            count += found - pos;\n            pos = found + 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp67e2h7bl.rs:12:32\n     |\n12   |         let mut found = string.find(substring,\
    \ pos);\n     |                                ^^^^ ---------  --- supplied 2\
    \ arguments\n     |                                |\n     |                 \
    \               expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no function or associated item named `npos` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmp67e2h7bl.rs:13:29\n   |\n\
    13 |         if found == String::npos {\n   |                             ^^^^\
    \ function or associated item not found in `String`\n\nerror[E0369]: cannot subtract\
    \ `usize` from `Option<usize>`\n  --> /tmp/tmp67e2h7bl.rs:17:28\n   |\n17 |  \
    \           count += found - pos;\n   |                      ----- ^ --- usize\n\
    \   |                      |\n   |                      Option<usize>\n\nerror[E0369]:\
    \ cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmp67e2h7bl.rs:18:25\n\
    \   |\n18 |             pos = found + 1;\n   |                   ----- ^ - {integer}\n\
    \   |                   |\n   |                   Option<usize>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp3099wh__.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3099wh__.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.starts_with(substring, pos) {\n            count += 1;\n       \
    \ }\n        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpwujhmwso.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpmhk9l03c.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string.starts_with(substring, i) {\n            i += substring.len();\n    \
    \        count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpugmly6zk.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ i) {\n     |                   ^^^^^^^^^^^ ---------  - supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.starts_with(substring, pos) {\n            count += 1;\n       \
    \ }\n        pos += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp6ql6kxwt.rs:12:19\n     |\n12   |         if string.starts_with(substring,\
    \ pos) {\n     |                   ^^^^^^^^^^^ ---------  --- supplied 2 arguments\n\
    \     |                   |\n     |                   expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.chars().position(|c| c == substring[pos]).is_some() {\n        \
    \    count += 1;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd99xxbbq.rs:12:45\n\
    \   |\n12 |         if string.chars().position(|c| c == substring[pos]).is_some()\
    \ {\n   |                                             ^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp1wn38vme.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1wn38vme.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpwryu6p4j.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwryu6p4j.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     let mut found = string.find(substring, pos);\n        if found == String::npos\
    \ {\n            break;\n        }\n        counter += 1;\n        pos = found\
    \ + 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpaslrg1f7.rs:12:32\n     |\n12   |         let mut found = string.find(substring,\
    \ pos);\n     |                                ^^^^ ---------  --- supplied 2\
    \ arguments\n     |                                |\n     |                 \
    \               expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0599]: no function or associated item named `npos` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpaslrg1f7.rs:13:29\n   |\n\
    13 |         if found == String::npos {\n   |                             ^^^^\
    \ function or associated item not found in `String`\n\nerror[E0369]: cannot add\
    \ `{integer}` to `Option<usize>`\n  --> /tmp/tmpaslrg1f7.rs:17:21\n   |\n17 |\
    \         pos = found + 1;\n   |               ----- ^ - {integer}\n   |     \
    \          |\n   |               Option<usize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp777kriah.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpl24qjqlu.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpl24qjqlu.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp4bew26yz.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmptqaxpbre.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut end = string.find(substring, pos);\n        if end == String::npos\
    \ {\n            end = string.len();\n        }\n        count += 1;\n       \
    \ pos = end + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpreg9vqet.rs:12:30\n     |\n12   |         let mut end = string.find(substring,\
    \ pos);\n     |                              ^^^^ ---------  --- supplied 2 arguments\n\
    \     |                              |\n     |                              expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no function or associated item named `npos` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpreg9vqet.rs:13:27\n   |\n13 |         if end ==\
    \ String::npos {\n   |                           ^^^^ function or associated item\
    \ not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpreg9vqet.rs:14:19\n\
    \   |\n12 |         let mut end = string.find(substring, pos);\n   |         \
    \              --------------------------- expected due to this value\n13 |  \
    \       if end == String::npos {\n14 |             end = string.len();\n   | \
    \                  ^^^^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n\
    \   = note: expected enum `Option<usize>`\n              found type `usize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             end = Some(string.len());\n\
    \   |                   +++++            +\n\nerror[E0369]: cannot add `{integer}`\
    \ to `Option<usize>`\n  --> /tmp/tmpreg9vqet.rs:17:19\n   |\n17 |         pos\
    \ = end + 1;\n   |               --- ^ - {integer}\n   |               |\n   |\
    \               Option<usize>\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0308, E0369, E0599.\nFor more\
    \ information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpninu8pk4.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp0bh8bg46.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0bh8bg46.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpp2rnm3x_.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpc9whaqx2.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvfbctdk.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm8g0v00k.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpb2aq4gh5.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb2aq4gh5.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpo689_k8q.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo689_k8q.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut i = string.find(substring, pos);\n        if i == String::npos {\n\
    \            break;\n        }\n        pos = i + 1;\n        count += 1;\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpeigpy5hc.rs:12:28\n     |\n12   |         let mut i = string.find(substring,\
    \ pos);\n     |                            ^^^^ ---------  --- supplied 2 arguments\n\
    \     |                            |\n     |                            expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no function or associated item named `npos` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpeigpy5hc.rs:13:25\n   |\n13 |         if i == String::npos\
    \ {\n   |                         ^^^^ function or associated item not found in\
    \ `String`\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmpeigpy5hc.rs:16:17\n\
    \   |\n16 |         pos = i + 1;\n   |               - ^ - {integer}\n   |   \
    \            |\n   |               Option<usize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpwjgkzn97.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpwjgkzn97.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpp8akkbqs.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcolwsx9b.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpxqphbotc.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb5gkl_zr.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpcm2uhj2z.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpli8rkza2.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpli8rkza2.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpyp7n6j8g.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpyp7n6j8g.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2d2p2uyt.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpzkozvr1v.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzkozvr1v.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut index = string.find(substring);\n    while index\
    \ != String::npos {\n        counter += 1;\n        index = string.find(substring,\
    \ index + 1);\n    }\n    counter\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpo48_qk6b.rs:10:33\n     |\n10   |     let mut index = string.find(substring);\n\
    \     |                            ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                            |\n     |                 \
    \           required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing\
    \ here\n     |\n10   |     let mut index = string.find(&substring);\n     |  \
    \                               +\n\nerror[E0599]: no function or associated item\
    \ named `npos` found for struct `String` in the current scope\n  --> /tmp/tmpo48_qk6b.rs:11:28\n\
    \   |\n11 |     while index != String::npos {\n   |                          \
    \  ^^^^ function or associated item not found in `String`\n\nerror[E0369]: cannot\
    \ add `{integer}` to `Option<usize>`\n  --> /tmp/tmpo48_qk6b.rs:13:46\n   |\n\
    13 |         index = string.find(substring, index + 1);\n   |                \
    \                        ----- ^ - {integer}\n   |                           \
    \             |\n   |                                        Option<usize>\n\n\
    error[E0061]: this function takes 1 argument but 2 arguments were supplied\n \
    \   --> /tmp/tmpo48_qk6b.rs:13:24\n     |\n13   |         index = string.find(substring,\
    \ index + 1);\n     |                        ^^^^ ---------  --------- supplied\
    \ 2 arguments\n     |                        |\n     |                       \
    \ expected 1 argument\n     |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpthrdky1j.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpthrdky1j.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmptxpmenin.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   let mut i = string.find(substring, pos);\n        if i == String::npos {\n\
    \            break;\n        }\n        pos = i + 1;\n        count += 1;\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpwps3qufz.rs:12:28\n     |\n12   |         let mut i = string.find(substring,\
    \ pos);\n     |                            ^^^^ ---------  --- supplied 2 arguments\n\
    \     |                            |\n     |                            expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no function or associated item named `npos` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpwps3qufz.rs:13:25\n   |\n13 |         if i == String::npos\
    \ {\n   |                         ^^^^ function or associated item not found in\
    \ `String`\n\nerror[E0369]: cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmpwps3qufz.rs:16:17\n\
    \   |\n16 |         pos = i + 1;\n   |               - ^ - {integer}\n   |   \
    \            |\n   |               Option<usize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyx2cb3_i.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5345os8q.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpw_bl0usj.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpw_bl0usj.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp9bdhues2.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp55bahbs6.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp55bahbs6.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1uj9zuj1.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp4f1p7fbk.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4f1p7fbk.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.contains(&substring[..]) {\n            count += 1;\n          \
    \  pos += substring.len();\n        } else {\n            pos += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmps59a2dj0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpsri0swzo.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpsri0swzo.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp9vuz63d3.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9vuz63d3.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    for c in string.chars() {\n        if c == substring.chars()\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpln_9r758.rs:11:17\n   |\n\
    11 |         if c == substring.chars() {\n   |                 ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `Chars`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count()\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyco32qfo.rs:9:5\n  |\n8 |\
    \ fn how_many_times(string: String, substring: String) -> isize {\n  |       \
    \                                                  ----- expected `isize` because\
    \ of return type\n9 |     string.chars().zip(substring.chars()).filter(|(a, b)|\
    \ a == b).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     string.chars().zip(substring.chars()).filter(|(a,\
    \ b)| a == b).count().try_into().unwrap()\n  |                               \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut counter = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n   \
    \     let mut found = false;\n        for c in string.chars() {\n            if\
    \ c == substring.chars().nth(pos) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if found {\n            counter\
    \ += 1;\n        }\n        pos += 1;\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz8ix7zby.rs:14:21\n   |\n\
    14 |             if c == substring.chars().nth(pos) {\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n   |\n  \
    \ = note: expected type `char`\n              found enum `Option<char>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp_3w5nzr_.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_3w5nzr_.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpy_9sivfw.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpy_9sivfw.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp_dlq6ub2.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_dlq6ub2.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpc4u1o38o.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpc4u1o38o.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpkoat8dpd.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpkoat8dpd.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpbxikx1cd.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if string.chars().position(|c| c == substring[pos]).is_some() {\n        \
    \    count += 1;\n        }\n        pos += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpeqrq2aq_.rs:12:45\n\
    \   |\n12 |         if string.chars().position(|c| c == substring[pos]).is_some()\
    \ {\n   |                                             ^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmplne3z9bl.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmplne3z9bl.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmptk6t4wkz.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp1wyzs4jx.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1wyzs4jx.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmp9kznefok.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9kznefok.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpl0uvg52u.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpl0uvg52u.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() as isize\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpqq2bix77.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() as isize\n  |\
    \                                 ^^ no implementation for `&char == String`\n\
    \  |\n  = help: the trait `PartialEq<String>` is not implemented for `&char`\n\
    \  = help: the trait `PartialEq` is implemented for `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut string_iter = string.char_indices();\n    let mut\
    \ substring_iter = substring.char_indices();\n    let mut substring_end = substring_iter.end();\n\
    \    while let Some((substring_start, substring_end)) = substring_iter.next()\
    \ {\n        if substring_start < substring_end {\n            count += substring_end\
    \ - substring_start;\n        }\n    }\n    count += substring_end - substring_iter.end();\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `end` found for struct `CharIndices` in the\
    \ current scope\n  --> /tmp/tmp1vjb_8u7.rs:12:44\n   |\n12 |     let mut substring_end\
    \ = substring_iter.end();\n   |                                            ^^^\
    \ method not found in `CharIndices<'_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1vjb_8u7.rs:14:30\n   |\n14 |         if substring_start < substring_end\
    \ {\n   |                              ^^^^^^^^^^^^^ expected `usize`, found `char`\n\
    \nerror[E0369]: cannot subtract `usize` from `char`\n  --> /tmp/tmp1vjb_8u7.rs:15:36\n\
    \   |\n15 |             count += substring_end - substring_start;\n   |      \
    \                ------------- ^ --------------- usize\n   |                 \
    \     |\n   |                      char\n\nerror[E0599]: no method named `end`\
    \ found for struct `CharIndices` in the current scope\n  --> /tmp/tmp1vjb_8u7.rs:18:45\n\
    \   |\n18 |     count += substring_end - substring_iter.end();\n   |         \
    \                                    ^^^ method not found in `CharIndices<'_>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpngdcj1pf.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpngdcj1pf.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    string.chars().filter(|c|\
    \ c == substring).count() + 1\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `String`\n --> /tmp/tmpsb01zus_.rs:9:33\n\
    \  |\n9 |     string.chars().filter(|c| c == substring).count() + 1\n  |     \
    \                            ^^ no implementation for `&char == String`\n  |\n\
    \  = help: the trait `PartialEq<String>` is not implemented for `&char`\n  = help:\
    \ the trait `PartialEq` is implemented for `char`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpsb01zus_.rs:9:5\n  |\n8 | fn how_many_times(string: String,\
    \ substring: String) -> isize {\n  |                                         \
    \                ----- expected `isize` because of return type\n9 |     string.chars().filter(|c|\
    \ c == substring).count() + 1\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     (string.chars().filter(|c|\
    \ c == substring).count() + 1).try_into().unwrap()\n  |     +                \
    \                                     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
