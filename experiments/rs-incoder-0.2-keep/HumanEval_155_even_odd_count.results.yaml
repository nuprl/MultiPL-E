name: HumanEval_155_even_odd_count
language: rust
results:
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmp093eb2k6.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp093eb2k6.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpftab1tho.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp4bhs961d.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp4bhs961d.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgig4jjeh.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmptf774b8l.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpqxm_wj28.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpjmict06u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpwqqslibe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpi88978sd.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num.len();\n\
    \    while num_digits > 0 {\n        let digit = num % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n        num_digits -= 1;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp21gk7llp.rs:8:30\n  |\n8 |     let mut num_digits = num.len();\n\
    \  |                              ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpn2x097nd.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpc_p08qen.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpjdayo4u6.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp5gxqz0yu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmps907u30q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpquijrjpf.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num.len();\n\
    \    while num_digits > 0 {\n        let digit = num % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num = num / 10;\n        num_digits -= 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpv6bpgc73.rs:8:30\n  |\n8 |     let mut num_digits = num.len();\n\
    \  |                              ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num.to_digits();\n\
    \    while let Some(digit) = digits.next() {\n        if digit % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp3rwfoafy.rs:8:26\n  |\n8 |     let mut digits =\
    \ num.to_digits();\n  |                          ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppo7mfyg4.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpjfi7xqy_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num.to_digits();\n\
    \    while let Some(digit) = digits.next() {\n        if digit % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpw62r64ua.rs:8:26\n  |\n8 |     let mut digits =\
    \ num.to_digits();\n  |                          ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp7pw1wpv1.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp7pw1wpv1.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        num = num / 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp71cthhnn.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n \
    \   while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n        digit /= 10;\n   \
    \ }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpbu5xdcss.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp7f55ggnk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpc85k7mlj.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp7coxc3wd.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp7coxc3wd.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        num = num / 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpjkyfqeme.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpppjdcitv.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpppjdcitv.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n \
    \   while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 == 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpaful581r.rs:11:14\n\
    \   |\n11 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpaful581r.rs:12:13\n   |\n12 |         odd += digit % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpfkza07az.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpf0bo_3jw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n            num /= 2;\n        }\
    \ else {\n            odd += 1;\n            num /= 2;\n        }\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpaujy9m43.rs:11:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \             num /= 2;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpaujy9m43.rs:14:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \             num /= 2;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp56gianz8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpu2zzfp7u.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpxapf_s39.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        num = num / 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpl4maggr8.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpjfi_fymg.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpjfi_fymg.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpdx53jr5v.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_9h7fude.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvpetsrsr.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        }\n        else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpe7746_f8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp5olzu26u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        if digits % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmp63qi5olx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp5rps89y1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmplqb_jx8a.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        if digits % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmpxr3ios3w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmpukriu57p.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpukriu57p.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n \
    \   while digit > 0 {\n        if digit % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n        digit /= 10;\n   \
    \ }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp2rlybfhq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpu_pdnpmb.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_str = num.to_string();\n\
    \    while num_str.len() > 0 {\n        let digit = num_str.pop().unwrap();\n\
    \        if digit == '0' {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(1, 1)`', /tmp/tmpxicmr462.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpo6h5pgvo.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmptqki7jpw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp9l3fzo9e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmphpir202b.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpw9lonrea.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpy67ne1sw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp61kye327.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num: isize = num;\n\
    \    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n    \
    \    } else {\n            odd += 1;\n        }\n        num = num / 2;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmp3rr5lmwg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num.len();\n\
    \    while num_digits > 0 {\n        let digit = num % 10;\n        num = num\
    \ / 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits -= 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp4hudy5nt.rs:8:30\n  |\n8 |     let mut num_digits = num.len();\n\
    \  |                              ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp13qd47u3.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp7er1ij3k.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpwaphp7g_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4qolj24v.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpe751tut3.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpj4_78gze.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpagws0vcl.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        even += digit as isize;\n        odd += digit as isize;\n   \
    \     num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmpn4ubg3r7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even = num % 10;\n        odd = num % 10;\n        num = num / 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpwvk9gb_2.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp14ik9lbg.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpr6nf2vmp.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvx80bbkm.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp2g081jvf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n    \
    \        odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpj72ohxu1.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpl3q933il.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpwhtgqrs3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0d9b751i.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut nums = num.to_string();\n\
    \    while nums.len() > 0 {\n        let digit = nums.chars().next().unwrap();\n\
    \        if digit == '0' {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        nums = nums.chars().skip(1).collect();\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(1, 1)`', /tmp/tmpiyfvrbj_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpwua03_d7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        if digits % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmp2dt7w8m0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmp6vf7vlt6.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp6vf7vlt6.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp9f5nfk0k.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp9f5nfk0k.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp5rfb1h9i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp7kmlbo0_.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \      num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmptk53cj9f.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmptk53cj9f.rs:16:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num.to_digits();\n\
    \    while let Some(digit) = digits.next() {\n        if digit % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmprzyka0sn.rs:8:26\n  |\n8 |     let mut digits =\
    \ num.to_digits();\n  |                          ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp71bd_y5r.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp1_mod6nr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp_3i5sl8l.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp_3i5sl8l.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpz1mn90f_.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmph7s0cr4u.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmph7s0cr4u.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        digits /= 10;\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnnou_qia.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpy_ad6qbu.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpy6zc02tu.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpperxaiga.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpge0en56x.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpa4ikk7oz.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpsdt6g222.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpcfx6f9p4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even = num % 10;\n        odd = even + odd;\n        num /= 10;\n    }\n  \
    \  (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp3ofbdk6e.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n    \
    \        odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpjqdjv3hf.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpqtz97n5e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpl3sxeizb.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpl3sxeizb.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n    \
    \        odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp05oz7sqn.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp_qwt63us.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp_qwt63us.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmp2i99d0lt.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp2i99d0lt.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpmc19qt0h.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpntljv7xb.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpen3gbfrw.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpen3gbfrw.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp5oyy96fg.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp5oyy96fg.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        even += num_digits % 2 == 0;\n        odd\
    \ += num_digits % 2 != 0;\n        num_digits /= 2;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpy9chgowk.rs:10:14\n\
    \   |\n10 |         even += num_digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpy9chgowk.rs:11:13\n   |\n11 |         odd += num_digits % 2 !=\
    \ 0;\n   |             ^^ no implementation for `{integer} += bool`\n   |\n  \
    \ = help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n   =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \     <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n            \
    \ <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even = num % 10;\n        odd = num % 10;\n        num = num / 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp50v8zgp0.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvveusygz.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpz29_835y.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnbm3z6dp.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpqjt5rolf.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmps2fu1bda.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpuagqu6k8.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppzez3txw.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmponbto1c7.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpunexvkfw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmps1hpfto2.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmps1hpfto2.rs:13:13\n   |\n13 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpftix3ay7.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_yxyvzx3.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp9ci_bs50.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpunqi9wuw.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpf5tc11wd.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpr2qpl2jd.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpr2qpl2jd.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        num = num / 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnw9wb78g.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpqkhvedux.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpqkhvedux.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmpxh_4fz6c.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpxh_4fz6c.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num.len();\n\
    \    while num_digits > 0 {\n        let digit = num % 10;\n        num = num\
    \ / 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits -= 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp72_ss57c.rs:8:30\n  |\n8 |     let mut num_digits = num.len();\n\
    \  |                              ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even = num % 10;\n        odd = odd + (even % 2 == 0);\n        num = num /\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `bool` to `{integer}`\n  --> /tmp/tmpz6onxwvl.rs:10:19\n\
    \   |\n10 |         odd = odd + (even % 2 == 0);\n   |                   ^ no\
    \ implementation for `{integer} + bool`\n   |\n   = help: the trait `Add<bool>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpjvaqay9d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmplqiz8p_l.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmplqiz8p_l.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpsfe2ev6v.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpsfe2ev6v.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp_dpx2d3f.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp_dpx2d3f.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_str = num.to_string();\n\
    \    while num_str.len() > 0 {\n        let digit = num_str[0];\n        if digit\
    \ == '0' {\n            even += 1;\n            num_str = &num_str[1..];\n   \
    \     } else {\n            odd += 1;\n            num_str = &num_str[1..];\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp91dkc5p9.rs:10:21\n   |\n10 |         let digit = num_str[0];\n   |\
    \                     ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n \
    \  |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91dkc5p9.rs:13:23\n\
    \   |\n8  |     let mut num_str = num.to_string();\n   |                     \
    \  --------------- expected due to this value\n...\n13 |             num_str =\
    \ &num_str[1..];\n   |                       ^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n13 |        \
    \     num_str = (&num_str[1..]).to_string();\n   |                       +   \
    \          +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91dkc5p9.rs:16:23\n\
    \   |\n8  |     let mut num_str = num.to_string();\n   |                     \
    \  --------------- expected due to this value\n...\n16 |             num_str =\
    \ &num_str[1..];\n   |                       ^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n16 |        \
    \     num_str = (&num_str[1..]).to_string();\n   |                       +   \
    \          +++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpgcfqcqsq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpeowe1oi6.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpq8_b2lhu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpnp8n4lp5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpdryx61zj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_digits = num;\n\
    \    while num_digits > 0 {\n        let digit = num_digits % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpblwf4tyn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpwor6cw58.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpwor6cw58.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp15ngb_2b.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnc70g2a0.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmp_qycisyb.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmp_qycisyb.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even = num % 10;\n        odd = num % 10;\n        num = num / 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpn6u0tanx.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_gksie_b.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpj03jkzxr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpujplp77u.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp7anr1h4_.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        digits /= 10;\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp2408c42n.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpz0whglp2.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpz0whglp2.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp2_o683bg.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp81jnou0v.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnzncxx0h.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ let mut num_digits = num;\n    while num_digits > 0 {\n        digit = num_digits\
    \ % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num_digits /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpynwntv5c.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpfu6aw7uh.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        if digit % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \      num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmp0vuhpe7p.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp0vuhpe7p.rs:16:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmpxh692o5c.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpxh692o5c.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmps8ry4aij.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_v0i3hcz.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpbunpkxfv.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmph51n733h.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmph51n733h.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpez2tkvkq.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp7rfxz4ay.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpnazwn2p5.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpnazwn2p5.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpdu87wb_4.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpgiegxe3m.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpgiegxe3m.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        odd += digits % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmprcf3qt52.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmprcf3qt52.rs:12:13\n   |\n12 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 != 0;\n        num /= 2;\n  \
    \  }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpupx08x4o.rs:9:14\n\
    \  |\n9 |         even += num % 2 == 0;\n  |              ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `bool` to `{integer}`\n  --> /tmp/tmpupx08x4o.rs:10:13\n   |\n10\
    \ |         odd += num % 2 != 0;\n   |             ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmpftgeqk2v.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpftgeqk2v.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        }\n        else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp4_d7phk_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmptwyoil8i.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpaxt5a07j.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp2aw30qed.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpty1pwf84.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpzpkdxvrz.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpuu9rx02r.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpx5c1mw6v.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n \
    \   while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpzgt801wa.rs:11:14\n\
    \   |\n11 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpzgt801wa.rs:12:13\n   |\n12 |         odd += digit % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp5qi4_opv.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num.to_digits();\n\
    \    while !digits.is_empty() {\n        let digit = digits.remove(0).unwrap();\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp63enkhc6.rs:8:26\n  |\n8 |     let mut digits =\
    \ num.to_digits();\n  |                          ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpjch3othc.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpjch3othc.rs:13:13\n   |\n13 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmprlzds8nk.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpwzbkhnbe.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpodl6t9ko.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpu6ng8hon.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpkmi4pu87.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n            num /= 2;\n        }\
    \ else {\n            odd += 1;\n            num /= 2;\n        }\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmplf355lz7.rs:11:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \             num /= 2;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmplf355lz7.rs:14:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \             num /= 2;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        digits /= 10;\n        even += digits % 2 ==\
    \ 0;\n        digits /= 10;\n        odd += digits % 2 == 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmptqxclup0.rs:11:14\n\
    \   |\n11 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmptqxclup0.rs:13:13\n   |\n13 |         odd += digits % 2 == 1;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ while num > 0 {\n        digit = num % 10;\n        num = num / 10;\n      \
    \  if digit % 2 == 0 {\n            even += 1;\n        } else {\n           \
    \ odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `digit` is never read\n --> /tmp/tmpsyj6ugnd.rs:8:13\n\
    \  |\n8 |     let mut digit = 0;\n  |             ^^^^^\n  |\n  = note: `#[warn(unused_assignments)]`\
    \ on by default\n  = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpsyj6ugnd.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmps1raxa7k.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpbvjeo39m.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp2ss_4m8f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = num;\n \
    \   while digit > 0 {\n        digit /= 10;\n        even += digit % 2 == 0;\n\
    \        odd += digit % 2 != 0;\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpinejpr6g.rs:11:14\n\
    \   |\n11 |         even += digit % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpinejpr6g.rs:12:13\n   |\n12 |         odd += digit % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num;\n\
    \    while digits > 0 {\n        if digits % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digits /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpv8_aomqb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4nruric6.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
