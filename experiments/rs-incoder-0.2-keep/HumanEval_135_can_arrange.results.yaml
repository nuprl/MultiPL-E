name: HumanEval_135_can_arrange
language: rust
results:
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp8s2qocpj.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8s2qocpj.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[largest]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpk_a8mqx0.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_a8mqx0.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 1;\n    while i < arr.len() {\n        if arr[i] > arr[i-1] {\n\
    \            largest = i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp4kmr__87.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4kmr__87.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpxq6ulfn3.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxq6ulfn3.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= max {\n   \
    \         return -1;\n        }\n        if arr[i] > max {\n            max =\
    \ arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpvp5prynd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr.iter().rev() {\n        if *i > max {\n            max = *i;\n\
    \        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpfo_851kd.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x > largest {\n     \
    \       largest = x;\n            index = x;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq__8kda0.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &x in arr {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r5cf8dy.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x <= max_val\
    \ {\n            max_idx = x;\n        } else {\n            max_val = x;\n  \
    \      }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-1`', /tmp/tmpzq96l963.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplv72y6fa.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplv72y6fa.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len();\n    let mut i = 1;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    if arr[i] < smallest {\n            smallest = i;\n        }\n        i +=\
    \ 1;\n    }\n    if smallest == -1 {\n        -1\n    } else {\n        largest\n\
    \    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpca2tbxt9.rs:14:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n14 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpca2tbxt9.rs:16:21\n\
    \   |\n16 |         if arr[i] < smallest {\n   |                     ^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |         if\
    \ arr[i] < smallest.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpca2tbxt9.rs:21:20\n\
    \   |\n21 |     if smallest == -1 {\n   |                    ^^\n   |        \
    \            |\n   |                    cannot apply unary operator `-`\n   |\
    \                    help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0600.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr {\n        if i > max {\n        \
    \    max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx == -1\
    \ {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcw9wzlun.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpw3z63jfs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjg4p1t96.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpjg4p1t96.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjg4p1t96.rs:18:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n18 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpeza6mjbn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len() - 1;\n    while smallest >= 0 {\n        if\
    \ arr[smallest] > arr[largest] {\n            largest = smallest;\n        } else\
    \ {\n            smallest = largest - 1;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppryzrcjn.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppryzrcjn.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in arr {\n        if i > max_val {\n\
    \            max_idx = i;\n            max_val = i;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ylpp7us.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i + 1]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp04odtovl.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04odtovl.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x <= arr[index] {\n \
    \           largest = index;\n        }\n        index += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkhdetkpa.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmpkhdetkpa.rs:9:23\n  |\n9 |     let\
    \ mut largest = -1;\n  |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n\
    \            &f32\n            &f64\n            &i128\n            &i16\n   \
    \         &i32\n            &i64\n            &i8\n            &isize\n      \
    \    and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhdetkpa.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut max_so_far: isize = 0;\n    for &i in arr {\n        if i > max {\n\
    \            max = i;\n            max_so_far = i;\n        }\n        if i ==\
    \ max {\n            max_so_far = i;\n        }\n    }\n    if max_so_far == max\
    \ {\n        return -1;\n    }\n    return max;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmmm46u6i.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i + 1]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp7nmyxgo6.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7nmyxgo6.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp167cmjom.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptnsyusxh.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptnsyusxh.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4f2g8x4q.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &i in arr {\n        if i > largest {\n     \
    \       largest = i;\n        }\n        if i == largest {\n            index\
    \ = i;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86kneblb.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter().rev() {\n        if el > arr[index]\
    \ {\n            largest = index;\n        }\n        index += 1;\n    }\n   \
    \ largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyucui5vn.rs:12:17\n   |\n\
    12 |         if el > arr[index] {\n   |                 ^^^^^^^^^^\n   |     \
    \            |\n   |                 expected `&isize`, found `isize`\n   |  \
    \               help: consider borrowing here: `&arr[index]`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpyucui5vn.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyucui5vn.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_5nzofym.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_5nzofym.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= max {\n   \
    \         max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp4e_flulw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in arr {\n        if i > max_val {\n\
    \            max_val = i;\n            max_idx = i;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpefy6uqre.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter().rev() {\n        if el > largest\
    \ {\n            largest = el;\n            index = el;\n        }\n    }\n  \
    \  index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmper63sy3a.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmper63sy3a.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmper63sy3a.rs:14:21\n   |\n10 |     let mut index = 0;\n   |         \
    \            - expected due to this value\n...\n14 |             index = el;\n\
    \   |                     ^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             index = *el;\n   |        \
    \             +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= max {\n   \
    \         max = arr[i];\n        } else {\n            return i;\n        }\n\
    \        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi3851c6x.rs:15:20\n   |\n\
    15 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in arr {\n        if i > max_val {\n\
    \            max_idx = i;\n            max_val = i;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjfnfdxo2.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x <= max_val {\n\
    \            max_idx = x;\n        } else {\n            max_val = x;\n      \
    \  }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3gddjsyk.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &x in arr.iter() {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp_n97wnn5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut idx: isize = 0;\n    for el in arr.iter() {\n        if el > max\
    \ {\n            max = el;\n            idx = idx;\n        } else {\n       \
    \     idx += 1;\n        }\n    }\n    if idx == 0 {\n        return -1;\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp22l_mi_s.rs:12:17\n   |\n\
    12 |         if el > max {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22l_mi_s.rs:13:19\n\
    \   |\n9  |     let mut max: isize = 0;\n   |                  ----- expected\
    \ due to this type\n...\n13 |             max = el;\n   |                   ^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |             max = *el;\n   |                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp_3oct_f9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut idx: usize = 0;\n    for &i in arr {\n        if i > max {\n    \
    \        max = i;\n            idx = i;\n        }\n    }\n    if idx == 0 {\n\
    \        return -1;\n    }\n    return idx;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptpb5mdp9.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptpb5mdp9.rs:14:19\n   |\n10 |     let mut idx: usize = 0;\n   |\
    \                  ----- expected due to this type\n...\n14 |             idx\
    \ = i;\n   |                   ^ expected `usize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptpb5mdp9.rs:20:12\n   |\n8  | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n20 |     return idx;\n   |            ^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |     return\
    \ idx.try_into().unwrap();\n   |               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter().rev() {\n        if x\
    \ <= max_val {\n            max_idx = x;\n            max_val = x;\n        }\n\
    \    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpdbh2mup7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplunhop0_.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplunhop0_.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter().rev() {\n        if *i > *max_idx\
    \ {\n            max_idx = i;\n        }\n        if *i == *max_idx {\n      \
    \      continue;\n        }\n        if *i > max {\n            max = *i;\n  \
    \      }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpi4qg2hg1.rs:12:17\n\
    \   |\n12 |         if *i > *max_idx {\n   |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi4qg2hg1.rs:13:23\n   |\n10 |     let mut max_idx\
    \ = -1;\n   |                       -- expected due to this value\n...\n13 | \
    \            max_idx = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     max_idx = *i;\n   |                       +\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmpi4qg2hg1.rs:15:18\n   |\n15 |        \
    \ if *i == *max_idx {\n   |                  ^^^^^^^^\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > arr[index]\
    \ {\n            largest = index;\n        }\n        index += 1;\n    }\n   \
    \ largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp14czrs83.rs:12:17\n   |\n\
    12 |         if el > arr[index] {\n   |                 ^^^^^^^^^^\n   |     \
    \            |\n   |                 expected `&isize`, found `isize`\n   |  \
    \               help: consider borrowing here: `&arr[index]`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp14czrs83.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14czrs83.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[max] {\n\
    \            max = i;\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq68ibjrj.rs:17:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n17 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n17 |     max.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwurxzftd.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwurxzftd.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd1xfd5fk.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            largest = i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp9cijgyi5.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9cijgyi5.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x <= max_val {\n\
    \            max_idx = x;\n        }\n        max_val = x;\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1zguf559.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpecchi2hd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplu69syff.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplu69syff.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= max {\n   \
    \         max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpa3sr5a5g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut max2 = -1;\n    for &i in arr {\n        if i > max {\n         \
    \   max = i;\n            max2 = i;\n        }\n    }\n    if max2 == -1 {\n \
    \       return -1;\n    }\n    max2\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptw5145s.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkjmoc7_2.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjmoc7_2.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &i in arr {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa3hmwvv8.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmnwrsi4.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplmnwrsi4.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmnwrsi4.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr {\n        if i > max {\n        \
    \    max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx == -1\
    \ {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxo_m56xn.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdg49p9md.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x <= max_val\
    \ {\n            max_idx = x;\n        } else {\n            max_val = x;\n  \
    \      }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `-1`', /tmp/tmpoq9vfdqj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebcdm3z_.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpebcdm3z_.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpebcdm3z_.rs:17:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n17 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr {\n        if i > max {\n        \
    \    max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx == -1\
    \ {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq7hd89h1.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for &x in arr.iter() {\n        if x > largest\
    \ {\n            largest = x;\n            largestIdx = arr.iter().position(|&x|\
    \ x > x).unwrap();\n        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzb0ls_h1.rs:17:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n17 |     largestIdx\n\
    \   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpc9ubehlj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter().rev() {\n        if i > max\
    \ {\n            max = i;\n            max_idx = i;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        return -1;\n    }\n    max - 1\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpan78zt6f.rs:12:16\n   |\n\
    12 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpan78zt6f.rs:13:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n13 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpan78zt6f.rs:14:23\n   |\n10 |     let mut max_idx = -1;\n   | \
    \                      -- expected due to this value\n...\n14 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             max_idx = *i;\n\
    \   |                       +\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp2y3cxz0t.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2y3cxz0t.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ >= largest {\n            largest = arr[index];\n        }\n        index +=\
    \ 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmptuzs1ox3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter().rev() {\n        if el > arr[index]\
    \ {\n            largest = index;\n        }\n        index += 1;\n    }\n   \
    \ largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2_nhv0rx.rs:12:17\n   |\n\
    12 |         if el > arr[index] {\n   |                 ^^^^^^^^^^\n   |     \
    \            |\n   |                 expected `&isize`, found `isize`\n   |  \
    \               help: consider borrowing here: `&arr[index]`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp2_nhv0rx.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_nhv0rx.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppmcgyqsw.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppmcgyqsw.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmcgyqsw.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter().rev() {\n        if i > largest {\n            largest\
    \ = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfr98z5kw.rs:11:16\n   |\n\
    11 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfr98z5kw.rs:12:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n12 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             largest = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter().rev() {\n        if i > largest {\n            largest\
    \ = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprzb1g91d.rs:11:16\n   |\n\
    11 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprzb1g91d.rs:12:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n12 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             largest = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp8ko_hp1t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter().rev() {\n        if i > max\
    \ {\n            max = i;\n            max_idx = i;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ftbh5e4.rs:12:16\n   |\n\
    12 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ftbh5e4.rs:13:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n13 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8ftbh5e4.rs:14:23\n   |\n10 |     let mut max_idx = -1;\n   | \
    \                      -- expected due to this value\n...\n14 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             max_idx = *i;\n\
    \   |                       +\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter().rev() {\n        if i > largest {\n            largest\
    \ = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbuqn14w.rs:11:16\n   |\n\
    11 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfbuqn14w.rs:12:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n12 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             largest = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0tf5qc1f.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp0tf5qc1f.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0tf5qc1f.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpj4gqwf7h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut cur = 0;\n    for &x in arr {\n        if x > max {\n            max\
    \ = x;\n        }\n        if x == max {\n            cur += 1;\n        }\n \
    \   }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj_21i_2d.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len();\n    for i in 0..arr.len() {\n        if arr[i]\
    \ > largest {\n            largest = i;\n        }\n        if arr[i] < smallest\
    \ {\n            smallest = i;\n        }\n    }\n    if smallest == -1 {\n  \
    \      -1\n    } else {\n        largest\n    }\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu58kkhu9.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu58kkhu9.rs:15:21\n\
    \   |\n15 |         if arr[i] < smallest {\n   |                     ^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n15 |         if\
    \ arr[i] < smallest.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpu58kkhu9.rs:19:20\n\
    \   |\n19 |     if smallest == -1 {\n   |                    ^^\n   |        \
    \            |\n   |                    cannot apply unary operator `-`\n   |\
    \                    help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0600.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x > max_val {\n\
    \            max_idx = x;\n            max_val = x;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        max_idx = -1;\n    }\n    max_idx\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpofgyl6vb.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len();\n    for i in arr.iter().rev() {\n        if\
    \ *i < smallest {\n            smallest = i;\n        }\n        if *i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp40__kol1.rs:12:17\n   |\n\
    12 |         if *i < smallest {\n   |                 ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |         if *i < smallest.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp40__kol1.rs:13:24\n   |\n10 |     let mut smallest = arr.len();\n\
    \   |                        --------- expected due to this value\n...\n13 | \
    \            smallest = i;\n   |                        ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp40__kol1.rs:16:23\n\
    \   |\n9  |     let mut largest = -1;\n   |                       -- expected\
    \ due to this value\n...\n16 |             largest = i;\n   |                \
    \       ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len() - 1;\n    while smallest >= 0 {\n        if\
    \ arr[smallest] > arr[largest + 1] {\n            largest = smallest + 1;\n  \
    \      } else {\n            smallest--;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpknw1ltom.rs:15:23\n\
    \   |\n15 |             smallest--;\n   |                       ^ expected expression\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpknw1ltom.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpknw1ltom.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpexlwijgf.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpexlwijgf.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpexlwijgf.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr {\n        if i > max {\n        \
    \    max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx == -1\
    \ {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5vtfp1yc.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x <= max_val {\n\
    \            max_idx = x;\n        }\n        max_val = x;\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpphw94bvk.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > largest {\n\
    \            largest = el;\n        }\n        if el == largest {\n          \
    \  index = el;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1lb0lm2r.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1lb0lm2r.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmp1lb0lm2r.rs:15:15\n   |\n15 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1lb0lm2r.rs:16:21\n\
    \   |\n10 |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n16 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &i in arr {\n        if i > max_value\
    \ {\n            max_index = i;\n            max_value = i;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp31shlpu9.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter() {\n        if i > max {\n  \
    \          max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx\
    \ == -1 {\n        return -1;\n    }\n    for i in arr.iter() {\n        if i\
    \ == max_idx {\n            continue;\n        }\n        if i > max {\n     \
    \       return i;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4mufh8kz.rs:12:16\n   |\n\
    12 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4mufh8kz.rs:13:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n13 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4mufh8kz.rs:14:23\n   |\n10 |     let mut max_idx = -1;\n   | \
    \                      -- expected due to this value\n...\n14 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             max_idx = *i;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp4mufh8kz.rs:21:14\n   |\n21 |         if i == max_idx {\n   | \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4mufh8kz.rs:24:16\n   |\n24 |\
    \         if i > max {\n   |                ^^^\n   |                |\n   | \
    \               expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4mufh8kz.rs:25:20\n\
    \   |\n25 |             return i;\n   |                    ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |  \
    \           return *i;\n   |                    +\n\nerror: aborting due to 6\
    \ previous errors\n\nSome errors have detailed explanations:"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in arr.iter().rev() {\n        if\
    \ i > max_value {\n            max_value = i;\n            max_index = i;\n  \
    \      }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6wvs8rc_.rs:12:16\n   |\n\
    12 |         if i > max_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6wvs8rc_.rs:13:25\n   |\n10 |     let mut max_value = arr[0];\n\
    \   |                         ------ expected due to this value\n...\n13 |   \
    \          max_value = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     max_value = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6wvs8rc_.rs:14:25\n   |\n9  |     let mut max_index = -1;\n\
    \   |                         -- expected due to this value\n...\n14 |       \
    \      max_index = i;\n   |                         ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max_index = *i;\n   |                         +\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter().rev() {\n        if el > largest\
    \ {\n            largest = el;\n        }\n        if el == largest {\n      \
    \      index = el;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr2xjkrbd.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr2xjkrbd.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpr2xjkrbd.rs:15:15\n   |\n15 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2xjkrbd.rs:16:21\n\
    \   |\n10 |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n16 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut max_idx = -1;\n    for &x in arr.iter() {\n        if x > max {\n  \
    \          max = x;\n            max_idx = x;\n        }\n    }\n    if max_idx\
    \ == -1 {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp_7ko2wih.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &i in arr {\n        if i > largest {\n     \
    \       largest = i;\n        }\n        if i == largest {\n            index\
    \ = i;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ko7u0r5.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkrzo6uet.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpkrzo6uet.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkrzo6uet.rs:17:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n17 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmqclllxs.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpmqclllxs.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmqclllxs.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr.iter().rev() {\n        if *i <= max {\n            return -1;\n\
    \        }\n        if *i > max {\n            max = *i;\n        }\n    }\n \
    \   max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpw4jkukvk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp9oci7_h_.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9oci7_h_.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &i in arr {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83cx9eb5.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        if arr[i] == max {\n            i +=\
    \ 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[largest]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpdglzrag4.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdglzrag4.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmdfr8hl_.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > largest {\n\
    \            largest = el;\n            index = el;\n        }\n    }\n    index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ncskttg.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5ncskttg.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5ncskttg.rs:14:21\n   |\n10 |     let mut index = 0;\n   |         \
    \            - expected due to this value\n...\n14 |             index = el;\n\
    \   |                     ^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             index = *el;\n   |        \
    \             +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbtej11ch.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i + 1]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpeoiit4an.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeoiit4an.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter().rev() {\n        if i > largest {\n            largest\
    \ = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsrh9oxk7.rs:11:16\n   |\n\
    11 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsrh9oxk7.rs:12:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n12 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             largest = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 1;\n    while i < arr.len() {\n        if arr[i] > arr[largest]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpab8enkfj.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpab8enkfj.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len();\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = arr[i];\n        }\n\
    \        if arr[i] < smallest {\n            smallest = arr[i];\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4b91lew_.rs:16:21\n   |\n\
    16 |         if arr[i] < smallest {\n   |                     ^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |         if arr[i] <\
    \ smallest.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4b91lew_.rs:17:24\n   |\n10 |\
    \     let mut smallest = arr.len();\n   |                        --------- expected\
    \ due to this value\n...\n17 |             smallest = arr[i];\n   |          \
    \              ^^^^^^ expected `usize`, found `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr.iter() {\n        if x <= arr[index]\
    \ {\n            largest = index;\n        }\n        index += 1;\n    }\n   \
    \ largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwt814n7a.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwt814n7a.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpadh826n9.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpadh826n9.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut i: isize = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            max = i;\n        }\n        i += 1;\n    }\n    max\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1bw3esfw.rs:11:15\n   |\n\
    11 |     while i < arr.len() {\n   |               ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |     while i < arr.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1bw3esfw.rs:12:12\n  \
    \ |\n12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |        \
    \    ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<isize>`\n \
    \ --> /tmp/tmp1bw3esfw.rs:12:22\n   |\n12 |         if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n   |                      ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeFrom<isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n     \
    \        <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because of\
    \ the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x > max_val\
    \ {\n            max_val = x;\n            max_idx = x;\n        }\n    }\n  \
    \  max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp3tkvdo7c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut maxidx = 0;\n    for idx in arr.iter().rev() {\n        if idx >\
    \ max {\n            max = idx;\n            maxidx = idx;\n        }\n    }\n\
    \    if maxidx > 0 {\n        maxidx\n    } else {\n        -1\n    }\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptz28uz4x.rs:12:18\n   |\n\
    12 |         if idx > max {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&isize`, found `isize`\n   |            \
    \      help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptz28uz4x.rs:13:19\n   |\n9  |     let mut max: isize = 0;\n   |\
    \                  ----- expected due to this type\n...\n13 |             max\
    \ = idx;\n   |                   ^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |             max = *idx;\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptz28uz4x.rs:14:22\n\
    \   |\n10 |     let mut maxidx = 0;\n   |                      - expected due\
    \ to this value\n...\n14 |             maxidx = idx;\n   |                   \
    \   ^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n14 |             maxidx = *idx;\n   |                      +\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            largest = i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1rnsdemi.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rnsdemi.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsp_0vxg_.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpsp_0vxg_.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsp_0vxg_.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter().rev() {\n        if x\
    \ <= max_val {\n            max_idx = x;\n            max_val = x;\n        }\n\
    \    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpyd0ck5y7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for idx in arr.iter().rev() {\n        if idx\
    \ > largest {\n            largest = idx;\n            largestIdx = idx;\n   \
    \     } else if idx == largest {\n            largestIdx += 1;\n        }\n  \
    \  }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpldif79w3.rs:12:18\n   |\n\
    12 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpldif79w3.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = idx;\n   |                       ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *idx;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpldif79w3.rs:14:26\n   |\n10 |     let mut largestIdx = 0;\n   |    \
    \                      - expected due to this value\n...\n14 |             largestIdx\
    \ = idx;\n   |                          ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |             largestIdx\
    \ = *idx;\n   |                          +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpldif79w3.rs:15:23\n   |\n15 |         } else\
    \ if idx == largest {\n   |                       ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbnnq9sr2.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbnnq9sr2.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnnq9sr2.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp93nuhpo6.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmp93nuhpo6.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp93nuhpo6.rs:17:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n17 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[largest]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbjestlbt.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbjestlbt.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i-1]\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpjujb7wxh.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjujb7wxh.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhrtupc0.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpdhrtupc0.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdhrtupc0.rs:17:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n17 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ogcg64n.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp3job61b7.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3job61b7.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ >= arr[index + 1] {\n            largest = index;\n        }\n        index\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpgq29mzlt.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgq29mzlt.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x <= max_val\
    \ {\n            max_val = x;\n            max_idx = x;\n        }\n    }\n  \
    \  max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmp4xhbstjt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x > max_val {\n\
    \            max_val = x;\n            max_idx = x;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6c52_nys.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ >= arr[index + 1] {\n            largest = index;\n        }\n        index\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwt7cswhd.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwt7cswhd.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzk6zklbd.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzk6zklbd.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5cb6py_n.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp5cb6py_n.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5cb6py_n.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter().rev() {\n        if x\
    \ <= max_val {\n            max_idx = x;\n            max_val = x;\n        }\n\
    \    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpcv1kibis.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i + 1]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbfsj8xuy.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbfsj8xuy.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpam5qyv6h.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpam5qyv6h.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpam5qyv6h.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ >= largest {\n            largest = arr[index];\n        }\n        index +=\
    \ 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpc_4md5ne.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpewoyzs16.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpewoyzs16.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in arr {\n        if i > max_val {\n\
    \            max_idx = i;\n            max_val = i;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyhu658zr.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x > largest {\n     \
    \       largest = x;\n            index = x;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4qxz9dx.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &x in arr.iter() {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    if max_index == -1 {\n        return -1;\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpufkyxpje.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp40kokimi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpty1aau9j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc4pirse0.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpc4pirse0.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc4pirse0.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x > largest {\n     \
    \       largest = x;\n        }\n        if x == largest {\n            index\
    \ = x;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwcbphwp_.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpytdy8q6y.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytdy8q6y.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x > max_val\
    \ {\n            max_val = x;\n            max_idx = x;\n        }\n    }\n  \
    \  max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpl2w8zdr3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpocjiv_3c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &x in arr.iter() {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp833vq921.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpwtkg_iog.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr.iter().rev() {\n        if i > max\
    \ {\n            max = i;\n            max_idx = i;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpkr140diz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = arr.len() - 1;\n    while i >= 0 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            largest = i;\n        } else {\n            i -= 1;\n  \
    \      }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp19p2k2bx.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp19p2k2bx.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpplbs4jyu.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x <= max_val {\n\
    \            max_idx = x;\n        } else {\n            max_val = x;\n      \
    \  }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00z2dzwc.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqp1hdxez.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_s4kjza.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp_h0vrnt_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2raqrni.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp9igfna5q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x <= arr[index] {\n \
    \           largest = index;\n        }\n        index += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmjjas8cq.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmpmjjas8cq.rs:9:23\n  |\n9 |     let\
    \ mut largest = -1;\n  |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n  |\n  = help: the following other types implement trait `Neg`:\n\
    \            &f32\n            &f64\n            &i128\n            &i16\n   \
    \         &i32\n            &i64\n            &i8\n            &isize\n      \
    \    and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmjjas8cq.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmponqpkr17.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x > max_val\
    \ {\n            max_val = x;\n            max_idx = x;\n        }\n    }\n  \
    \  max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm6tooe_f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in &arr {\n        if i > max_val {\n\
    \            max_idx = i;\n            max_val = i;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpg7xhi0_u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 1;\n    while i < arr.len() {\n        if arr[i] > arr[i-1] {\n\
    \            largest = i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpfh5qubgs.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfh5qubgs.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = arr.len() - 1;\n    while i >= 0 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            largest = i;\n        } else {\n            i -= 1;\n  \
    \      }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_um001cz.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_um001cz.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut index: usize = 0;\n    for &x in arr {\n        if x > max {\n  \
    \          max = x;\n            index = x;\n        }\n    }\n    if index ==\
    \ 0 {\n        return -1;\n    }\n    index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpijg8vofo.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpijg8vofo.rs:14:21\n   |\n10 |     let mut index: usize = 0;\n \
    \  |                    ----- expected due to this type\n...\n14 |           \
    \  index = x;\n   |                     ^ expected `usize`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpijg8vofo.rs:20:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n20 |     index\n  \
    \ |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n20 |     index.try_into().unwrap()\n\
    \   |          ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpimmr007v.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > largest {\n\
    \            largest = el;\n        }\n        if el == largest {\n          \
    \  index = el;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgq89xcpr.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgq89xcpr.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpgq89xcpr.rs:15:15\n   |\n15 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgq89xcpr.rs:16:21\n\
    \   |\n10 |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n16 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter() {\n        if i > max {\n  \
    \          max = i;\n            max_idx = i;\n        }\n    }\n    if max_idx\
    \ == -1 {\n        return -1;\n    }\n    for i in arr.iter().rev() {\n      \
    \  if i > max {\n            max = i;\n            max_idx = i;\n        }\n \
    \   }\n    if max_idx == -1 {\n        return -1;\n    }\n    if max > max_idx\
    \ {\n        return -1;\n    }\n    return max_idx;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpufo7808x.rs:12:16\n   |\n\
    12 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpufo7808x.rs:13:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n13 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpufo7808x.rs:14:23\n   |\n10 |     let mut max_idx = -1;\n   | \
    \                      -- expected due to this value\n...\n14 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             max_idx = *i;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpufo7808x.rs:21:16\n\
    \   |\n21 |         if i > max {\n   |                ^^^\n   |              \
    \  |\n   |                expected `&isize`, found integer\n   |             \
    \   help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpufo7808x.rs:22:19\n   |\n9  |     let mut max = -1;\n   |     \
    \              -- expected due to this value\n...\n22 |             max = i;\n\
    \   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             max = *i;\n   |           \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpufo7808x.rs:23:23\n\
    \   |\n10 |     let mut max_idx = -1;\n   |                       -- expected\
    \ due to this value\n...\n23 |             max_idx = i;\n   |                \
    \       ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n23 |             max_idx = *i;\n   |                     \
    \  +\n\nerror: aborting due to 6 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &x in arr {\n        if x > largest {\n     \
    \       largest = x;\n            index = x;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmzaq05v8.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut max_index = 0;\n    let mut i = 0;\n    while i < arr.len() {\n    \
    \    if arr[i] > arr[max] {\n            max = i;\n            max_index = i;\n\
    \        }\n        i += 1;\n    }\n    if max_index == arr.len() {\n        return\
    \ -1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwqd6lh17.rs:22:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n22 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n22 |     max.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp51381n34.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp51381n34.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp51381n34.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 1;\n    while i < arr.len() {\n        if arr[i] >= arr[i-1]\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp5fcdsghz.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5fcdsghz.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpamdho7cp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > largest {\n\
    \            largest = el;\n        }\n        if el == largest {\n          \
    \  index = el;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptzpghijc.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptzpghijc.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmptzpghijc.rs:15:15\n   |\n15 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptzpghijc.rs:16:21\n\
    \   |\n10 |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n16 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for &i in arr {\n        if i > max {\n      \
    \      max = i;\n            max_index = i;\n        }\n    }\n    if max_index\
    \ == -1 {\n        return -1;\n    }\n    for &i in arr {\n        if i == max_index\
    \ {\n            continue;\n        }\n        if i > max {\n            return\
    \ -1;\n        }\n    }\n    return max_index;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0_3bajsm.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0_3bajsm.rs:20:9\n   |\n20 |     for &i in arr {\n   |        \
    \ ^^    --- this expression has type `Option<isize>`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for &i in arr {\n        if i > largest {\n\
    \            largest = i;\n            largestIdx = i;\n        } else if i ==\
    \ largest {\n            largestIdx += 1;\n        }\n    }\n    largestIdx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq0_0v58.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[largest] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpft51f4tj.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpft51f4tj.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmy17siyv.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > largest {\n            largest = index;\n        }\n        index += 1;\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsbgduh11.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = index;\n   |                   \
    \    ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for idx in arr.iter().rev() {\n        if idx\
    \ > largest {\n            largest = idx;\n            largestIdx = idx;\n   \
    \     } else if idx > largestIdx {\n            largestIdx = idx;\n        }\n\
    \    }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3tc3j0zt.rs:12:18\n   |\n\
    12 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3tc3j0zt.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = idx;\n   |                       ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *idx;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3tc3j0zt.rs:14:26\n   |\n10 |     let mut largestIdx = 0;\n   |    \
    \                      - expected due to this value\n...\n14 |             largestIdx\
    \ = idx;\n   |                          ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |             largestIdx\
    \ = *idx;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3tc3j0zt.rs:15:25\n   |\n15 |         } else if idx > largestIdx\
    \ {\n   |                         ^^^^^^^^^^\n   |                         |\n\
    \   |                         expected `&isize`, found integer\n   |         \
    \                help: consider borrowing here: `&largestIdx`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3tc3j0zt.rs:16:26\n   |\n10 |     let mut largestIdx\
    \ = 0;\n   |                          - expected due to this value\n...\n16 |\
    \             largestIdx = idx;\n   |                          ^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \           largestIdx = *idx;\n   |                          +\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwapn2epx.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwapn2epx.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwapn2epx.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut idx: usize = 0;\n    for &x in arr.iter() {\n        if x > max {\n\
    \            max = x;\n            idx = x;\n        }\n    }\n    if idx == 0\
    \ {\n        return -1;\n    }\n    max\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptsnuuh_6.rs:14:19\n   |\n\
    10 |     let mut idx: usize = 0;\n   |                  ----- expected due to\
    \ this type\n...\n14 |             idx = x;\n   |                   ^ expected\
    \ `usize`, found `isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr.iter() {\n        if x > max_val\
    \ {\n            max_val = x;\n            max_idx = x;\n        }\n    }\n  \
    \  max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpxsz3gdp6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for idx in arr.iter().rev() {\n        if idx\
    \ > largest {\n            largest = idx;\n            largestIdx = idx;\n   \
    \     } else if idx == largest {\n            largestIdx += 1;\n        }\n  \
    \  }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7y9g6shb.rs:12:18\n   |\n\
    12 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7y9g6shb.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = idx;\n   |                       ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *idx;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7y9g6shb.rs:14:26\n   |\n10 |     let mut largestIdx = 0;\n   |    \
    \                      - expected due to this value\n...\n14 |             largestIdx\
    \ = idx;\n   |                          ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |             largestIdx\
    \ = *idx;\n   |                          +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmp7y9g6shb.rs:15:23\n   |\n15 |         } else\
    \ if idx == largest {\n   |                       ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpwvrjyitl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut smallest = arr.len() - 1;\n    while smallest >= 0 {\n        if\
    \ arr[smallest] > arr[largest + 1] {\n            largest = smallest + 1;\n  \
    \      } else {\n            smallest--;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmplani2kfv.rs:15:23\n\
    \   |\n15 |             smallest--;\n   |                       ^ expected expression\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplani2kfv.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplani2kfv.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for &i in arr {\n        if i > largest {\n     \
    \       largest = i;\n        }\n        if i == largest {\n            index\
    \ = i;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0hl40zq7.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for el in arr.iter() {\n        if el > largest {\n\
    \            largest = el;\n            index = el;\n        }\n    }\n    index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppyi9m3cx.rs:12:17\n   |\n\
    12 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppyi9m3cx.rs:13:23\n   |\n9  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n13 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppyi9m3cx.rs:14:21\n   |\n10 |     let mut index = 0;\n   |         \
    \            - expected due to this value\n...\n14 |             index = el;\n\
    \   |                     ^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             index = *el;\n   |        \
    \             +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp11qmnvtx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnqnfxkk1.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x > max_val {\n\
    \            max_idx = x;\n            max_val = x;\n        }\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv53xcva4.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqqrlk1af.rs:12:22\n   |\n\
    12 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n12 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpqqrlk1af.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqqrlk1af.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_klu1oy9.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmp_klu1oy9.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_klu1oy9.rs:18:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n18 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5r1__k6a.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i..].iter().max().unwrap()\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprfk8jc7z.rs:12:21\n   |\n\
    12 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmprfk8jc7z.rs:9:23\n  |\n9 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprfk8jc7z.rs:18:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n18 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in arr.iter().rev() {\n        if *i > *max\
    \ {\n            max = *i;\n            max_idx = i;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        -1\n    } else {\n        max_idx\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp_ji4k7kt.rs:12:17\n\
    \   |\n12 |         if *i > *max {\n   |                 ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_ji4k7kt.rs:14:23\n   |\n10 |     let mut max_idx\
    \ = -1;\n   |                       -- expected due to this value\n...\n14 | \
    \            max_idx = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max_idx = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for &x in arr.iter() {\n        if x > max_value\
    \ {\n            max_value = x;\n            max_index = x;\n        }\n    }\n\
    \    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmppzgbd00x.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpd2baon_r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut cur = 0;\n    for &x in arr {\n        if x > max {\n            max\
    \ = x;\n        }\n        if x == max {\n            cur += 1;\n        }\n \
    \   }\n    if cur == 0 {\n        return -1;\n    }\n    max\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppsx3thuj.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[index + 1] {\n            largest = index;\n        }\n        index +=\
    \ 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpg_tyop7j.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg_tyop7j.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &i in arr.iter().rev() {\n        if i\
    \ > max_val {\n            max_idx = i;\n            max_val = i;\n        }\n\
    \    }\n    if max_idx == -1 {\n        -1\n    } else {\n        max_idx\n  \
    \  }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpglyuxryu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max {\n    \
    \        max = arr[i];\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpvquhz54a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[i-1]\
    \ {\n            largest = i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpyy9naw1e.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyy9naw1e.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmph08huuey.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph08huuey.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = arr[0];\n    for &x in arr {\n        if x > max_val {\n\
    \            max_val = x;\n            max_idx = x;\n        }\n    }\n    if\
    \ max_idx == -1 {\n        return -1;\n    }\n    max_idx\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_um05fz.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[largest]\
    \ {\n            largest = i;\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpxcapknos.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxcapknos.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largestIdx = 0;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n            largestIdx = i;\n        }\n    }\n\
    \    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz03mw1a6.rs:12:16\n   |\n\
    12 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz03mw1a6.rs:13:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n13 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |             largest = *i;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz03mw1a6.rs:14:26\n\
    \   |\n10 |     let mut largestIdx = 0;\n   |                          - expected\
    \ due to this value\n...\n14 |             largestIdx = i;\n   |             \
    \             ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             largestIdx = *i;\n   |                  \
    \        +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstevs1g3.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > largest {\n\
    \            largest = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphxs_yyza.rs:13:23\n   |\n\
    9  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n13 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
