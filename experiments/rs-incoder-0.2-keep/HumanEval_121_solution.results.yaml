name: HumanEval_121_solution
language: rust
results:
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 != 0).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp346fpo0l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&el| el % 2 != 0).sum::<isize>()\n \
    \       + odds.iter().filter(|&el| el % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpqagw0j80.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&el| el % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&el| el % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpv2n0gj3u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpbl8nsadv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpksxsawv2.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9zob3daz.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp9zob3daz.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpdaqg4rpr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i/2] += 1;\n        } else {\n            odds[i/2]\
    \ += 1;\n        }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n\
    \        + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpjaeyfqd6.rs:11:13\n   |\n11 |             evens[i/2] += 1;\n   |   \
    \          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjaeyfqd6.rs:13:13\n\
    \   |\n13 |             odds[i/2] += 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp56tqang9.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp56tqang9.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp66gnxc73.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmph26ixf9m.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmph26ixf9m.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnm5zmrpj.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpnm5zmrpj.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp7j2h5qws.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds\n       \
    \ .iter()\n        .filter(|&x| x % 2 == 1)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmp2w_l3sk7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().skip(1) {\n        if i % 2 == 0 {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzc7qe1wi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4k563syv.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 != 0).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpmv6w8boi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmphc3vto7k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmplfin99a_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for i in lst {\n        if i % 2 == 0 {\n   \
    \         evens.push(i);\n        } else {\n            odds.push(i);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp_pclw7d2.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp_pclw7d2.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpotn10sil.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for n in lst {\n        if n % 2 == 0 {\n   \
    \         evens.push(n);\n        } else {\n            odds.push(n);\n      \
    \  }\n    }\n    evens.iter().filter(|&n| n % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&n| n % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp0iqa3oj5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for ele in lst {\n        if ele % 2 == 0 {\n\
    \            evens.push(ele);\n        } else {\n            odds.push(ele);\n\
    \        }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpgp8240g2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i] = evens[i] + i;\n        } else {\n     \
    \       odds[i] = odds[i] + i;\n        }\n    }\n    let mut sum = 0;\n    for\
    \ i in evens.iter() {\n        sum += i;\n    }\n    for i in odds.iter() {\n\
    \        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmpr9ce7vkd.rs:11:13\n   |\n11 |             evens[i] = evens[i] + i;\n\
    \   |             ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpr9ce7vkd.rs:11:24\n\
    \   |\n11 |             evens[i] = evens[i] + i;\n   |                       \
    \ ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpr9ce7vkd.rs:13:13\n\
    \   |\n13 |             odds[i] = odds[i] + i;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpr9ce7vkd.rs:13:23\n\
    \   |\n13 |             odds[i] = odds[i] + i;\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmprlv0huip.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpy9ypelbs.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpy9ypelbs.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = vec![0; lst.len()];\n\
    \    let mut odd = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            even[i as usize - 1] += 1;\n        } else {\n   \
    \         odd[i as usize - 1] += 1;\n        }\n    }\n    let mut sum = 0;\n\
    \    for i in even.iter() {\n        sum += i;\n    }\n    for i in odd.iter()\
    \ {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmp6pzmnzik.rs:11:18\n\
    \   |\n11 |             even[i as usize - 1] += 1;\n   |                  -^^^^^^^^^\n\
    \   |                  |\n   |                  cannot cast `&isize` as `usize`\n\
    \   |                  help: dereference the expression: `*i`\n\nerror[E0606]:\
    \ casting `&isize` as `usize` is invalid\n  --> /tmp/tmp6pzmnzik.rs:13:17\n  \
    \ |\n13 |             odd[i as usize - 1] += 1;\n   |                 -^^^^^^^^^\n\
    \   |                 |\n   |                 cannot cast `&isize` as `usize`\n\
    \   |                 help: dereference the expression: `*i`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmprv_62mub.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmprv_62mub.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpncg1ix94.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmptzk8gwt4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = lst.iter().filter(|&x|\
    \ x % 2 == 0).count();\n    let mut odd = lst.iter().filter(|&x| x % 2 != 0).count();\n\
    \    even += odd;\n    even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxs4k3lip.rs:10:5\n   |\n\
    6  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n10 |     even\n   |\
    \     ^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n10 |     even.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2b5r799f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpl1aup0cs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjjolh3ub.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpvnczy8r2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpvp7omi0i.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpxks57xhz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp_zt4hoj3.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2_btjoss.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmplbg8ra3n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n   \
    \     + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpssiux24o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnef5rljv.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpnef5rljv.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().filter(|&x|\
    \ x % 2 == 1).sum::<isize>()\n        + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `12`', /tmp/tmp31sla6rz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpe4ml0rks.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpe4ml0rks.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i/2] += 1;\n        } else {\n            odds[i/2]\
    \ += 1;\n        }\n    }\n    evens.iter().sum::<isize>()\n        + odds.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpnj5ui_p5.rs:11:13\n   |\n11 |             evens[i/2] += 1;\n   |   \
    \          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpnj5ui_p5.rs:13:13\n\
    \   |\n13 |             odds[i/2] += 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc8mjr3xh.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpb8mjoec7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp1umi48ly.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpincca3j3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpa1x9xxnd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjzwbp348.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwhunl4qs.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp393_l69v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n   \
    \     + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpl9cyziph.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpb9bwc5wn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpa0ontp34.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpa0ontp34.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().filter(|&x|\
    \ x % 2 == 1).sum::<isize>()\n        + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `12`', /tmp/tmp2drxnxls.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplkl3567d.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe3ja7bot.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpsslkcmaj.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpsslkcmaj.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp054mp68g.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpql_8navc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 != 0).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpn6ahncgc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odd = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        if\
    \ i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odd[i] = odd[i] + lst[i];\n        }\n    }\n    let mut sum = 0;\n\
    \    for i in 0..evens.len() {\n        sum += evens[i];\n    }\n    for i in\
    \ 0..odd.len() {\n        sum += odd[i];\n    }\n    sum\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmptaeus48t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp8c7l_kzx.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp8c7l_kzx.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp743p3vue.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpiry32ad7.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpiry32ad7.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvye7l9jy.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpkbxg_g6c.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for n in lst {\n        if n % 2 == 0 {\n   \
    \         evens.push(n);\n        } else {\n            odds.push(n);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp6ayb61hr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpejpwg6xz.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpejpwg6xz.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for i in lst {\n        if i % 2 == 0 {\n   \
    \         evens.push(i);\n        } else {\n            odds.push(i);\n      \
    \  }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpp9rwuiw0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp9p1yoebl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds\n       \
    \ .iter()\n        .filter(|&x| x % 2 == 1)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpvw6rcwyl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmprn83rd2o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpyfgxdxru.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().skip(1).filter(|&i| i % 2 == 1) {\n        sum += i;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpm0dcgemx.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6t4q1_y0.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpu5_u6ezj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3n_lct4k.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds\n       \
    \ .iter()\n        .filter(|&x| x % 2 == 1)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmplpgaeo_f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmph4vwi_6y.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmph4vwi_6y.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpriz3weaw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n\n    for i in 0..lst.len() {\n     \
    \   if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else\
    \ {\n            odds[i] = odds[i] + lst[i];\n        }\n    }\n\n    evens.iter().filter(|&x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for i in lst {\n        if i % 2 == 0 {\n   \
    \         evens.push(i);\n        } else {\n            odds.push(i);\n      \
    \  }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpqk6fler5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpc78cdbl9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpf8o3xusm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpea3735y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpu43200pm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&el| el % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&el| el % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpb4rk0wtc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&el| el % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&el| el % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpijra78gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds[0] + evens[1]\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp5cnog0yv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpf4k4cji7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjkovqcip.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().skip(1) {\n        if i % 2 == 0 {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpdi_7amjh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpkk4yc1k4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp1ocg250o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0d35gl7b.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpv53jlzcw.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpv53jlzcw.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3zjlsb6o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp1q4tb8qr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i] += 1;\n        } else {\n            odds[i]\
    \ += 1;\n        }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n\
    \        + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmp_s9cz6y0.rs:11:13\n   |\n11 |             evens[i] += 1;\n   |     \
    \        ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmp_s9cz6y0.rs:13:13\n\
    \   |\n13 |             odds[i] += 1;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for ele in lst {\n        if ele % 2 == 0 {\n\
    \            evens.push(ele);\n        } else {\n            odds.push(ele);\n\
    \        }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpqcuio94i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpfr8g9ce2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2t0rrmyq.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n   \
    \     + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmprczat52e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphykglhjo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_77zplpu.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 != 0).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqy12p8le.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpi82r22q_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5pa7r99o.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp5pa7r99o.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu0_al5dy.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpycr1n5_5.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphsi4ocg6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for &i in lst {\n        if i % 2\
    \ == 0 {\n            evens[i as usize] += 1;\n        } else {\n            odds[i\
    \ as usize] += 1;\n        }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n\
    \        + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8nbbnlzl.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsvsbmx49.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmplny443rb.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmplny443rb.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for &i in lst {\n        if i % 2\
    \ == 0 {\n            evens[i as usize - 1] += 1;\n        } else {\n        \
    \    odds[i as usize - 1] += 1;\n        }\n    }\n    let mut sum = 0;\n    for\
    \ i in evens.iter() {\n        sum += i;\n    }\n    for i in odds.iter() {\n\
    \        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0oh9iqs9.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpg0b9vjjh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 != 0).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpa94_wck9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpl41gipys.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp5t12_q3r.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp5t12_q3r.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp58hiwdcj.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp58hiwdcj.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpidbfib06.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpf_4ai3ad.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds[0] + evens[1]\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmputik65qw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp6niq30yw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().filter(|&x|\
    \ x % 2 == 1).sum::<isize>()\n        + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `12`', /tmp/tmpode25ysq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbtk81cvi.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp0o1vt163.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmp0o1vt163.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv_asw76c.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjrqdn6p2.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n\n    for i in 0..lst.len() {\n     \
    \   if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else\
    \ {\n            odds[i] = odds[i] + lst[i];\n        }\n    }\n\n    evens.iter().filter(|&x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmptpn3mry7.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjohspsxr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmporyp0j03.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7al6pft2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphnmxuy1_.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphp3l77qy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for ele in lst {\n        if ele % 2 == 0 {\n\
    \            evens.push(ele);\n        } else {\n            odds.push(ele);\n\
    \        }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n \
    \       + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpren1sqva.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf6xeufr8.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           evens.push(el);\n        } else {\n            odds.push(el);\n  \
    \      }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n   \
    \     + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp6ifuez7z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc96ykuua.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpd4erddyz.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpd4erddyz.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp0v569qbx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2pf5tuu3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i/2] += 1;\n        } else {\n            odds[i/2]\
    \ += 1;\n        }\n    }\n    for i in evens.iter() {\n        if i % 2 == 1\
    \ {\n            return evens[i] + odds[i];\n        }\n    }\n    return evens.iter().sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp843sdpx2.rs:11:13\n   |\n11 |             evens[i/2] += 1;\n   |   \
    \          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp843sdpx2.rs:13:13\n\
    \   |\n13 |             odds[i/2] += 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `&{integer}`\n  --> /tmp/tmp843sdpx2.rs:18:20\n   |\n18\
    \ |             return evens[i] + odds[i];\n   |                    ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `&{integer}`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&{integer}>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&{integer}`\n  -->\
    \ /tmp/tmp843sdpx2.rs:18:31\n   |\n18 |             return evens[i] + odds[i];\n\
    \   |                               ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `&{integer}`\n   = help: the trait `SliceIndex<[T]>` is\
    \ implemented for `usize`\n   = note: required because of the requirements on\
    \ the impl of `Index<&{integer}>` for `Vec<{integer}>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp1qj8ji7q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for n in lst {\n        if n % 2 == 0 {\n   \
    \         evens.push(n);\n        } else {\n            odds.push(n);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpm4mpkzka.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpm4mpkzka.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for n in lst {\n        if n % 2 == 0 {\n   \
    \         evens.push(n);\n        } else {\n            odds.push(n);\n      \
    \  }\n    }\n    evens.iter().filter(|&n| n % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&n| n % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpddl20swk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 != 0).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1lmif9n5.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpfnm470bx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    odds\n       \
    \ .iter()\n        .filter(|x| x % 2 == 1)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpjx3hqnnj.rs:18:23\n\
    \   |\n18 |         .filter(|x| x % 2 == 1)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n   |\n18 |         .filter(|x|\
    \ *x % 2 == 1)\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2r398al.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe1xtouc8.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpl9zh4rvo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().skip(1).filter(|&x| x % 2 == 1) {\n        sum += i;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpsc5podt3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgpklbx3b.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp8ya4hd9o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpyt6gejbx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 != 0).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnoths_eq.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7lr9_291.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpwu_czrya.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpw3nf5w99.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 != 0).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 != 0).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpw3nf5w99.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            evens[i] = evens[i] + lst[i];\n        } else {\n\
    \            odds[i] = odds[i] + lst[i];\n        }\n    }\n    evens.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpolshn4ae.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp7h27uk0.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpnqw45gio.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp52fw1wmx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp28bwagu3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmptpekefjc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmppx1np2di.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmppx1np2di.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzzjvy6lj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|&x| x % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpbrbwvlhh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = vec![0; lst.len()];\n\
    \    let mut odd = vec![0; lst.len()];\n\n    for i in lst.iter().enumerate()\
    \ {\n        if i[1].0 % 2 == 0 {\n            even[i.0] += i[1].0;\n        }\
    \ else {\n            odd[i.0] += i[1].0;\n        }\n    }\n\n    even.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `(usize, &isize)`\n  -->\
    \ /tmp/tmpvq0un0ci.rs:11:12\n   |\n11 |         if i[1].0 % 2 == 0 {\n   |   \
    \         ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot\
    \ index into a value of type `(usize, &isize)`\n  --> /tmp/tmpvq0un0ci.rs:12:26\n\
    \   |\n12 |             even[i.0] += i[1].0;\n   |                          ^^^^\
    \ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot index into\
    \ a value of type `(usize, &isize)`\n  --> /tmp/tmpvq0un0ci.rs:14:25\n   |\n14\
    \ |             odd[i.0] += i[1].0;\n   |                         ^^^^ help: to\
    \ access tuple elements, use: `i.1`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter().enumerate() {\n\
    \        if i[1].0 % 2 == 0 {\n            evens[i.0] += i[1].0;\n        } else\
    \ {\n            odds[i.0] += i[1].0;\n        }\n    }\n    evens.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `(usize, &isize)`\n  -->\
    \ /tmp/tmpttnct42g.rs:10:12\n   |\n10 |         if i[1].0 % 2 == 0 {\n   |   \
    \         ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot\
    \ index into a value of type `(usize, &isize)`\n  --> /tmp/tmpttnct42g.rs:11:27\n\
    \   |\n11 |             evens[i.0] += i[1].0;\n   |                          \
    \ ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot index\
    \ into a value of type `(usize, &isize)`\n  --> /tmp/tmpttnct42g.rs:13:26\n  \
    \ |\n13 |             odds[i.0] += i[1].0;\n   |                          ^^^^\
    \ help: to access tuple elements, use: `i.1`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphqeluonw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8t_20m6j.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpfpb3beh8.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpfpb3beh8.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp38264zas.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpz_ab1hdi.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpz_ab1hdi.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpqvec0tks.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpwe7_gabu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvgcw80nz.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6gknfs6q.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp5bd70kid.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqbgycwtv.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for i in lst {\n        if i % 2 == 0 {\n   \
    \         evens.push(i);\n        } else {\n            odds.push(i);\n      \
    \  }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n       \
    \ + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpekt7mjjj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22t6ps9o.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter() {\n        if\
    \ i % 2 == 0 {\n            evens[i] = evens[i] + 1;\n        } else {\n     \
    \       odds[i] = odds[i] + 1;\n        }\n    }\n    let mut sum = 0;\n    for\
    \ i in evens.iter() {\n        sum += i;\n    }\n    for i in odds.iter() {\n\
    \        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmps3g6yn2o.rs:11:13\n   |\n11 |             evens[i] = evens[i] + 1;\n\
    \   |             ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmps3g6yn2o.rs:11:24\n\
    \   |\n11 |             evens[i] = evens[i] + 1;\n   |                       \
    \ ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmps3g6yn2o.rs:13:13\n\
    \   |\n13 |             odds[i] = odds[i] + 1;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmps3g6yn2o.rs:13:23\n\
    \   |\n13 |             odds[i] = odds[i] + 1;\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 == 1).sum::<isize>()\n      \
    \  + odds.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcto4etoo.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp_pquvdl1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n  \
    \          evens.push(i);\n        } else {\n            odds.push(i);\n     \
    \   }\n    }\n    evens.iter().filter(|&i| i % 2 != 0).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph487r3z5.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmprs_2xcxr.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmprs_2xcxr.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpgrf243ba.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmph3ey8rxe.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7g_esfx2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpmud334h3.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpmud334h3.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzwiwgqz8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in lst.iter().enumerate() {\n\
    \        if i[1].0 % 2 == 0 {\n            evens[i.0] += i[1].0;\n        } else\
    \ {\n            odds[i.0] += i[1].0;\n        }\n    }\n    evens.iter().sum::<isize>()\n\
    \        + odds.iter().sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `(usize, &isize)`\n  -->\
    \ /tmp/tmpa_cav7zo.rs:10:12\n   |\n10 |         if i[1].0 % 2 == 0 {\n   |   \
    \         ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot\
    \ index into a value of type `(usize, &isize)`\n  --> /tmp/tmpa_cav7zo.rs:11:27\n\
    \   |\n11 |             evens[i.0] += i[1].0;\n   |                          \
    \ ^^^^ help: to access tuple elements, use: `i.1`\n\nerror[E0608]: cannot index\
    \ into a value of type `(usize, &isize)`\n  --> /tmp/tmpa_cav7zo.rs:13:26\n  \
    \ |\n13 |             odds[i.0] += i[1].0;\n   |                          ^^^^\
    \ help: to access tuple elements, use: `i.1`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for x in lst {\n        if x % 2 == 0 {\n   \
    \         evens.push(x);\n        } else {\n            odds.push(x);\n      \
    \  }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n        +\
    \ odds.iter().filter(|x| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpf7qofiur.rs:16:31\n\
    \   |\n16 |     evens.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |     \
    \                        - ^ - {integer}\n   |                             |\n\
    \   |                             &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n16 |     evens.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                             +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpf7qofiur.rs:17:36\n   |\n17 |         + odds.iter().filter(|x|\
    \ x % 2 == 0).sum::<isize>()\n   |                                  - ^ - {integer}\n\
    \   |                                  |\n   |                               \
    \   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n17 |         + odds.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n   |\
    \                                  +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
