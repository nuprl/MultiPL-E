name: HumanEval_153_Strongest_Extension
language: rust
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength_fraction = cap - sm;\n        if strength > strength_fraction {\n \
    \           extension = e;\n            strength = strength_fraction;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i64 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions.iter() {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut cap = extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count();\n        if cap > sm {\n            cap = cap\
    \ - sm;\n            sm = sm;\n        }\n        strength = cmp::max(strength,\
    \ cap - sm);\n    }\n    extension.unwrap_or(class_name)", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                strength -= 1;\n            }\n        }\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension = extension.to_lowercase();\n\
    \    extension = extension.as_str();\n    extension = extension.concat(\".\").to_lowercase();\n\
    \    extension = extension.concat(\".\").to_str();\n    extension = extension.concat(\"\
    .\").to_lowercase();\n    extension = extension.concat(\".\").to_str();\n    extension\
    \ = extension.concat(\".\").to_lowercase();\n    extension = extension.concat(\"\
    .\").to_str();\n    extension = extension.concat(\".\").to_lowercase();\n    extension\
    \ = extension.concat(\".\").to_str();\n    extension = extension.concat(\".\"\
    ).to_lowercase();\n    extension = extension.concat(\".\").to_str();\n    extension\
    \ = extension.concat(\".\").to_lowercase();\n    extension = extension.concat(\"\
    .\").to_str();\n    extension = extension.concat(\".\").to_lowercase();\n    extension\
    \ = extension.concat(\".\").to_str();\n    extension = extension.concat(\".\"\
    ).to_lowercase();\n    extension = extension.concat(\".\").to_str();\n    extension\
    \ = extension.concat(\".\").to_lowercase();\n    extension = extension.concat(\"\
    .\").to_str();\n    extension = extension.concat(\".\").to_lowercase();\n    extension\
    \ = extension.concat(\".\").to_str();\n    extension = extension.concat(\".\"\
    ).to_lowercase();\n    extension = extension.concat(\".\").to_str();\n    extension\
    \ = extension.concat(\".\").to_lowercase();\n    extension = extension.concat(\"\
    .\").to_str();\n    extension = extension.concat(\".\").to_lowercase();\n    extension\
    \ = extension.concat(\".\").to_str();\n    extension = extension.concat(\".\"\
    ).to_lowercase();\n    extension = extension.concat(\".\").to_str();\n    extension\
    \ = extension.concat(\".\").to_lowercase();\n    extension = extension.concat(\"\
    .\").to_str();\n    extension = extension.concat(\".\").to_lowercase();\n    extension\
    \ = extension.concat(\".\").to_str();\n    extension = extension.concat(\".\"\
    ).to_lowercase();\n    extension = extension.concat(\".", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm\n       \
    \ };\n        if strength > 0 {\n            extension = e.to_string();\n    \
    \        break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_ascii_lowercase(), -1);\n        }\n\
    \        extensions_map.insert(extension.clone(), extension_map);\n    }\n   \
    \ let mut max_strength = -1;\n    let mut max_extension = String::new();\n   \
    \ for (extension, extension_map) in extensions_map {\n        let strength = extension_map.len()\
    \ - extension.chars().filter(|c| c.is_ascii_lowercase()).count();\n        if\
    \ strength > max_strength {\n            max_strength = strength;\n          \
    \  max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ max_extension)", "    let mut strength: i64 = 0;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            strength = cap\
    \ - sm;\n            extension = extension.clone();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = e;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "  \
    \  let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    extension.split_whitespace().join(&class_name\
    \ + \".\").to_string()", "    let mut strength: i32 = 0;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ extension_len = extension.len();\n    \n    for extension in extensions {\n\
    \        let mut extension_len = extension.len();\n        let mut i = 0;\n  \
    \      while i < extension_len {\n            if extension[i] == class_name[i]\
    \ {\n                i += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        \n        if i == extension_len {\n        \
    \    strength += 1;\n        } else {\n            strength = extension_len -\
    \ i;\n        }\n    }\n    \n    if strength == 0 {\n        extension = class_name;\n\
    \    } else {\n        extension = class_name.to_string() + extension.to_string();\n\
    \    }\n    \n    return extension;", "    let mut strength = -1;\n    let mut\
    \ extension = String::new();\n    for extension in extensions {\n        let mut\
    \ extension_len = extension.len();\n        let mut class_len = class_name.len();\n\
    \        let mut i = 0;\n        while i < extension_len && i < class_len {\n\
    \            if extension[i] == class_name[i] {\n                i += 1;\n   \
    \             extension_len -= 1;\n                class_len -= 1;\n         \
    \   } else {\n                i += 1;\n            }\n        }\n        if extension_len\
    \ > strength {\n            strength = extension_len;\n            extension =\
    \ extension;\n        }\n    }\n    extension", "    let mut strength: i32 = -1;\n\
    \    let mut extension = String::new();\n    for extension in extensions {\n \
    \       let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        let mut i = 0;\n        while i < extension_length\
    \ && i < class_length {\n            if extension[i] >= class_name[i] {\n    \
    \            extension_length -= 1;\n                class_length -= 1;\n    \
    \        } else {\n                i += 1;\n            }\n        }\n       \
    \ if extension_length > 0 {\n            strength += 1;\n        }\n    }\n  \
    \  if strength == 0 {\n        String::from(class_name)\n    } else {\n      \
    \  String::from(class_name.to_string() + extensions[strength].to_string() + \"\
    StrongestExtensionName\")\n    }", "    let mut strength: i32 = -1;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            extension_map.insert(c.to_lowercase(),\
    \ -1);\n        }\n        extensions_map.insert(extension.to_lowercase(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extension = String::new();\n \
    \   let mut extension_map = extensions_map.get(class_name.to_lowercase());\n \
    \   if extension_map.is_none() {\n        return class_name;\n    }\n    for entry\
    \ in extension_map.iter() {\n        let mut extension_map = entry.clone();\n\
    \        let mut extension_strength = -1;\n        for c in class_name {\n   \
    \         if extension_map.contains_key(c.to_lowercase()) {\n                extension_map.insert(c.to_lowercase(),\
    \ -1);\n                extension_strength += 1;\n            }\n        }\n \
    \       if extension_strength > strength {\n            extension = entry.0;\n\
    \            strength = extension_strength;\n        }\n    }\n    return extension;",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        while extension_len > class_len {\n\
    \            extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \            extension_len -= extension.len();\n            class_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').collect::<String>().len();\n            extension = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n            extension_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| *c\
    \ >= 'A' && *c <= 'Z').collect::<String>().len();\n            extension = extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n            extension_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').collect::<String>().len();\n            extension = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n            extension_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| *c\
    \ >= 'A' && *c <= 'Z').collect::<String>().len();\n            extension = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n            extension_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::new();\n    let mut extension_len = extension.len();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        for\
    \ c in extension {\n            if c.is_uppercase() {\n                strength\
    \ = strength.saturating_add((c.to_lowercase().as_bytes()[0] as i32) - c.to_lowercase().as_bytes()[0]\
    \ as i32);\n            } else {\n                strength = strength.saturating_add((c.to_uppercase().as_bytes()[0]\
    \ as i32) - c.to_uppercase().as_bytes()[0] as i32);\n            }\n        }\n\
    \        if strength > 0 {\n            extension = extension.clone();\n     \
    \       extension.truncate(extension_len);\n            return format!(\"{}.{}\"\
    , class_name, extension);\n        }\n    }\n    extension = extension.clone();\n\
    \    extension.truncate(extension_len);\n    return format!(\"{}.{}\", class_name,\
    \ extension);", "    let mut strength: usize = 0;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension[i] == class_name[i] {\n\
    \                i += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut j = 0;\n        while j < class_len {\n\
    \            if class_name[j] == extension[j] {\n                j += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ let mut k = j;\n        while k < class_len {\n            if class_name[k]\
    \ == extension[k] {\n                k += 1;\n            } else {\n         \
    \       break;\n            }\n        }\n        let mut strength = k - j;\n\
    \        if strength > strength {\n            extension = extension;\n      \
    \      strength = k;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength: usize = 0;\n    let\
    \ mut extension = String::new();\n    for e in extensions {\n        let cap =\
    \ e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength += cap - sm;\n        extension\
    \ += &*e + &*(&cap - &sm);\n    }\n    if strength == 0 {\n        class_name\n\
    \    } else {\n        class_name + &*(&strength - &extension.len()) + &extension\n\
    \    }", "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm { cap - sm } else { sm - cap };\n        if strength > 0 {\n \
    \           extension = e.to_string();\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ mut c = e.chars().filter(|c| c.is_uppercase()).count();\n        let mut s =\
    \ e.chars().filter(|c| c.is_lowercase()).count();\n        if c > s {\n      \
    \      strength = -1;\n            extension = e;\n        } else {\n        \
    \    strength = c as f64 - s as f64;\n            extension = e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension: String = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = cap - sm;\n        if strength > 0 {\n            break;\n \
    \       }\n    }\n    extension.to_string() + class_name.to_string() + \".\" +\
    \ extensions[extensions.len() - strength].to_string()", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let mut c = e.chars().filter(|c| c.is_uppercase()).count();\n       \
    \ let mut s = e.chars().filter(|c| c.is_lowercase()).count();\n        if c >\
    \ s {\n            strength = -1;\n            extension = e;\n        } else\
    \ if c < s {\n            strength = s;\n            extension = e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        while extension_length >= class_length {\n    \
    \        extension = extension.chars().filter(|&c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            extension_length -= class_length;\n            class_length += 1;\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_length {\n            class_length -= extension_length;\n     \
    \       extension += extension.chars().filter(|&c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        }\n        let mut class_length = extension.len();\n        while class_length\
    \ >= extension_", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.push_str(class_name);\n    extension.push_str(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            match extension_map.entry(c) {\n  \
    \              hash_map::Entry::Occupied(mut e) => {\n                    e.insert(0);\n\
    \                }\n                hash_map::Entry::Vacant(e) => {\n        \
    \            e.insert(0);\n                }\n            }\n        }\n     \
    \   extensions_map.insert(extension, extension_map);\n    }\n    let mut max_strength\
    \ = -1;\n    let mut max_extension = String::new();\n    for extension in extensions_map\
    \ {\n        let mut extension_strength = extensions_map.get(extension).unwrap().len();\n\
    \        if extension_strength > max_strength {\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut best_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            let letter_strength = extension_map.get(letter).unwrap();\n \
    \           if letter_strength > extension_strength {\n                extension_strength\
    \ = letter_strength;\n                best_extension = extension;\n          \
    \  }\n        }\n        if extension_strength > strength {\n            strength\
    \ = extension_strength;\n            best_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for e in extensions {\n        let mut len = e.len();\n\
    \        for c in e {\n            if c.is_uppercase() {\n                len\
    \ -= 1;\n            }\n            if c.is_lowercase() {\n                len\
    \ -= 1;\n            }\n        }\n        if len > extension_len {\n        \
    \    extension = e;\n            extension_len = len;\n        }\n    }\n    if\
    \ strength == -1 {\n        return class_name + extension;\n    }\n    let mut\
    \ strength_len = strength.len();\n    for c in extension {\n        if c.is_uppercase()\
    \ {\n            strength_len -= 1;\n        }\n        if c.is_lowercase() {\n\
    \            strength_len -= 1;\n        }\n    }\n    if strength_len > extension_len\
    \ {\n        return class_name + extension;\n    }\n    return class_name + extension;",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase());\n    extension.concat(\".\").concat(format!(\"\
    {}\", strength));", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        let mut i = 0;\n  \
    \      while i < extension_length {\n            if extension[i] >= class_name[i]\
    \ {\n                extension_length -= 1;\n            } else {\n          \
    \      class_length -= 1;\n            }\n            i += 1;\n        }\n   \
    \     if extension_length == 0 {\n            strength = -1;\n            break;\n\
    \        }\n        if class_length == 0 {\n            strength = -1;\n     \
    \       break;\n        }\n        let mut j = 0;\n        while j < class_length\
    \ {\n            if class_name[j] >= extension[j] {\n                class_length\
    \ -= 1;\n            } else {\n                extension_length -= 1;\n      \
    \      }\n            j += 1;\n        }\n        if class_length == 0 {\n   \
    \         strength = -1;\n            break;\n        }\n        if extension_length\
    \ == 0 {\n            strength = -1;\n            break;\n        }\n        if\
    \ strength == -1 {\n            strength = extension_length - class_length;\n\
    \        }\n    }\n    if strength == -1 {\n        String::from(class_name)\n\
    \    } else {\n        String::from(&format!(\"{}.{}\", class_name, extensions[strength]))\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > strength {\n        \
    \    extension = e;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i64 = 0;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n        extension = extension.concat(e);\n   \
    \ }\n    if strength == 0 {\n        return class_name;\n    }\n    let mut index\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n    extension = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n    extension = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \    extension = extension.chars().filter(|c| c.is_uppercase()).count();\n   \
    \ extension = extension.chars().filter(|c| c.is_lowercase()).count();\n    extension\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n    extension = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n    extension = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \    extension = extension.chars().filter(|c| c.is_lowercase()).count();\n   \
    \ extension = extension.chars().filter(|c| c.is_uppercase()).count();\n    extension\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n    extension = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n    extension = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \    extension = extension.chars().filter(|c| c.is_uppercase()).count();\n   \
    \ extension = extension.chars().filter(|c| c.is_lowercase()).count();\n    extension\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n    extension = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n    extension = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \    extension = extension.chars().filter(|c| c.is_lowercase()).count();\n   \
    \ extension = extension.chars().filter(|c| c.is_uppercase()).count();\n    extension\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n    extension = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n    extension = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \    extension = extension.chars().filter(|", "    let mut strength: i32 = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ mut c = e.chars().filter(|c| c.is_uppercase()).count();\n        let mut s =\
    \ e.chars().filter(|c| c.is_lowercase()).count();\n        if c > s {\n      \
    \      strength = -1;\n            extension = e;\n        } else {\n        \
    \    strength = c as i32 - s as i32;\n            extension = e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.push_str(&class_name);\n    extension.push_str(&extensions[extensions.iter().position(|x|\
    \ x == extension).unwrap()]);\n    extension", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength += cap\
    \ - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[strength].to_lowercase());",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_frac\
    \ = cap - sm;\n        if strength_frac > strength {\n            extension =\
    \ e;\n            strength = strength_frac;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i32 = 0;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name.to_lowercase();\n        let mut extension = extension.to_lowercase();\n\
    \        let mut cap = class_name.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut i = 0;\n        while i < class_name.len() {\n\
    \            if class_name[i] == extension[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ let mut j = 0;\n        while j < extension.len() {\n            if extension[j]\
    \ == class_name[i] {\n                i += 1;\n                j += 1;\n     \
    \       } else {\n                break;\n            }\n        }\n        if\
    \ i == class_name.len() {\n            strength = -1;\n            break;\n  \
    \      }\n        if j == extension.len() {\n            strength = -1;\n    \
    \        break;\n        }\n        let cap = class_name.chars().filter(|c| c\
    \ >= 'A' && c <= 'Z').count();\n        let sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        let strength = cap - sm;\n        if\
    \ strength > strength {\n            strength = -1;\n        }\n    }\n    if\
    \ strength == -1 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string() + &format!(\"{}.{}\", class_name, extensions[strength])\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension_length = extension.len();\n        let\
    \ mut class_length = class_name.len();\n        while extension_length >= class_length\
    \ {\n            extension_length -= class_length;\n            class_length -=\
    \ 1;\n        }\n        let mut i = 0;\n        while i < extension_length {\n\
    \            if extension[i] == class_name[i] {\n                i += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ if i < extension_length {\n            strength = extension_length - i;\n  \
    \          break;\n        }\n    }\n    if strength == -1 {\n        String::from(class_name)\n\
    \    } else {\n        String::from(class_name + \".\" + extensions[strength])\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = cap - sm;\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = class_name.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut cap = extension_len;\n        let mut sm = 0;\n        while cap > sm {\n\
    \            let mut c = extension[cap..].chars().next().unwrap();\n         \
    \   while c >= 'A' && c <= 'Z' {\n                cap -= 1;\n                c\
    \ -= 1;\n            }\n            while c >= 'a' && c <= 'z' {\n           \
    \     sm += 1;\n                c -= 1;\n            }\n        }\n        if\
    \ cap > sm {\n            strength = -1;\n            break;\n        }\n    \
    \    if strength == -1 || strength > cap - sm {\n            strength = cap -\
    \ sm;\n            extension = extension.clone();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut cap = String::new();\n\
    \        let mut sm = String::new();\n        for c in extension.chars() {\n \
    \           if c.is_uppercase() {\n                cap.push(c);\n            }\
    \ else {\n                sm.push(c);\n            }\n        }\n        let cap_len\
    \ = cap.chars().count();\n        let sm_len = sm.chars().count();\n        let\
    \ cap_strength = cap_len - sm_len;\n        if cap_strength > strength {\n   \
    \         strength = cap_strength;\n            extension = extension;\n     \
    \   }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut class_length\
    \ = class_name.len();\n        let mut i = 0;\n        while i < extension_length\
    \ && i < class_length {\n            if extension[i] >= class_name[i] {\n    \
    \            extension_length -= 1;\n            } else {\n                class_length\
    \ -= 1;\n            }\n            i += 1;\n        }\n        if extension_length\
    \ == 0 {\n            strength = -1;\n            break;\n        }\n        let\
    \ mut i = 0;\n        while i < extension_length {\n            if extension[i]\
    \ == class_name[i] {\n                strength += 1;\n                i += 1;\n\
    \            } else {\n                strength += 1;\n            }\n       \
    \ }\n    }\n    if strength == -1 {\n        String::from(class_name)\n    } else\
    \ {\n        String::from(class_name.to_string() + extensions[strength].to_string()\
    \ + class_name)\n    }", "    let mut strength: i32 = 0;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        let mut class_len = class_name.len();\n        let\
    \ mut i = 0;\n        while i < extension_len {\n            if extension[i] ==\
    \ class_name[i] {\n                extension_len -= 1;\n                class_len\
    \ -= 1;\n                i += 1;\n            } else {\n                i += 1;\n\
    \            }\n        }\n        if extension_len > 0 {\n            strength\
    \ += 1;\n        }\n    }\n    if strength > 0 {\n        let mut i = 0;\n   \
    \     while i < extension.len() {\n            if extension[i] != class_name[i]\
    \ {\n                break;\n            }\n            i += 1;\n        }\n \
    \       extension = extension.substr(0, i);\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength_fraction = cap - sm;\n        if strength_fraction > strength {\n \
    \           strength = strength_fraction;\n            extension = e;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength += cap\
    \ - sm;\n        if strength > 0 {\n            extension = e;\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut cap = String::new();\n        let mut sm = String::new();\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        if cap.len() > sm.len() {\n            strength\
    \ = cap.len() - sm.len();\n            extension = extension;\n        }\n   \
    \ }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for extension in extensions {\n \
    \       let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            cap = cap - sm;\n\
    \            sm = sm;\n        }\n        strength = if cap > strength {\n   \
    \         cap - sm\n        } else {\n            strength\n        };\n     \
    \   class_name = class_name.to_string();\n        extension = extension.to_string();\n\
    \    }\n    class_name + extension", "    let mut strength = -1;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < class_name.len() {\n            if class_name.chars().all(|c|\
    \ c.is_uppercase() && c != extension.chars().nth(i)) {\n                break;\n\
    \            }\n            i += 1;\n        }\n        if i == class_name.len()\
    \ {\n            continue;\n        }\n        let mut j = 0;\n        while j\
    \ < extension.len() {\n            if extension.chars().all(|c| c.is_lowercase()\
    \ && c != class_name.chars().nth(i)) {\n                break;\n            }\n\
    \            j += 1;\n        }\n        if j == extension.len() {\n         \
    \   continue;\n        }\n        let mut cap = class_name.chars().nth(i).unwrap();\n\
    \        let mut sm = extension.chars().nth(j).unwrap();\n        if cap - sm\
    \ > strength {\n            strength = cap - sm;\n            extension = class_name.chars().nth(i).unwrap().to_string();\n\
    \        }\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength: i32 = -1;\n    let mut extension:\
    \ String = String::new();\n    for extension in extensions {\n        let mut\
    \ class_name = class_name;\n        let mut extension = extension;\n        let\
    \ mut counter: i32 = 0;\n        while counter < CAP_AND_SM.len() {\n        \
    \    let mut counter: i32 = 0;\n            while counter < CAP_AND_SM.len() {\n\
    \                if CAP_AND_SM[counter] == extension[0] {\n                  \
    \  class_name = &class_name[counter..];\n                    counter = CAP_AND_SM.len();\n\
    \                    break;\n                }\n                counter += 1;\n\
    \            }\n            counter += 1;\n        }\n        if strength == -1\
    \ || strength > CAP_AND_SM.len() - counter + 1 {\n            strength = CAP_AND_SM.len()\
    \ - counter + 1;\n            extension = class_name;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i64 = 0;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength_frac = cap - sm;\n        if strength_frac > strength {\n\
    \            extension = e;\n            strength = strength_frac;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        for c in extension\
    \ {\n            if c.is_uppercase() {\n                strength += 1;\n     \
    \       }\n            if c.is_lowercase() {\n                strength -= 1;\n\
    \            }\n        }\n        if strength > 0 {\n            break;\n   \
    \     }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i64 = 0;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength += cap\
    \ - sm;\n        extension = extension.concat(e);\n    }\n    extension = extension.concat(\"\
    .\");\n    extension = extension.concat(class_name);\n    extension = extension.concat(\"\
    .\");\n    extension = extension.concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()]);\n    extension", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut c = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \        let mut s = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n\
    \        if c > s {\n            strength = -1;\n            extension = extension.clone();\n\
    \        } else {\n            strength = c as i32;\n            extension = extension.clone();\n\
    \        }\n    }\n    if strength == -1 {\n        return class_name;\n    }\n\
    \    let mut c = class_name.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \    let mut s = class_name.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n\
    \    if c > s {\n        strength = -1;\n        class_name = class_name.clone();\n\
    \    } else {\n        strength = c as i32;\n        class_name = class_name.clone();\n\
    \    }\n    format!(\"{}.{}\", class_name, extensions[strength])", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = 0;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut c = extension.chars().filter(|c| *c >= 'A'\
    \ && *c <= 'Z').count();\n        let mut s = extension.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').count();\n        strength = if c > s { c - s } else {\
    \ s - c };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        extension\
    \ = extension.concat(e);\n    }\n    extension.concat(class_name.to_lowercase());\n\
    \    extension.concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase());\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             strength += 1;\n            }\n            if c.is_lowercase() {\n\
    \                strength += 1;\n            }\n        }\n        if strength\
    \ > extension_len {\n            extension = extension;\n            extension_len\
    \ = extension.len();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    let\
    \ mut extension_len = extension.len();\n    for &e in extensions {\n        if\
    \ e.len() > extension_len {\n            extension = e;\n            extension_len\
    \ = e.len();\n        }\n    }\n    for &e in extensions {\n        if e.len()\
    \ < extension_len {\n            extension = e;\n            extension_len = e.len();\n\
    \        }\n    }\n    for &e in extensions {\n        if e.len() == extension_len\
    \ {\n            let cap = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \            let sm = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n\
    \            strength = cap - sm;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n\
    \    let mut extension_len = extension.len();\n    for &e in extensions {\n  \
    \      if e.len() > extension_len {\n            extension = e;\n            extension_len\
    \ = e.len();\n        }\n    }\n    for &e in extensions {\n        if e.len()\
    \ < extension_len {\n            extension = e;\n            extension_len = e.len();\n\
    \        }\n    }\n    for &e in extensions {\n        if e.len() == extension_len\
    \ {\n            strength += e.chars().filter(|c| c.is_uppercase()).count() as\
    \ i32;\n            strength += e.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32;\n        }\n    }\n    \n    if strength == 0 {\n        return class_name;\n\
    \    }\n    let strength_fraction = strength as f64 / extension_len as f64;\n\
    \    let mut extension_strength = String::new();\n    for &e in extensions {\n\
    \        if e.len() == extension_len {\n            extension_strength += e.chars().filter(|c|\
    \ c.is_uppercase()).count() as i32;\n            extension_strength += e.chars().filter(|c|\
    \ c.is_lowercase()).count() as i32;\n        }\n    }\n    if extension_strength\
    \ == 0 {\n        return class_name;\n    }\n    let extension_strength_fraction\
    \ = extension_strength as f64 / extension_len as f64;\n    if extension_strength_fraction\
    \ > strength_fraction {\n        return class_name;\n    }\n    \n    let mut\
    \ extension_strength_fraction = extension_strength as f64 / extension_len as f64;\n\
    \    for &e in extensions {\n        if e.len() == extension_len {\n         \
    \   extension_strength_fraction -= e.chars().filter(|c| c.is_uppercase()).count()\
    \ as i32;\n            extension_strength_fraction -= e.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32;\n        }\n    }\n    if extension_strength_fraction < strength_fraction\
    \ {\n        return class_name;\n    }\n    \n    extension.chars().filter(|c|\
    \ c.is_uppercase()).count().to_string()", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    for e in extensions {\n        let cap =\
    \ e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let mut c = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n    \
    \    let mut s = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ if c > s {\n            c -= s;\n        }\n        if c > strength {\n    \
    \        strength = c;\n            extension = e;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength_fraction = cap - sm;\n        if strength > strength_fraction {\n \
    \           extension = e;\n            strength = strength_fraction;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                extension_len -= 1;\n\
    \            } else if c.is_lowercase() {\n                extension_len += 1;\n\
    \            }\n        }\n        if extension_len > strength {\n           \
    \ strength = extension_len;\n            extension = extension;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::new();\n    for e in extensions {\n   \
    \     let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm - cap\n     \
    \   };\n        if strength > 0 {\n            extension = e.to_string();\n  \
    \          break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        while extension_len > class_len {\n\
    \            extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            extension_len -= extension.len();\n            class_len -= extension.len();\n\
    \        }\n        let mut class_len = class_name.len();\n        while class_len\
    \ > extension_len {\n            class_len = class_name.chars().filter(|c| c >=\
    \ 'a' && c <= 'z').collect::<String>().len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').collect::<String>();\n            extension_len -= extension.len();\n\
    \        }\n        let mut diff = extension_len - class_len;\n        if diff\
    \ > 0 {\n            diff /= 2;\n        }\n        if diff > strength {\n   \
    \         strength = diff;\n            extension = extension.clone();\n     \
    \   }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_count\
    \ = extensions.len();\n    let mut extensions_strength = -1;\n    let mut extensions_strongest\
    \ = String::new();\n    for extension in extensions {\n        let mut extension_strength\
    \ = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if extension_strength > extensions_strength\
    \ {\n            extensions_strength = extension_strength;\n            extensions_strongest\
    \ = extension;\n        }\n        extensions_count -= 1;\n    }\n    if extensions_count\
    \ == 0 {\n        return class_name;\n    }\n    let mut extensions_strength_percentage\
    \ = extensions_strength / extensions_count;\n    if extensions_strength_percentage\
    \ > 1.0 {\n        extensions_strength_percentage = 1.0;\n    }\n    let mut extensions_strongest_percentage\
    \ = extensions_strongest.chars().filter(|c| c.is_uppercase()).count() / extensions_strongest.chars().filter(|c|\
    \ c.is_lowercase()).count();\n    if extensions_strongest_percentage > 1.0 {\n\
    \        extensions_strongest_percentage = 1.0;\n    }\n    let mut strongest_extension\
    \ = String::new();\n    strongest_extension.push_str(&class_name);\n    strongest_extension.push_str(&extensions_strongest);\n\
    \    strongest_extension.push_str(&extensions_strongest_percentage.to_string());\n\
    \    strongest_extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name.to_string();\n        let mut extension = extension.to_string();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let mut extension = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut extension = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut class_name = class_name.to_string();\n\
    \        let mut extension = extension.to_string();\n        let mut class_name\
    \ = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let\
    \ mut extension = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut extension = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut class_name = class_name.to_string();\n\
    \        let mut extension = extension.to_string();\n        let mut class_name\
    \ = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let\
    \ mut extension = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let mut class_name = class_name.to_string();\n        let mut extension\
    \ = extension.to_string();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut extension = extension.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        let mut class_name = class_name.to_string();\n\
    \        let mut extension = extension.to_string();\n        let mut class_name\
    \ = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let\
    \ mut extension = extension.chars().filter(|", "    let mut strength: usize =\
    \ 0;\n    let mut extension: String;\n    for extension in extensions {\n    \
    \    let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n       \
    \ strength += cap - sm;\n    }\n    if strength == 0 {\n        return class_name;\n\
    \    }\n    let mut extension = String::new();\n    let mut i = 0;\n    while\
    \ i < extensions.len() {\n        if extension.len() < extensions.len() {\n  \
    \          extension.push_str(&extensions[i]);\n        } else {\n           \
    \ extension.push_str(&extensions[extensions.len() - 1]);\n        }\n        i\
    \ += 1;\n    }\n    extension.push_str(&class_name);\n    extension.push_str(&extensions[extensions.len()\
    \ - 1]);\n    extension", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm { cap - sm } else { sm - cap };\n        if strength > 0 {\n \
    \           extension = e.to_string();\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let mut c = e.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n  \
    \      let mut s = e.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n   \
    \     if c > s {\n            strength = -1;\n            extension = e;\n   \
    \     } else if c < s {\n            strength = s;\n            extension = e;\n\
    \        } else {\n            strength = c - s;\n            extension = e;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension = extension.clone();\n        let mut\
    \ class_name = class_name.clone();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').collect::<String>();\n        let mut class_name = class_name.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::", "    let mut strength: i64 = 0;\n    let\
    \ mut extension: Option<String> = None;\n    for extension in extensions.iter()\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm\n        };\n        if strength > 0 {\n            break;\n     \
    \   }\n    }\n    match extension {\n        Some(extension) => format!(\"{}.{}\"\
    , class_name, extension),\n        None => format!(\"{}\", class_name),\n    }",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_length = extension.len();\n     \
    \   let mut class_length = class_name.len();\n        let mut i = 0;\n       \
    \ while i < extension_length && i < class_length {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_length -= 1;\n               \
    \ class_length -= 1;\n            } else {\n                i += 1;\n        \
    \    }\n        }\n        if extension_length == 0 {\n            strength =\
    \ -1;\n            break;\n        }\n        let mut i = 0;\n        while i\
    \ < extension_length {\n            if extension[i] == class_name[i] {\n     \
    \           i += 1;\n            } else {\n                break;\n          \
    \  }\n        }\n        if i == extension_length {\n            strength = -1;\n\
    \            break;\n        }\n        strength = extension_length - class_length;\n\
    \    }\n    if strength == -1 {\n        String::from(class_name)\n    } else\
    \ {\n        String::from(class_name + \".\" + extensions[strength])\n    }",
  "    let mut strength: usize = 0;\n    let mut extension = String::new();\n    let\
    \ mut extension_len = extension.len();\n    let mut i = 0;\n    for extension\
    \ in extensions {\n        extension_len -= extension.len();\n        if extension_len\
    \ == 0 {\n            strength = i;\n            extension = extension.to_owned();\n\
    \        }\n        i += 1;\n    }\n    extension = extension.to_owned();\n  \
    \  if strength == 0 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string() + &format!(\"{}.{}\", class_name, &strength)\n    }",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut cap = String::new();\n        let mut sm =\
    \ String::new();\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        let cap_len = cap.chars().count();\n      \
    \  let sm_len = sm.chars().count();\n        let cap_diff = cap_len - sm_len;\n\
    \        if cap_diff > strength {\n            strength = cap_diff;\n        \
    \    extension = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        while extension_length\
    \ >= class_length {\n            let mut extension_letter = extension.chars().nth(extension_length).unwrap();\n\
    \            let mut class_letter = class_name.chars().nth(class_length).unwrap();\n\
    \            while class_letter != extension_letter {\n                class_letter\
    \ = class_letter - 1;\n            }\n            extension_letter = extension_letter\
    \ - 1;\n            class_length = class_length - 1;\n        }\n        if strength\
    \ < 0 {\n            strength = extension_length;\n            extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut class_name = class_name.to_lowercase();\n    \
    \    let mut extension = extension.to_lowercase();\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        let mut i = 0;\n  \
    \      while i < extension_length && i < class_length {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_length -= 1;\n            } else\
    \ {\n                class_length -= 1;\n            }\n            i += 1;\n\
    \        }\n        if extension_length == 0 {\n            strength = -1;\n \
    \           break;\n        }\n        if extension_length < class_length {\n\
    \            strength = -1;\n            break;\n        }\n        if extension_length\
    \ < class_length && extension_length > 0 {\n            strength = extension_length\
    \ - class_length;\n            break;\n        }\n    }\n    if strength == -1\
    \ {\n        String::from(class_name)\n    } else {\n        String::from(class_name.to_string()\
    \ + extensions[strength].to_string() + \"StrongestExtensionName\")\n    }", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    for e\
    \ in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  strength = if cap > sm {\n            cap - sm\n        } else {\n        \
    \    sm - cap\n        };\n        extension = extension.concat(e);\n    }\n \
    \   extension.concat(\".\").concat(class_name.to_lowercase()).to_owned()", " \
    \   let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let mut extension_upper = extension.to_uppercase();\n\
    \        let mut extension_lower = extension.to_lowercase();\n        let mut\
    \ extension_len = extension_upper.len() + extension_lower.len();\n        let\
    \ mut extension_strength = -1;\n        for char in extension {\n            if\
    \ char == char.to_lowercase() {\n                extension_strength += 1;\n  \
    \          }\n            if char == char.to_uppercase() {\n                extension_strength\
    \ += 1;\n            }\n        }\n        if extension_strength > strength {\n\
    \            strength = extension_strength;\n            extension = extension_upper;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: usize = 0;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension += &*e + &*cap + &*sm;\n    }\n    if strength\
    \ == 0 {\n        return class_name;\n    }\n    let mut extension = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n    extension = extension.cmp(&extensions[extension.len()-1]).unwrap();\n\
    \    extension += &*extensions[extension.len()-1];\n    extension += &*extensions[extension.len()-2];\n\
    \    extension += &*extensions[extension.len()-3];\n    extension += &*extensions[extension.len()-4];\n\
    \    extension += &*extensions[extension.len()-5];\n    extension += &*extensions[extension.len()-6];\n\
    \    extension += &*extensions[extension.len()-7];\n    extension += &*extensions[extension.len()-8];\n\
    \    extension += &*extensions[extension.len()-9];\n    extension += &*extensions[extension.len()-10];\n\
    \    extension += &*extensions[extension.len()-11];\n    extension += &*extensions[extension.len()-12];\n\
    \    extension += &*extensions[extension.len()-13];\n    extension += &*extensions[extension.len()-14];\n\
    \    extension += &*extensions[extension.len()-15];\n    extension += &*extensions[extension.len()-16];\n\
    \    extension += &*extensions[extension.len()-17];\n    extension += &*extensions[extension.len()-18];\n\
    \    extension += &*extensions[extension.len()-19];\n    extension += &*extensions[extension.len()-20];\n\
    \    extension += &*extensions[extension.len()-21];\n    extension += &*extensions[extension.len()-22];\n\
    \    extension += &*extensions[extension.len()-23];\n    extension += &*extensions[extension.len()-24];\n\
    \    extension += &*extensions[extension.len()-25];\n    extension += &*extensions[extension.len()-26];\n\
    \    extension += &*extensions[extension.len", "    let mut strength = -1;\n \
    \   let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension: String;\n    for extension in extensions {\n\
    \        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n \
    \       let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n   \
    \     strength += cap - sm;\n    }\n    if strength == 0 {\n        return class_name;\n\
    \    }\n    let mut extension = String::new();\n    extension.push_str(&class_name);\n\
    \    extension.push_str(&extensions[strength]);\n    extension", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    let\
    \ mut extension_len = extension.len();\n    let mut i = 0;\n    for extension\
    \ in extensions {\n        let mut j = 0;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                strength = strength.saturating_add((c.to_lowercase().as_bytes()[i]\
    \ - c.to_lowercase().as_bytes()[j]).unwrap());\n                i += 1;\n    \
    \        }\n            if c.is_lowercase() {\n                strength = strength.saturating_add((c.to_uppercase().as_bytes()[i]\
    \ - c.to_uppercase().as_bytes()[j]).unwrap());\n                i += 1;\n    \
    \        }\n            j += 1;\n        }\n    }\n    extension = extension.split_whitespace().collect::<Vec<_>>().sort_by_key(|x|\
    \ x.0).collect::<Vec<_>>().join(\"\");\n    if strength == -1 {\n        extension\
    \ = extension.split_whitespace().collect::<Vec<_>>().sort_by_key(|x| x.1).collect::<Vec<_>>().join(\"\
    \");\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength += cap\
    \ - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(class_name.concat(\"\
    .\").concat(extensions[extensions.iter().find_index(|e| e.contains(&extension)).unwrap()]));\n\
    \    return extension", "    let mut strength: i32 = -1;\n    let mut extension:\
    \ String = String::new();\n    for extension in extensions {\n        let mut\
    \ cap: i32 = 0;\n        let mut sm: i32 = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else if c.is_lowercase() {\n                sm += 1;\n            }\n   \
    \     }\n        strength = cap - sm;\n        if strength > 0 {\n           \
    \ break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    for e\
    \ in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = cap - sm;\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        while extension_len > class_len {\n\
    \            extension = extension.chars().filter(|c| c.is_uppercase()).collect::<String>();\n\
    \            extension_len -= extension.len();\n            class_len -= extension.len();\n\
    \        }\n        let mut class_len = extension.len();\n        while class_len\
    \ > extension_len {\n            extension = extension.chars().filter(|c| c.is_lowercase()).collect::<String>();\n\
    \            class_len -= extension.len();\n            extension_len -= extension.len();\n\
    \        }\n        if extension_len > strength {\n            strength = extension_len;\n\
    \            extension = extension.chars().filter(|c| !c.is_uppercase()).collect::<String>();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut cap = extension_len;\n        let mut sm = extension_len;\n        while\
    \ cap > sm {\n            cap -= 1;\n            sm -= 1;\n        }\n       \
    \ if cap == sm {\n            strength = -1;\n            break;\n        }\n\
    \        extension = extension.chars().filter(|c| c.is_uppercase()).collect::<String>().to_lowercase();\n\
    \        if extension_len == cap {\n            strength = -1;\n            break;\n\
    \        }\n        extension = extension.chars().filter(|c| c.is_lowercase()).collect::<String>().to_uppercase();\n\
    \        if extension_len == sm {\n            strength = -1;\n            break;\n\
    \        }\n    }\n    if strength == -1 {\n        class_name\n    } else {\n\
    \        format!(\"{}.{}\", class_name, extension)\n    }", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                strength -= 1;\n            }\n        }\n        if strength\
    \ > 0 {\n            extension = extension.clone();\n            extension_len\
    \ -= 1;\n        }\n    }\n    extension = extension.clone();\n    extension_len\
    \ -= 1;\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let mut c = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n   \
    \     let mut s = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  if c > s {\n            strength = -1;\n            extension = e;\n      \
    \  } else {\n            strength = c as i32 - s as i32;\n            extension\
    \ = e;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "  \
    \  let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            strength = cap - sm;\n            extension = e;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = 0;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                strength += 1;\n            }\n        }\n        if strength\
    \ > extension_len {\n            extension = extension;\n            extension_len\
    \ = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i64 = 0;\n    let mut extension = String::new();\n    let\
    \ mut extension_len = extension.len();\n    let mut class_len = class_name.len();\n\
    \    let mut i = 0;\n    while i < class_len {\n        if extension_len > 0 {\n\
    \            let mut j = 0;\n            while j < extension_len {\n         \
    \       if class_name[i] == extension[j] {\n                    strength += 1;\n\
    \                    i += 1;\n                    extension_len -= 1;\n      \
    \              j += 1;\n                } else {\n                    j += 1;\n\
    \                }\n            }\n        }\n        i += 1;\n    }\n    if extension_len\
    \ > 0 {\n        extension = extension.split_whitespace().collect();\n       \
    \ extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension = extension.iter().cloned().collect::<Vec<_>>();\n        extension\
    \ = extension.iter().cloned().collect::<Vec<_>>();\n        extension = extension.iter().cloned().collect::<Vec<_>>();\n\
    \        extension", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i64 = 0;\n    let mut extension = String::new();\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|x|\
    \ x.to_lowercase() == extension).unwrap()].to_lowercase());", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut c = extension.chars();\n        let mut i = 0;\n        while\
    \ i < c.len() {\n            if c[i].is_uppercase() {\n                i += 1;\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     if strength == -1 || strength > i {\n            strength = i;\n       \
    \     extension = extension;\n        }\n    }\n    class_name.to_string() + extension.to_string()",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_length = extension.len();\n     \
    \   let mut class_length = class_name.len();\n        let mut i = 0;\n       \
    \ while i < extension_length && i < class_length {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_length -= 1;\n               \
    \ class_length -= 1;\n            } else {\n                i += 1;\n        \
    \    }\n        }\n        if extension_length > 0 {\n            strength +=\
    \ 1;\n        }\n    }\n    if strength == 0 {\n        return class_name;\n \
    \   }\n    let mut strength_str = String::new();\n    for _ in 0..(strength as\
    \ usize) {\n        strength_str.push('.');\n    }\n    strength_str.push_str(&class_name.to_string());\n\
    \    strength_str.push_str(&extensions[strength as usize - 1]);\n    strength_str",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    extension.split_whitespace().join(&class_name\
    \ + \".\").to_string()", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        \n        if cap > sm {\n            extension = e;\n            strength\
    \ = cap - sm;\n        }\n    }\n    \n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let mut c = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let mut s = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n   \
    \     if c > s {\n            c -= s;\n        }\n        strength = if strength\
    \ == -1 || c > strength {\n            c\n        } else {\n            strength\n\
    \        };\n        extension += &format!(\"{}.{}\", class_name, e);\n    }\n\
    \    extension", "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut cap_len = extension_len.saturating_sub(1);\n        let mut sm\
    \ = extension_len.saturating_sub(2);\n        if cap_len > sm {\n            cap_len\
    \ = sm;\n        }\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut c = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut s = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if c > s {\n            strength = -1;\n            extension = extension.clone();\n\
    \        } else {\n            strength = c as i32;\n            extension = extension.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension_length = extension.len();\n        let\
    \ mut class_length = class_name.len();\n        let mut i = 0;\n        while\
    \ i < extension_length && i < class_length {\n            if extension[i] >= class_name[i]\
    \ {\n                extension_length -= 1;\n                class_length -= 1;\n\
    \            } else {\n                extension_length -= 1;\n              \
    \  class_length -= 1;\n                i += 1;\n            }\n        }\n   \
    \     if extension_length == 0 {\n            strength = -1;\n            break;\n\
    \        }\n        if extension_length < class_length {\n            strength\
    \ = -1;\n            break;\n        }\n        if extension_length == class_length\
    \ {\n            if extension_length < strength {\n                strength =\
    \ extension_length;\n                extension = extension;\n            }\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: usize = 0;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    if strength\
    \ == 0 {\n        String::from(class_name)\n    } else {\n        String::from(class_name.to_string()\
    \ + extension.to_string() + &format!(\"{}\", strength))\n    }", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.contains(&extension)\
    \ {\n            class_name = &class_name[..class_name.len() - extension.len()];\n\
    \            counter += 1;\n        }\n        strength = counter;\n    }\n  \
    \  if strength == -1 {\n        class_name\n    } else {\n        class_name.to_string()\
    \ + extension.to_string() + &format!(\"{}.{}\", class_name, strength)\n    }",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm\n        };\n        if strength > 0 {\n            break;\n     \
    \   }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        let mut cap = extension_len;\n\
    \        let mut sm = extension_len;\n        while cap > sm {\n            cap\
    \ -= 1;\n            sm -= 1;\n        }\n        if cap > strength {\n      \
    \      strength = cap;\n            extension = extension;\n        }\n    }\n\
    \    class_name.to_string() + \".\" + extension.to_string()", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let mut extension_upper = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut extension_lower = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = extension_upper - extension_lower;\n        if strength\
    \ > strength {\n            extension = extension;\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = 0;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.to_lowercase();\n \
    \       let mut extension = extension.to_lowercase();\n        let mut cap = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    extension.to_string() + extensions[extensions.iter().position(|x|\
    \ x.to_lowercase().cmp(&class_name).unwrap()).unwrap()]", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for extension in extensions {\n        let mut extension_len\
    \ = extension.len();\n        for c in extension {\n            if c >= 'A' &&\
    \ c <= 'Z' {\n                strength += 1;\n            }\n            if c\
    \ >= 'a' && c <= 'z' {\n                strength += 1;\n            }\n      \
    \  }\n        if strength > extension_len {\n            extension = extension;\n\
    \            extension_len = extension.len();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        if strength > 0 {\n            extension =\
    \ e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for extension in extensions {\n        let mut extension_length\
    \ = extension.len();\n        let mut class_length = class_name.len();\n     \
    \   while extension_length >= class_length {\n            extension = extension.split_whitespace()[0];\n\
    \            extension_length -= class_length;\n            class_length -= extension_length;\n\
    \        }\n        let mut class_name = class_name.split_whitespace()[0];\n \
    \       let mut extension_strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extension\
    \ = extension.split_whitespace()[0];\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength: usize = 0;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n        extension = extension.concat(e);\n   \
    \ }\n    extension.concat(\".\").concat(class_name.to_lowercase());\n    extension.concat(\"\
    .\").concat(format!(\"{}\", strength));\n    return extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for e in extensions {\n \
    \       let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength =\
    \ if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        for c in extension {\n            if c.is_uppercase() {\n           \
    \     extension_length -= 1;\n            }\n            if c.is_lowercase() {\n\
    \                extension_length -= 1;\n            }\n        }\n        if\
    \ strength == -1 || strength > extension_length {\n            strength = extension_length;\n\
    \            extension = extension;\n        }\n    }\n    format!(\"{}.{}\",\
    \ class_name, extension)", "    let mut strength: i32 = -1;\n    let mut extension:\
    \ String = String::new();\n    for extension in extensions {\n        let cap\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm =\
    \ extension.chars().filter(|c| c.is_lowercase()).count();\n        strength =\
    \ if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension = extension.clone();\n        let mut\
    \ cap = String::new();\n        let mut sm = String::new();\n        for c in\
    \ extension {\n            if c.is_uppercase() {\n                cap.push(c);\n\
    \            } else {\n                sm.push(c);\n            }\n        }\n\
    \        let cap_len = cap.chars().count();\n        let sm_len = sm.chars().count();\n\
    \        let cap_num = cap_len - sm_len;\n        let cap_den = cap_len + sm_len;\n\
    \        let strength = cap_num / cap_den;\n        if strength > strength {\n\
    \            extension = extension.clone();\n            strength = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.contains(&extension)).unwrap()].to_lowercase())", "    let mut strength: i32\
    \ = 0;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = cap - sm;\n        if strength > 0 {\n            break;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    extension.split_whitespace().join(&class_name\
    \ + \".\").to_string()", "    let mut strength: i32 = -1;\n    let mut extension:\
    \ String;\n    for extension in extensions {\n        let mut c = extension.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        let mut s = extension.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').count();\n        let strength = c.saturating_sub(s)\
    \ as i32;\n        if strength > 0 {\n            break;\n        }\n    }\n \
    \   if strength == -1 {\n        extension = extensions[0];\n    } else {\n  \
    \      extension = format!(\"{}.{}\", class_name, extension);\n    }\n    return\
    \ extension;", "    let mut strength: i32 = 0;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(class_name.to_lowercase());\n\
    \    extension.concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase());\n    extension.concat(\".\")", " \
    \   let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ extension_len = extension.len();\n    for e in extensions {\n        let mut\
    \ e = e.to_lowercase();\n        e = e.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut c = e.len();\n        while c > 0 {\n            strength = strength\
    \ * c + 1;\n            c -= 1;\n        }\n        if strength > extension_len\
    \ {\n            extension = e;\n            extension_len = e.len();\n      \
    \  }\n    }\n    extension.push_str(&class_name);\n    extension.push_str(&extensions[strength]);\n\
    \    extension", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength: i32 = 0;\n    let mut extension:\
    \ String;\n    for extension in extensions {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut cap = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        if cap > sm {\n            cap = cap\
    \ - sm;\n            class_name = &class_name[..cap];\n            extension =\
    \ &extension[cap..];\n        } else {\n            sm = sm - cap;\n         \
    \   class_name = &class_name[..sm];\n            extension = &extension[sm..];\n\
    \        }\n        if class_name == class_name {\n            strength += 1;\n\
    \        }\n    }\n    if strength == 0 {\n        return class_name;\n    }\n\
    \    let mut strength_str = String::new();\n    strength_str.push_str(&format!(\"\
    {}.{}\", class_name, extensions[strength]));\n    return strength_str;", "   \
    \ let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ extension_len = extension.len();\n    for e in extensions {\n        let mut\
    \ e = e.to_lowercase();\n        \n        // Capitalize first letter\n      \
    \  if e.len() > 0 {\n            e.chars().for_each(|c| {\n                if\
    \ c >= 'A' && c <= 'Z' {\n                    c += ('A' - 'a');\n            \
    \    }\n            });\n        }\n        \n        // Count number of letters\n\
    \        let mut count = 0;\n        for c in e {\n            if c >= 'A' &&\
    \ c <= 'Z' {\n                count += 1;\n            }\n        }\n        \n\
    \        // Calculate strength\n        let mut c = e.chars().count();\n     \
    \   if c > 0 {\n            c /= 2;\n        }\n        \n        // Calculate\
    \ strength\n        let mut s = count - c;\n        if s > 0 {\n            s\
    \ /= 2;\n        }\n        \n        // Compare strength\n        if strength\
    \ < s {\n            strength = s;\n            extension = e;\n        }\n  \
    \  }\n    \n    // Return extension\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    let\
    \ mut i = 0;\n    for e in extensions {\n        if e.chars().filter(|c| c.is_uppercase()).count()\
    \ > strength {\n            strength = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \            extension = e;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut max_extension\
    \ = String::new();\n    for (extension, extension_map) in extensions_map.iter()\
    \ {\n        let mut extension_strength = extension_map.len() as i32;\n      \
    \  for letter in extension.chars() {\n            extension_strength += extension_map.get(letter).unwrap();\n\
    \        }\n        if extension_strength > strength {\n            strength =\
    \ extension_strength;\n            max_extension = extension;\n        }\n   \
    \ }\n    class_name.to_string() + \".\" + max_extension.to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    let mut i = 0;\n    for extension in extensions {\n\
    \        let mut extension_len = extension.len();\n        for &c in extension\
    \ {\n            if c.is_uppercase() {\n                strength += 1;\n     \
    \       }\n            if c.is_lowercase() {\n                strength -= 1;\n\
    \            }\n        }\n        if strength > 0 {\n            break;\n   \
    \     }\n        i += 1;\n    }\n    if strength == 0 {\n        extension = class_name;\n\
    \    }\n    extension.push_str(&extensions[extensions.len() - i]);\n    extension",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    let mut\
    \ i = 0;\n    for extension in extensions {\n        if extension.chars().filter(|c|\
    \ c.is_uppercase()).count() > strength {\n            strength = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n            extension = extension.clone();\n   \
    \     }\n    }\n    extension = extension.clone();\n    \n    for extension in\
    \ extensions {\n        if extension.chars().filter(|c| c.is_lowercase()).count()\
    \ > strength {\n            strength = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \            extension = extension.clone();\n        }\n    }\n    \n    extension\
    \ = extension.clone();\n    \n    if strength == 0 {\n        extension = extension.clone();\n\
    \    }\n    \n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension[i] >= class_name[i] {\n\
    \                extension_len = i;\n            } else {\n                class_len\
    \ = i;\n            }\n            i += 1;\n        }\n        if strength ==\
    \ -1 || strength > extension_len - class_len {\n            strength = extension_len\
    \ - class_len;\n            extension = extension.clone();\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength: i32 =\
    \ -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    let mut class_len = class_name.len();\n    \n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        let mut class_len\
    \ = class_name.len();\n        \n        while extension_len > class_len {\n \
    \           extension = extension.chars().filter(|&c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \            extension_len = extension.len();\n        }\n        \n        while\
    \ class_len > extension_len {\n            class_len = class_name.len();\n   \
    \     }\n        \n        let cap = extension.chars().filter(|&c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = class_name.chars().filter(|&c| c >= 'a'\
    \ && c <= 'z').count();\n        \n        if cap - sm > strength {\n        \
    \    strength = cap - sm;\n            extension = extension.chars().filter(|&c|\
    \ c >= 'A' && c <= 'Z').collect::<String>();\n        }\n    }\n    \n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i32 = -1;\n    let mut\
    \ extension = String::new();\n    for e in extensions {\n        let mut c = e.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').count();\n        let mut s = e.chars().filter(|c| *c\
    \ >= 'a' && *c <= 'z').count();\n        if c > s {\n            strength = -1;\n\
    \            extension = e;\n        } else if c < s {\n            strength =\
    \ s;\n            extension = e;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_length = extension.len();\n     \
    \   let mut class_length = class_name.len();\n        while extension_length >=\
    \ class_length {\n            let mut diff = extension_length - class_length;\n\
    \            if diff > 0 {\n                diff -= 1;\n            }\n      \
    \      extension = extension.chars().skip(diff).collect();\n            class_length\
    \ += 1;\n        }\n        let mut diff = class_length - extension_length;\n\
    \        if diff > 0 {\n            diff -= 1;\n        }\n        extension =\
    \ extension.chars().skip(diff).collect();\n        if extension.chars().count()\
    \ == 0 {\n            continue;\n        }\n        let mut class_char = class_name.chars().skip(class_length).collect();\n\
    \        let mut extension_char = extension.chars().skip(extension_length).collect();\n\
    \        if class_char == extension_char {\n            continue;\n        }\n\
    \        let mut class_char_iter = class_char.chars();\n        let mut extension_char_iter\
    \ = extension_char.chars();\n        let mut class_char_iter = class_char_iter.peekable();\n\
    \        let mut extension_char_iter = extension_char_iter.peekable();\n     \
    \   let mut class_char = class_char_iter.peek();\n        let mut extension_char\
    \ = extension_char_iter.peek();\n        let mut class_char_iter = class_char_iter.next();\n\
    \        let mut extension_char_iter = extension_char_iter.next();\n        let\
    \ mut class_char = class_char_iter.peek();\n        let mut extension_char = extension_char_iter.peek();\n\
    \        let mut class_char_iter = class_char_iter.next();\n        let mut extension_char_iter\
    \ = extension_char_iter.next();\n        let mut class_char = class_char_iter.peek();\n\
    \        let mut extension_char = extension_char_iter.peek();\n        let mut\
    \ class_char_iter = class_char_iter.next();\n        let mut extension_char_iter\
    \ = extension_char_iter.next();\n        let mut class_char = class_char_iter.peek();\n\
    \        let mut extension_char = extension_char_iter.peek();\n        let mut\
    \ class_char_iter = class_char_iter.next();\n        let mut extension_char_iter\
    \ = extension_char_iter.next();\n        let mut class_char = class_char_iter.peek();\n\
    \        let mut extension_char = extension_char_iter.peek();\n        let mut\
    \ class_char_iter = class_char_iter.next();\n        let mut extension_char_iter\
    \ = extension_char_iter.next();\n        let mut class_char = class_char_iter.peek();\n\
    \        let mut extension_char = extension_char_iter.", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    let mut extension_len\
    \ = extension.len();\n    for e in extensions {\n        let mut e_len = e.len();\n\
    \        for c in e {\n            if c.is_uppercase() {\n                strength\
    \ = strength.saturating_add((c.to_lowercase().len() - e_len) / 2);\n         \
    \       e_len -= c.to_lowercase().len();\n            } else {\n             \
    \   strength = strength.saturating_add((e_len - c.to_lowercase().len()) / 2);\n\
    \                e_len -= e_len;\n            }\n        }\n        if strength\
    \ > 0 {\n            extension = extension.concat(e);\n            extension_len\
    \ += e.len();\n        }\n    }\n    extension = extension.concat(\".\".to_string()\
    \ + class_name.to_string());\n    if extension_len > 0 {\n        extension =\
    \ extension.concat(\".\".to_string() + extensions[extensions.len() - 1]);\n  \
    \  }\n    extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ letter in extension.chars() {\n            extension_map.insert(letter, 0);\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut strength = -1;\n    let mut extension = String::new();\n    for letter\
    \ in class_name.chars() {\n        if let Some(extension_map) = extensions_map.get(&letter)\
    \ {\n            if let Some(strength) = extension_map.get(&letter) {\n      \
    \          if strength > strength {\n                    extension = extension;\n\
    \                    strength = strength;\n                }\n            } else\
    \ {\n                extension = extension;\n                strength = -1;\n\
    \            }\n        } else {\n            extension = extension;\n       \
    \     strength = -1;\n        }\n    }\n    extension", "    let mut strength:\
    \ i32 = -1;\n    let mut extension = String::new();\n    for e in extensions {\n\
    \        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i32 = 0;\n    let mut extension = String::new();\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase());\n    extension.concat(\".\").concat(format!(\"\
    {}\", strength));", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let mut c = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut s = e.chars().filter(|c| c.is_lowercase()).count();\n       \
    \ if c > s {\n            strength = -1;\n            extension = e;\n       \
    \ } else if c < s {\n            strength = s;\n            extension = e;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension_length = extension.len();\n        let\
    \ mut class_length = class_name.len();\n        let mut i = 0;\n        while\
    \ i < extension_length {\n            if extension[i] == class_name[i] {\n   \
    \             i += 1;\n                extension_length -= 1;\n              \
    \  class_length -= 1;\n            } else {\n                break;\n        \
    \    }\n        }\n        if extension_length == 0 {\n            strength =\
    \ -1;\n            break;\n        }\n        let mut j = 0;\n        while j\
    \ < class_length {\n            if class_name[j] == extension[j] {\n         \
    \       j += 1;\n                extension_length -= 1;\n                class_length\
    \ -= 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        if extension_length == 0 {\n            strength = -1;\n        \
    \    break;\n        }\n        if strength == -1 || strength > j - i {\n    \
    \        strength = j - i;\n            extension = extension.clone();\n     \
    \   }\n    }\n    extension.clone()", "    let mut strength = -1;\n    let mut\
    \ extension = String::new();\n    for extension in extensions {\n        let mut\
    \ extension = extension.clone();\n        let mut cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if cap > sm {\n            strength = cap\
    \ - sm;\n            extension = extension.to_lowercase();\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map =\
    \ HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for c in extension.chars() {\n            if let\
    \ Some(mut value) = extension_map.entry(c) {\n                value.insert(1);\n\
    \            } else {\n                extension_map.insert(c, 1);\n         \
    \   }\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut strength = -1;\n    let mut extension = String::new();\n  \
    \  let mut extension_map = extensions_map.remove(&class_name);\n    while let\
    \ Some(mut extension_map) = extension_map {\n        let mut extension_strength\
    \ = -1;\n        for (key, value) in extension_map {\n            if value > extension_strength\
    \ {\n                extension_strength = value;\n                extension =\
    \ key;\n            }\n        }\n        extension_map.remove(&extension);\n\
    \        if extension_strength > strength {\n            strength = extension_strength;\n\
    \        }\n    }\n    extension.to_string()", "    let mut strength: i32 = 0;\n\
    \    let mut extension = String::new();\n    for extension in extensions {\n \
    \       let mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n    }\n    if strength == 0 {\n        return\
    \ class_name;\n    }\n    let mut strength_str = String::new();\n    strength_str.push_str(&class_name.to_lowercase());\n\
    \    strength_str.push_str(&extensions[strength].to_lowercase());\n    return\
    \ strength_str;", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        let mut i = 0;\n  \
    \      while i < extension_length && i < class_length {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_length -= 1;\n               \
    \ class_length -= 1;\n            } else {\n                i += 1;\n        \
    \    }\n        }\n        if extension_length == 0 {\n            strength =\
    \ -1;\n            break;\n        }\n        let mut j = 0;\n        while j\
    \ < extension_length {\n            if extension[j] == class_name[j] {\n     \
    \           strength += 1;\n                j += 1;\n            } else {\n  \
    \              break;\n            }\n        }\n    }\n    if strength == -1\
    \ {\n        String::from(\"\")\n    } else {\n        String::from(&format!(\"\
    {}.{}\", class_name, extensions[strength]))\n    }", "    let mut strength: i32\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        for c in extension {\n            if c.is_uppercase() {\n           \
    \     strength += 1;\n            }\n            if c.is_lowercase() {\n     \
    \           strength -= 1;\n            }\n        }\n        if strength > 0\
    \ {\n            break;\n        }\n    }\n    extension = extension.split_whitespace().collect::<Vec<String>>().sort_by(|a,\
    \ b| b.cmp(a)).last().unwrap();\n    extension = extension.to_string() + class_name.to_string()\
    \ + extension.to_string();\n    return extension;", "    let mut strength: i32\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    let mut class_len = class_name.len();\n    \n    for extension in extensions\
    \ {\n        let mut extension_len = extension.len();\n        for class_len in\
    \ 0..class_len {\n            if extension[class_len] == class_name[class_len]\
    \ {\n                strength = extension_len - class_len;\n                break;\n\
    \            }\n        }\n    }\n    \n    if strength == -1 {\n        return\
    \ class_name;\n    }\n    \n    let mut extension_len = extension.len();\n   \
    \ for class_len in 0..class_len {\n        if extension[class_len] == class_name[class_len]\
    \ {\n            extension_len = extension_len - class_len;\n        }\n    }\n\
    \    \n    extension.truncate(extension_len);\n    \n    return class_name + extension;",
  "    let mut strength: i32 = -1;\n    let mut extension = String::new();\n    for\
    \ extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        while extension_len >\
    \ class_len {\n            extension = extension.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').collect();\n            extension_len -= extension.len();\n      \
    \      class_len -= extension.len();\n        }\n        let mut class_len = class_name.len();\n\
    \        while class_len > extension_len {\n            class_len = class_name.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').collect();\n            extension_len -= class_len;\n\
    \        }\n        let cap = extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect();\n\
    \            extension_len -= extension.len();\n            class_len -= extension.len();\n\
    \        }\n    }\n    extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>().unwrap()\
    \ + \".\" + class_name", "    let mut strength = -1;\n    let mut extension =\
    \ String::new();\n    for extension in extensions {\n        let mut extension_length\
    \ = extension.len();\n        let mut class_length = class_name.len();\n     \
    \   while extension_length >= class_length {\n            let mut extension_letter\
    \ = extension.chars().next().unwrap();\n            let mut class_letter = class_name.chars().next().unwrap();\n\
    \            while class_letter != extension_letter {\n                class_letter\
    \ = class_name.chars().next().unwrap();\n            }\n            extension_length\
    \ -= class_length;\n            class_length -= extension_length;\n        }\n\
    \        if strength == -1 || strength > extension_length {\n            strength\
    \ = extension_length;\n            extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for extension in extensions {\n \
    \       let mut c = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \        let mut s = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n\
    \        if c > s {\n            strength = -1;\n            extension = extension;\n\
    \        } else {\n            strength = c as i32 - s as i32;\n            extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_count = extensions.len();\n    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    \n    for extension in extensions\
    \ {\n        let mut extension_length = extension.len();\n        let mut extension_strength\
    \ = -1;\n        let mut extension_class = String::new();\n        \n        for\
    \ c in extension {\n            if c.is_uppercase() {\n                extension_strength\
    \ += 1;\n            }\n            if c.is_lowercase() {\n                extension_strength\
    \ += 1;\n            }\n        }\n        \n        if extension_strength > strength\
    \ {\n            strength = extension_strength;\n            extension_class =\
    \ extension;\n        }\n        \n        extensions_count -= 1;\n    }\n   \
    \ \n    if extensions_count > 0 {\n        extension = extension.split_whitespace().collect::<Vec<String>>().sort_by(|a,\
    \ b| b.cmp(a)).first().unwrap();\n    }\n    \n    class_name.to_string() + \"\
    .\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        if strength > 0 {\n            extension =\
    \ e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::new();\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        extension = extension.concat(e);\n  \
    \  }\n    extension.concat(\".\").concat(class_name.to_lowercase());\n    extension.concat(\"\
    .\").concat(format!(\"{}\", strength));", "    let mut strength = -1;\n    let\
    \ mut extension = String::new();\n    for extension in extensions {\n        let\
    \ cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::new();\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n            break;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::new();\n    let mut extension_len = extension.len();\n\
    \    for e in extensions {\n        let mut e = e.to_lowercase();\n        let\
    \ mut c = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let mut\
    \ s = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        if c > s {\n\
    \            c -= s;\n        }\n        if c > extension_len {\n            extension\
    \ = e.to_string();\n            extension_len = c.saturating_add((extension_len\
    \ - s));\n        }\n        if c > strength {\n            strength = c;\n  \
    \      }\n    }\n    extension.to_string() + class_name.to_string() + extensions[extension_len]",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension_length = extension.len();\n     \
    \   let mut class_length = class_name.len();\n        while extension_length >=\
    \ class_length {\n            let mut extension_letter = extension.chars().next().unwrap();\n\
    \            let mut class_letter = class_name.chars().next().unwrap();\n    \
    \        while extension_letter != class_letter {\n                extension_letter\
    \ = extension.chars().next().unwrap();\n                class_letter = class_name.chars().next().unwrap();\n\
    \            }\n            extension_length -= class_letter;\n            class_length\
    \ -= extension_letter;\n        }\n        if extension_length > strength {\n\
    \            strength = extension_length;\n            extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::new();\n    for extension in\
    \ extensions {\n        let mut extension = extension.clone();\n        let mut\
    \ cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let mut\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        if cap\
    \ > sm {\n            strength = cap - sm;\n            extension = extension.clone();\n\
    \        }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extensions[strength].to_string());\n\
    \    extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        for\
    \ c in extension {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n\
    \        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::new();\n\
    \    for extension in extensions_map.keys() {\n        let mut extension_map =\
    \ extensions_map.get(extension);\n        let mut extension_strength = -1;\n \
    \       for c in extension {\n            let mut extension_map = extensions_map.get(extension);\n\
    \            if extension_map.contains_key(&c.to_lowercase()) {\n            \
    \    extension_strength += 1;\n            }\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            best_extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut extension = extension.clone();\n        let\
    \ mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            strength = cap - sm;\n            extension = extension.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength: i64 = 0;\n    let mut extension = String::new();\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut cap = String::new();\n        let mut sm = String::new();\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap.push(c);\n            } else {\n                sm.push(c);\n\
    \            }\n        }\n        cap.shrink_to_fit();\n        sm.shrink_to_fit();\n\
    \        let cap_len = cap.len();\n        let sm_len = sm.len();\n        let\
    \ cap_diff = cap_len - sm_len;\n        if cap_diff > 0 {\n            strength\
    \ += cap_diff as i64;\n        }\n    }\n    match strength {\n        0 => class_name\
    \ + extension,\n        s => class_name + extensions[strength as usize].to_string(),\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase());\n    extension.concat(\".\").concat(format!(\"\
    {}\", strength));", "    let mut strength: i32 = -1;\n    let mut extension =\
    \ String::new();\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut cap =\
    \ class_name.chars().filter(|c| c.is_uppercase()).count();\n        let mut sm\
    \ = class_name.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            cap = cap - sm;\n            sm = sm;\n        }\n       \
    \ let strength = cap - sm;\n        if strength > 0 {\n            break;\n  \
    \      }\n    }\n    extension.push_str(&class_name.to_string());\n    extension.push_str(&extension.to_string());\n\
    \    extension", "    let mut strength = -1;\n    let mut extension = String::new();\n\
    \    for extension in extensions {\n        let mut extension_length = extension.len();\n\
    \        let mut class_length = class_name.len();\n        while extension_length\
    \ >= class_length {\n            extension = extension.chars().filter(|c| c >=\
    \ 'A' && c <= 'Z').collect::<String>().to_owned();\n            class_length -=\
    \ extension.len();\n        }\n        let mut class_length = class_name.len();\n\
    \        while class_length >= extension_length {\n            class_length -=\
    \ extension.len();\n            extension = extension.chars().filter(|c| c >=\
    \ 'a' && c <= 'z').collect::<String>().to_owned();\n        }\n        let mut\
    \ class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n        }\n        let\
    \ mut class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').collect::<String>().to_owned();\n        }\n        let\
    \ mut class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n        }\n        let\
    \ mut class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').collect::<String>().to_owned();\n        }\n        let\
    \ mut class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n        }\n        let\
    \ mut class_length = class_name.len();\n        while class_length >= extension_length\
    \ {\n            class_length -= extension.len();\n            extension = extension.chars().filter(|c|\
    \ c >= 'a' && "]
stop_tokens:
- "\n}"
