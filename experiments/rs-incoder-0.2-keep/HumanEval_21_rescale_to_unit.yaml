name: HumanEval_21_rescale_to_unit
language: rust
prompt: "/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
tests: "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
  \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
  \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
  \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0,\
  \ 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
completions: ["    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for\
    \ n in numbers {\n        if n < min {\n            min = n;\n        }\n    \
    \    if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        let new_n = ((n - min) / (max\
    \ - min)) as f64;\n        new_numbers.push(new_n);\n    }\n    new_numbers",
  "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_val {\n            min_val = n;\n        }\n\
    \        if n > max_val {\n            max_val = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let mut new_n\
    \ = n;\n        if n == min_val {\n            new_n = 0;\n        }\n       \
    \ if n == max_val {\n            new_n = 1;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    new_numbers.extend_from_slice(&[min]);\n    new_numbers.extend_from_slice(&[max]);\n\
    \    new_numbers", "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for n in numbers {\n        if n < min_val {\n            min_val = n;\n\
    \        }\n        if n > max_val {\n            max_val = n;\n        }\n  \
    \  }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n        let\
    \ new_n = ((n - min_val) / (max_val - min_val)) * 2.0 + 0.5;\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers",
  "    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n  \
    \  for n in numbers {\n        if n < min_number {\n            min_number = n;\n\
    \        }\n        if n > max_number {\n            max_number = n;\n       \
    \ }\n    }\n    let mut scale = (max_number - min_number).recip();\n    for n\
    \ in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n       \
    \ if n < min {\n            min = n;\n        }\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min).div(scale));\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    numbers.iter().for_each(|n|\
    \ {\n        *n = *n * scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    let mut result =\
    \ Vec::new();\n    for n in numbers {\n        result.push(n * scale);\n    }\n\
    \    result", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) /\
    \ (max - min));\n    }\n    new_numbers", "    let mut min = numbers[0];\n   \
    \ let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n  \
    \          min = n;\n        }\n        if n > max {\n            max = n;\n \
    \       }\n    }\n    let mut scale = (max - min).recip();\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n\
    \    for n in numbers {\n        *n -= min_val * scale;\n        scale *= 1.0;\n\
    \    }\n    numbers", "    let mut min_val = numbers[0];\n    let mut max_val\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_val {\n          \
    \  min_val = n;\n        }\n        if n > max_val {\n            max_val = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min_val {\n            new_n\
    \ -= min_val;\n        }\n        if new_n > max_val {\n            new_n -= max_val;\n\
    \        }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let\
    \ mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_value {\n            min_value = n;\n     \
    \   }\n        if n > max_value {\n            max_value = n;\n        }\n   \
    \ }\n    let mut scale = max_value - min_value;\n    for n in numbers {\n    \
    \    *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "    let mut\
    \ min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_val {\n            min_val = n;\n        }\n        if\
    \ n > max_val {\n            max_val = n;\n        }\n    }\n    let mut scale\
    \ = (max_val - min_val).recip();\n    let mut new_numbers = Vec::new();\n    for\
    \ n in numbers {\n        new_numbers.push((n - min_val).map(|x| x * scale).unwrap_or(0.0))\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 * (max - min);\n    let mut new_numbers = Vec::new();\n    for &n\
    \ in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers",
  "    let mut min_number = numbers.iter().min().unwrap();\n    let mut max_number\
    \ = numbers.iter().max().unwrap();\n    let mut rescaled_numbers = Vec::new();\n\
    \    for number in numbers {\n        let rescaled_number = number / max_number\
    \ - min_number / min_number;\n        rescaled_numbers.push(rescaled_number);\n\
    \        min_number = number;\n        max_number = number;\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for &n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ n = n * scale);\n    numbers", "    let mut min_val = numbers[0];\n    let mut\
    \ max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n  \
    \          min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        let mut new_n = n;\n        if new_n < min_val {\n      \
    \      new_n -= min_val;\n        }\n        if new_n > max_val {\n          \
    \  new_n -= max_val;\n        }\n        new_numbers.push(new_n);\n    }\n   \
    \ new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for\
    \ n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0f64;\n   \
    \ for &n in numbers {\n        *n /= max - min;\n        *n *= scale;\n      \
    \  scale *= 1.0f64;\n    }\n    numbers", "    let mut min = numbers[0];\n   \
    \ let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n  \
    \          min = n;\n        }\n        if n > max {\n            max = n;\n \
    \       }\n    }\n    let mut scale = max - min;\n    scale = scale / 2.0 + 1.0;\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for &n in numbers {\n        if n < min {\n         \
    \   min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for &n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_min\
    \ = min - 1.0 * min / max;\n    let mut new_max = max - 1.0 * max / min;\n   \
    \ for n in numbers {\n        if n < new_min {\n            new_min = n;\n   \
    \     }\n        if n > new_max {\n            new_max = n;\n        }\n    }\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - new_min) / (new_max - new_min));\n    }\n    new_numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n \
    \   for n in numbers {\n        let mut new_n = n;\n        if new_n < min {\n\
    \            new_n -= min;\n        }\n        if new_n > max {\n            new_n\
    \ -= max;\n        }\n        new_numbers.push(new_n);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    let mut rescaled: Vec<f64> = Vec::new();\n    for n in numbers {\n      \
    \  rescaled.push(n * scale);\n    }\n    rescaled", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min]);\n\
    \    new_numbers.extend_from_slice(&[max]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 * (max - min);\n    for &n in numbers {\n        *n -= min;\n  \
    \      *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n   \
    \ let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n  \
    \          min = n;\n        }\n        if n > max {\n            max = n;\n \
    \       }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = max_val - min_val;\n \
    \   for n in numbers {\n        n -= min_val;\n        n *= scale;\n        n\
    \ += min_val;\n    }\n    numbers", "    let mut min_number = numbers[0];\n  \
    \  let mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < min_number {\n            min_number = number;\n        }\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for number in numbers {\n        let new_number\
    \ = (number - min_number) / (max_number - min_number);\n        new_numbers.push(new_number);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = max - min;\n    numbers.iter().for_each(|n| {\n        *n -= min;\n\
    \        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0f64;\n    for n in numbers {\n        scale *=\
    \ n - min;\n    }\n    numbers.iter().map(|n| n * scale).collect()", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n    numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n       \
    \ let new_value = ((n - min_value) / (max_value - min_value)).ceil() as f64;\n\
    \        new_numbers.push(new_value);\n    }\n    new_numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n *= scale;\n    }\n    numbers",
  "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_val {\n            min_val = n;\n        }\n\
    \        if n > max_val {\n            max_val = n;\n        }\n    }\n    let\
    \ mut scale = max_val - min_val;\n    for n in numbers {\n        *n -= min_val;\n\
    \        *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale + min);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_value {\n            min_value = n;\n        }\n     \
    \   if n > max_value {\n            max_value = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let mut new_n\
    \ = n;\n        if new_n < min_value {\n            new_n -= min_value;\n    \
    \    }\n        if new_n > max_value {\n            new_n -= max_value;\n    \
    \    }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0f64;\n    for\
    \ n in numbers {\n        scale *= n - min;\n    }\n    numbers.iter().map(|n|\
    \ n * scale).collect()", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n * scale);\n    }\n    result", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0f64 / max - min;\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min_value = numbers[0];\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let new_value = ((n - min_value) / (max_value\
    \ - min_value)) * 2.0 + 0.5;\n        new_numbers.push(new_value);\n    }\n  \
    \  new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 / (max - min);\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ n = n * scale);\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n        n\
    \ -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    for n in numbers\
    \ {\n        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n    let\
    \ mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n\
    \            min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut scale = max_val - min_val;\n    for n in\
    \ numbers {\n        *n -= min_val;\n        *n *= scale;\n    }\n    numbers",
  "    let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n  \
    \  for number in numbers {\n        if number < min_number {\n            min_number\
    \ = number;\n        }\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for\
    \ number in numbers {\n        let new_number = (number - min_number) / (max_number\
    \ - min_number);\n        new_numbers.push(new_number);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for &n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n\
    \    for n in numbers {\n        *n -= min_val;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n      \
    \  let new_n = ((n - min_value) / (max_value - min_value)) * 1.0;\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min).div(scale));\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 / (max -\
    \ min);\n    for n in numbers {\n        *n -= min;\n        *n *= scale;\n  \
    \  }\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 / (max - min);\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n      \
    \  let mut new_n = n;\n        if new_n < min {\n            new_n -= min;\n \
    \       }\n        if new_n > max {\n            new_n -= max;\n        }\n  \
    \      new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut min_value\
    \ = numbers[0];\n    let mut max_value = numbers[0];\n    for number in numbers\
    \ {\n        if number < min_value {\n            min_value = number;\n      \
    \  }\n        if number > max_value {\n            max_value = number;\n     \
    \   }\n    }\n    let mut new_numbers = Vec::new();\n    for number in numbers\
    \ {\n        new_numbers.push(number - min_value) / (max_value - min_value);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n| {\n\
    \        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) /\
    \ scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n    let\
    \ mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n\
    \            min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        let new_n = ((n - min_val) / (max_val - min_val)).floor()\
    \ as f64;\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let\
    \ mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for &n\
    \ in numbers {\n        if n < min_value {\n            min_value = n;\n     \
    \   }\n        if n > max_value {\n            max_value = n;\n        }\n   \
    \ }\n    let mut scale = (max_value - min_value).recip();\n    for &n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n    numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_value]);\n\
    \    new_numbers.extend_from_slice(&[max_value]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        new_numbers.push((n - min) / scale + 0.5);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    numbers.iter().for_each(|n| {\n        n -= min;\n        n /= scale;\n\
    \    });\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0 / (max - min);\n    for &n in numbers {\n        *n -= min;\n  \
    \      *n *= scale;\n    }\n    numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n\
    \    for n in numbers {\n        *n -= min_val;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 / (max - min);\n    numbers.iter().for_each(|n| n = n * scale);\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push(n\
    \ * scale);\n    }\n    result", "    let mut min_val = numbers[0];\n    let mut\
    \ max_val = numbers[0];\n    for n in numbers {\n        if n < min_val {\n  \
    \          min_val = n;\n        }\n        if n > max_val {\n            max_val\
    \ = n;\n        }\n    }\n    let mut scale = (max_val - min_val).recip();\n \
    \   let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min_val) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n     \
    \   n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min_value\
    \ = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers {\n\
    \        if n < min_value {\n            min_value = n;\n        }\n        if\
    \ n > max_value {\n            max_value = n;\n        }\n    }\n    let mut scale\
    \ = (max_value - min_value).recip();\n    for n in numbers {\n        *n -= min_value;\n\
    \        *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    for n in numbers\
    \ {\n        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    for &n in numbers {\n        *n -= min;\n\
    \        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let new_n = ((n - min) / (max - min)) as f64;\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min_val = numbers[0];\n    let mut max_val\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_val {\n          \
    \  min_val = n;\n        }\n        if n > max_val {\n            max_val = n;\n\
    \        }\n    }\n    let mut scale = (max_val - min_val).recip();\n    for n\
    \ in numbers {\n        *n -= min_val * scale;\n        scale *= 1.0;\n    }\n\
    \    numbers", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut scale = (max_value - min_value).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min_value)\
    \ / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for &n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 / (max - min);\n    for &n in numbers\
    \ {\n        *n = *n * scale;\n    }\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n   \
    \ let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = max_value - min_value;\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n < min_value {\n            min_value = n;\n\
    \        }\n        if n > max_value {\n            max_value = n;\n        }\n\
    \    }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min_value)\
    \ / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for &n in numbers {\n        if n < min {\n     \
    \       min = n;\n        }\n        if n > max {\n            max = n;\n    \
    \    }\n    }\n    let mut rescaled_numbers = Vec::new();\n    for &n in numbers\
    \ {\n        rescaled_numbers.push((n - min) / (max - min));\n    }\n    rescaled_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0f64 / max\
    \ - min;\n    numbers.iter().for_each(|n| n = n * scale);\n    numbers", "   \
    \ let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let mut new_n = n;\n        if new_n < min {\n\
    \            new_n -= min;\n        }\n        if new_n > max {\n            new_n\
    \ -= max;\n        }\n        new_numbers.push(new_n);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min) / (2.0 * std::f64::consts::PI);\n    numbers.iter().for_each(|n| {\n  \
    \      *n -= min;\n        *n *= scale;\n    });\n    numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut scale = 1.0f64 / max - min;\n\
    \    for n in numbers {\n        *n -= min;\n        *n *= scale;\n    }\n   \
    \ numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n  \
    \  for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push((n - min) * scale);\n    }\n    result", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push(n\
    \ * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push((n - min).mul(scale));\n    }\n \
    \   result", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n \
    \   for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min_value)\
    \ / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * (max - min) / (2.0 * std::f64::consts::PI);\n\
    \    numbers.iter().for_each(|n| {\n        *n -= min;\n        *n = *n * scale;\n\
    \    });\n    numbers", "    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_number {\n       \
    \     min_number = n;\n        }\n        if n > max_number {\n            max_number\
    \ = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_number]);\n\
    \    new_numbers.extend_from_slice(&[max_number]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push((n - min) * scale);\n    }\n    result", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    numbers.iter().for_each(|n| {\n        *n = *n / scale;\n    });\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let mut new_n = n;\n        if new_n < min {\n\
    \            new_n -= min;\n        }\n        if new_n > max {\n            new_n\
    \ -= max;\n        }\n        new_numbers.push(new_n);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min);\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n     \
    \   new_numbers.push((n - min) / scale);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut rescaled: Vec<f64> = Vec::new();\n\
    \    for n in numbers {\n        rescaled.push((n - min) / (max - min));\n   \
    \ }\n    rescaled", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        let mut new_n = n;\n        if\
    \ new_n < min {\n            new_n -= min;\n        }\n        if new_n > max\
    \ {\n            new_n -= max;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut rescaled:\
    \ Vec<f64> = Vec::new();\n    for n in numbers {\n        rescaled.push((n - min)\
    \ / (max - min));\n    }\n    rescaled", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = (max - min).recip();\n    for n in numbers {\n\
    \        *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers\
    \ {\n        let mut new_n = n;\n        if new_n < min {\n            new_n -=\
    \ min;\n        }\n        if new_n > max {\n            new_n -= max;\n     \
    \   }\n        new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for number\
    \ in numbers {\n        if number < min_value {\n            min_value = number;\n\
    \        }\n        if number > max_value {\n            max_value = number;\n\
    \        }\n    }\n    let mut new_numbers = Vec::new();\n    for number in numbers\
    \ {\n        let new_number = (number - min_value) / (max_value - min_value) as\
    \ f64;\n        new_numbers.push(new_number);\n    }\n    new_numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    numbers.iter().for_each(|n| n *= scale);\n    numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut rescaled = Vec::new();\n    for\
    \ n in numbers {\n        rescaled.push((n - min) / (max - min));\n    }\n   \
    \ rescaled", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n \
    \   for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        let mut new_n = n;\n        if\
    \ new_n < min {\n            new_n -= min as f64;\n        }\n        if new_n\
    \ > max {\n            new_n -= max as f64;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min_value = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_value {\n       \
    \     min_value = n;\n        }\n        if n > max_value {\n            max_value\
    \ = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for &n in numbers {\n        *n -= min_value;\n        *n *= scale;\n   \
    \ }\n    numbers", "    let mut min_number = numbers.iter().min().unwrap();\n\
    \    let mut max_number = numbers.iter().max().unwrap();\n    let mut new_numbers\
    \ = Vec::new();\n    new_numbers.extend_from_slice(&numbers);\n    new_numbers.sort_unstable_by_key(|x|\
    \ x.partial_cmp(&min_number).unwrap());\n    new_numbers.sort_unstable_by_key(|x|\
    \ x.partial_cmp(&max_number).unwrap());\n    new_numbers.iter_mut().for_each(|x|\
    \ {\n        *x = *x / max_number as f64;\n    });\n    new_numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max -\
    \ min) / (2.0 * std::f64::consts::PI);\n    numbers.iter().for_each(|n| {\n  \
    \      n -= min;\n        n /= scale;\n    });\n    numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ n = n * scale);\n    numbers", "    let mut min_value = numbers[0];\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 / (max - min);\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * max / min;\n    for n in numbers {\n       \
    \ *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * (max - min);\n    numbers.iter().for_each(|n|\
    \ {\n        n -= min;\n        n /= scale;\n    });\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut rescaled_numbers = Vec::new();\n\
    \    for &n in numbers {\n        rescaled_numbers.push((n - min) / (max - min));\n\
    \    }\n    rescaled_numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n        n\
    \ -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min_number =\
    \ numbers[0];\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < min_number {\n            min_number = number;\n    \
    \    }\n        if number > max_number {\n            max_number = number;\n \
    \       }\n    }\n    let mut new_numbers = Vec::new();\n    for number in numbers\
    \ {\n        let new_number = (number - min_number) / (max_number - min_number);\n\
    \        new_numbers.push(new_number);\n    }\n    new_numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0f64;\n    for\
    \ n in numbers {\n        scale *= (n - min) / (max - min);\n    }\n    numbers.iter().map(|n|\
    \ n * scale).collect()", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for\
    \ &n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n       \
    \ let new_n = ((n - min_value) / (max_value - min_value)) * 2.0 - 1.0;\n     \
    \   new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut min_value\
    \ = numbers[0];\n    let mut max_value = numbers[0];\n    for &n in numbers {\n\
    \        if n < min_value {\n            min_value = n;\n        }\n        if\
    \ n > max_value {\n            max_value = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for &n in numbers {\n        let new_value = ((n - min_value)\
    \ / (max_value - min_value)) * 2.0 + 0.5;\n        new_numbers.push(new_value);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n -= min;\n       \
    \ *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * (max - min) / (1.0 * numbers.len());\n    for\
    \ n in numbers {\n        n -= min;\n        n /= scale;\n    }\n    numbers",
  "    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n    for n\
    \ in numbers {\n        if n < min_val {\n            min_val = n;\n        }\n\
    \        if n > max_val {\n            max_val = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    new_numbers.extend_from_slice(&[min_val]);\n\
    \    new_numbers.extend_from_slice(&[max_val]);\n    new_numbers.extend_from_slice(&numbers[1..]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = max - min;\n    if scale == 0.0 {\n        return vec![];\n    }\n \
    \   let mut result = vec![];\n    for &n in numbers {\n        let mut n = n -\
    \ min;\n        let mut n2 = n * n;\n        let mut n3 = n * n * n;\n       \
    \ let mut n4 = n * n * n * n;\n        let mut n5 = n * n * n * n * n;\n     \
    \   let mut n6 = n * n * n * n * n * n;\n        let mut n7 = n * n * n * n *\
    \ n * n * n;\n        let mut n8 = n * n * n * n * n * n * n * n;\n        let\
    \ mut n9 = n * n * n * n * n * n * n * n * n;\n        let mut n10 = n * n * n\
    \ * n * n * n * n * n * n * n;\n        let mut n11 = n * n * n * n * n * n *\
    \ n * n * n * n * n;\n        let mut n12 = n * n * n * n * n * n * n * n * n\
    \ * n * n * n;\n        let mut n13 = n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n;\n        let mut n14 = n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n;\n        let mut n15 = n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n;\n        let mut n16 = n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n;\n        let mut n17 = n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n   \
    \     let mut n18 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n;\n        let mut n19 = n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n;\n        let mut n20 = n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n \
    \       let mut n21 = n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n;\n        let mut n22 = n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        let mut n23 =\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n;\n        let mut ", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = 1.0f64;\n    for &n in numbers {\n        *n /= max - min;\n       \
    \ *n *= scale;\n        scale *= 1.0f64;\n    }\n    numbers", "    let mut min_value\
    \ = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers {\n\
    \        if n < min_value {\n            min_value = n;\n        }\n        if\
    \ n > max_value {\n            max_value = n;\n        }\n    }\n    let mut scale\
    \ = (max_value - min_value).recip();\n    for n in numbers {\n        *n -= min_value;\n\
    \        *n *= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n \
    \   let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min) / (1.0 * numbers.len());\n\
    \    numbers.iter().for_each(|n| {\n        n -= min;\n        n /= scale;\n \
    \   });\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 / (max - min);\n    for n in numbers {\n        *n -= min;\n        *n\
    \ *= scale;\n    }\n    numbers", "    let mut min_value = numbers[0];\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut rescaled_numbers = Vec::new();\n\
    \    for n in numbers {\n        rescaled_numbers.push((n - min_value) / (max_value\
    \ - min_value));\n    }\n    rescaled_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut rescaled: Vec<f64> = Vec::new();\n\
    \    for n in numbers {\n        rescaled.push((n - min) / (max - min));\n   \
    \ }\n    rescaled", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    for n in numbers {\n        *n /= scale;\n    }\n  \
    \  numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n \
    \   for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0f64 / max - min;\n    numbers.iter().for_each(|n| {\n        *n = *n *\
    \ scale;\n    });\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * max / min;\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = (max - min).recip();\n    let mut result = Vec::new();\n    for &n in\
    \ numbers {\n        result.push((n - min) * scale);\n    }\n    result", "  \
    \  let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = max - min;\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min_val = numbers[0];\n\
    \    let mut max_val = numbers[0];\n    for n in numbers {\n        if n < min_val\
    \ {\n            min_val = n;\n        }\n        if n > max_val {\n         \
    \   max_val = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n  \
    \  for n in numbers {\n        let mut new_n = n;\n        if new_n < min_val\
    \ {\n            new_n -= min_val;\n        }\n        if new_n > max_val {\n\
    \            new_n -= max_val;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min_value = numbers[0];\n    let mut max_value\
    \ = numbers[0];\n    for n in numbers {\n        if n < min_value {\n        \
    \    min_value = n;\n        }\n        if n > max_value {\n            max_value\
    \ = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n        n\
    \ -= min;\n        n /= scale;\n    }\n    numbers", "    let mut min_value =\
    \ numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers {\n \
    \       if n < min_value {\n            min_value = n;\n        }\n        if\
    \ n > max_value {\n            max_value = n;\n        }\n    }\n    let mut rescaled_numbers\
    \ = Vec::new();\n    for n in numbers {\n        rescaled_numbers.push((n - min_value)\
    \ / (max_value - min_value));\n    }\n    rescaled_numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n    \
    \    if n < min {\n            min = n;\n        }\n        if n > max {\n   \
    \         max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for &n in numbers {\n        result.push((n\
    \ - min).mul(scale));\n    }\n    result", "    let mut min = numbers[0];\n  \
    \  let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n \
    \           min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) /\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ {\n        *n /= scale;\n    });\n    numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 / (max - min);\n    for n in numbers\
    \ {\n        *n -= min;\n        *n *= scale;\n    }\n    numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_value {\n            min_value = n;\n        }\n     \
    \   if n > max_value {\n            max_value = n;\n        }\n    }\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        let new_value\
    \ = ((n - min_value) / (max_value - min_value)).floor();\n        new_numbers.push(new_value);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n\
    \    });\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = max - min;\n    scale = scale / 2.0 + 1.0;\n    numbers.iter().map(|n| n *\
    \ scale).collect()", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for &n in numbers {\n        if n < min {\n            min = n;\n       \
    \ }\n        if n > max {\n            max = n;\n        }\n    }\n    let mut\
    \ scale = max - min;\n    let mut new_numbers = Vec::new();\n    for &n in numbers\
    \ {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers", " \
    \   let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) / (max - min));\n\
    \    }\n    new_numbers", "    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < min_number {\n\
    \            min_number = number;\n        }\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    let mut new_numbers =\
    \ Vec::new();\n    for number in numbers {\n        let new_number = (number -\
    \ min_number) / (max_number - min_number);\n        new_numbers.push(new_number);\n\
    \    }\n    new_numbers", "    let mut min_number = numbers.iter().min().unwrap();\n\
    \    let mut max_number = numbers.iter().max().unwrap();\n    min_number = min_number\
    \ / max_number;\n    max_number = max_number / min_number;\n    numbers.iter().map(|x|\
    \ x * max_number).collect()", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        new_numbers.push((n - min) * scale);\n    }\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = max - min;\n    let mut new_numbers = Vec::new();\n \
    \   for n in numbers {\n        new_numbers.push((n - min) / scale + min);\n \
    \   }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut result = Vec::new();\n    for n in numbers\
    \ {\n        result.push((n - min) * scale);\n    }\n    result", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = max - min;\n    let\
    \ mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = (max - min).recip();\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        new_numbers.push((n - min) *\
    \ scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut\
    \ max = numbers[0];\n    for n in numbers {\n        if n < min {\n          \
    \  min = n;\n        }\n        if n > max {\n            max = n;\n        }\n\
    \    }\n    let mut scale = 1.0 * max / min;\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        result.push(n * scale);\n    }\n    result",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 / (max - min);\n    for n in numbers\
    \ {\n        *n -= min;\n        *n *= scale;\n    }\n    numbers", "    let mut\
    \ min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for n in numbers\
    \ {\n        if n < min_value {\n            min_value = n;\n        }\n     \
    \   if n > max_value {\n            max_value = n;\n        }\n    }\n    let\
    \ mut scale = max_value - min_value;\n    numbers.iter().for_each(|n| {\n    \
    \    *n -= min_value;\n        *n /= scale;\n    });\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    for n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut scale = (max_value - min_value).recip();\n\
    \    for n in numbers {\n        *n -= min_value;\n        *n *= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * max / min;\n    numbers.iter().for_each(|n| {\n        *n /= scale;\n\
    \    });\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let mut max\
    \ = numbers[0];\n    for n in numbers {\n        if n < min {\n            min\
    \ = n;\n        }\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    let mut scale = (max - min).recip();\n    for n in numbers {\n      \
    \  *n /= scale;\n    }\n    numbers", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers {\n\
    \        n -= min;\n        n *= scale;\n    }\n    numbers", "    let mut min\
    \ = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n     \
    \   if n < min {\n            min = n;\n        }\n        if n > max {\n    \
    \        max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * (max - min);\n    for n in numbers\
    \ {\n        n -= min;\n        n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n \
    \       if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 / (max - min);\n\
    \    for n in numbers {\n        *n = *n * scale;\n    }\n    numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut new_numbers = Vec::new();\n    for &n in numbers {\n        new_numbers.push((n\
    \ - min) * scale);\n    }\n    new_numbers", "    let mut min = numbers[0];\n\
    \    let mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n\
    \            min = n;\n        }\n        if n > max {\n            max = n;\n\
    \        }\n    }\n    let mut scale = 1.0 * max / min;\n    numbers.iter().for_each(|n|\
    \ n = n * scale);\n    numbers", "    let mut min_value = numbers[0];\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    for n in numbers {\n        let mut new_n = n;\n        if n < min_value\
    \ {\n            new_n -= min_value;\n        }\n        if n > max_value {\n\
    \            new_n -= max_value;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0f64 / max - min;\n    numbers.iter().for_each(|n| n = n * scale);\n   \
    \ numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n  \
    \  for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = 1.0 * (max - min);\n    for n in numbers {\n        n -= min;\n        n /=\
    \ scale;\n    }\n    numbers"]
stop_tokens:
- "\n}"
